<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维之窗</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kapyan.top/"/>
  <updated>2019-03-01T08:51:01.846Z</updated>
  <id>https://www.kapyan.top/</id>
  
  <author>
    <name>没有风的晴天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>minio常用操作</title>
    <link href="https://www.kapyan.top/posts/2398942176.html"/>
    <id>https://www.kapyan.top/posts/2398942176.html</id>
    <published>2019-03-01T08:32:20.000Z</published>
    <updated>2019-03-01T08:51:01.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="minio集群搭建"><a href="#minio集群搭建" class="headerlink" title="minio集群搭建"></a>minio集群搭建</h2><h3 id="配置key"><a href="#配置key" class="headerlink" title="配置key"></a>配置key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ACCESS_KEY=&lt;ACCESS_KEY&gt;</span><br><span class="line"><span class="built_in">export</span> MINIO_SECRET_KEY=&lt;SECRET_KEY&gt;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/minio server http://192.168.31.2/data1 http://192.168.31.2/data2 \</span><br><span class="line">               http://192.168.31.2/data3 http://192.168.31.2/data4 \</span><br><span class="line">               http://192.168.31.3/data1 http://192.168.31.3/data2 \</span><br><span class="line">               http://192.168.31.3/data3 http://192.168.31.3/data4 \</span><br><span class="line">               http://192.168.31.4/data1 http://192.168.31.4/data2 \</span><br><span class="line">               http://192.168.31.4/data3 http://192.168.31.4/data4 \</span><br><span class="line">               http://192.168.31.5/data1 http://192.168.31.5/data2 \</span><br><span class="line">               http://192.168.31.5/data3  http://192.168.31.5/data4</span><br></pre></td></tr></table></figure><h3 id="配置nginx支持LB"><a href="#配置nginx支持LB" class="headerlink" title="配置nginx支持LB"></a>配置nginx支持LB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">upstream minio &#123;</span><br><span class="line">   server 192.168.31.2:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.31.3:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.31.4:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.31.5:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line"> &#125;</span><br><span class="line">server &#123;</span><br><span class="line"> listen 9000;</span><br><span class="line">     server_name localhost;</span><br><span class="line">     charset utf-8;</span><br><span class="line">     default_type text/html;</span><br><span class="line">     location /&#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">             proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">         client_body_buffer_size 10M;</span><br><span class="line">             client_max_body_size 10G;</span><br><span class="line">                proxy_buffers 1024 4k;</span><br><span class="line">             proxy_read_timeout 300;</span><br><span class="line">             proxy_next_upstream error timeout http_404;</span><br><span class="line">          proxy_pass http://minio;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="minio启动脚本"><a href="#minio启动脚本" class="headerlink" title="minio启动脚本"></a>minio启动脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Minio</span><br><span class="line">Documentation=https://docs.minio.io</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">AssertFileIsExecutable=/usr/<span class="built_in">local</span>/bin/minio</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">User=minio-user</span><br><span class="line">Group=minio-user</span><br><span class="line"></span><br><span class="line">PermissionsStartOnly=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">EnvironmentFile=-/etc/default/minio</span><br><span class="line">ExecStartPre=/bin/bash -c <span class="string">"[ -n \"<span class="variable">$&#123;MINIO_VOLUMES&#125;</span>\" ] || echo \"Variable MINIO_VOLUMES not set in /etc/defaults/minio\""</span></span><br><span class="line"></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/minio server <span class="variable">$MINIO_OPTS</span> <span class="variable">$MINIO_VOLUMES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Let systemd restart this service only if it has ended with the clean exit code or signal.</span></span><br><span class="line">Restart=on-success</span><br><span class="line"></span><br><span class="line">StandardOutput=journal</span><br><span class="line">StandardError=inherit</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the maximum file descriptor number that can be opened by this process</span></span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable timeout logic and wait until process is stopped</span></span><br><span class="line">TimeoutStopSec=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># SIGTERM signal is used to stop Minio</span></span><br><span class="line">KillSignal=SIGTERM</span><br><span class="line"></span><br><span class="line">SendSIGKILL=no</span><br><span class="line"></span><br><span class="line">SuccessExitStatus=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># Built for $&#123;project.name&#125;-$&#123;project.version&#125; ($&#123;project.name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="minio设置永久下载链接"><a href="#minio设置永久下载链接" class="headerlink" title="minio设置永久下载链接"></a>minio设置永久下载链接</h2><h3 id="添加minio-host"><a href="#添加minio-host" class="headerlink" title="添加minio host"></a>添加minio  host</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc config host add minio 192.168.1.10：9000 minio password S3v4</span><br></pre></td></tr></table></figure><h3 id="配置下载策略"><a href="#配置下载策略" class="headerlink" title="配置下载策略"></a>配置下载策略</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将server端的base文件设置为开放管理，可以直接通url进行下载</span></span><br><span class="line">mc policy public minio/base</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;minio集群搭建&quot;&gt;&lt;a href=&quot;#minio集群搭建&quot; class=&quot;headerlink&quot; title=&quot;minio集群搭建&quot;&gt;&lt;/a&gt;minio集群搭建&lt;/h2&gt;
&lt;h3 id=&quot;配置key&quot;&gt;&lt;a href=&quot;#配置key&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="文件存储" scheme="https://www.kapyan.top/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="minio" scheme="https://www.kapyan.top/tags/minio/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（八）</title>
    <link href="https://www.kapyan.top/posts/812097678.html"/>
    <id>https://www.kapyan.top/posts/812097678.html</id>
    <published>2019-03-01T01:06:25.000Z</published>
    <updated>2019-03-01T02:07:12.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="终端读取"><a href="#终端读取" class="headerlink" title="终端读取"></a>终端读取</h2><h3 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h3><p>Go语言fmt包下有fmt.Scan、fmt.Scanf、fmt.Scanln三个函数，可以在程序运行过程过程中获取用户输入。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scan</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Scan从标准输入扫描文本，将成功读取的空白分隔的值保存进成功传递给本函数的参数。换行视为空白，返回成功扫描的条目个数和遇到的任何错误。如果读取的条目比提供的参数少，会返回一个错误报告原因  。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scanf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Scanf从标准输入扫描文本，根据format参数指定的格式将成功读取的空白分隔的值保存进成功传递给本函数的参数。返回成功扫描的条目个数和遇到的任何错误。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scanln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Scanln类似Scan，但会在换行时才停止扫描。最后一个条目后必须有换行或者到大结束位置。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  firstname, lastname  <span class="keyword">string</span></span><br><span class="line">fmt.Scan(&amp;firstname, &amp;lastname)</span><br><span class="line">fmt.Scanf(<span class="string">"%s , %s"</span>, &amp;firstname, &amp;lastname)</span><br><span class="line">fmt.Scanln(&amp;firstname, &amp;lastname)</span><br></pre></td></tr></table></figure></p><h3 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h3><h4 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h4><p>os包提供一些函数和变量。<br>变量os.Args是一个字符串slice。可以理解它是一个动态容量的顺序数组s,可以通过s[i]来访问单个元素，通过s[m：n]来访问一段连续子区间，数组长度用len(s)表示。<br>在Go语言中，所有的索引使用半开区间，即包含第一个索引，不包含最后一个索引。<br>os.Args的第一个元素是os.Args[0]，它是命令本身的名字；另外的元素是程序开始执行的参数。表达式s[m:n]表示一个从第m个到第n-1个元素的slice。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Println(<span class="string">"参数"</span>+strconv.Itoa(k)+<span class="string">":"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="flag包"><a href="#flag包" class="headerlink" title="flag包"></a>flag包</h4><p>Go提供了一个flag包，支持基本的命令行标志解析。flag包相比单纯的通过os.Args切片分析命令行参数，提供了更强的能力，同时也是复杂的用法。<br>命令行解析常用函数和方法：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>从os.Args[1:]中解析注册的flag。必须在所有flag都注册好而未访问其值时执行。未注册却使用flag -help时，会返回ErrHelp。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Int</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">int</span>, usage <span class="keyword">string</span>)</span> *<span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>Int用指定的名称、默认值、使用信息注册一个int类型flag。返回一个保存了该flag的值的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bool</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">bool</span>, usage <span class="keyword">string</span>)</span> *<span class="title">bool</span></span></span><br></pre></td></tr></table></figure></p><p>Bool用指定的名称、默认值、使用信息注册一个bool类型flag。返回一个保存了该flag的值的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">String</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">string</span>, usage <span class="keyword">string</span>)</span> *<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>String用指定的名称、默认值、使用信息注册一个string类型flag。返回一个保存了该flag的值的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Args</span><span class="params">()</span> []<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>返回解析之后剩下的非flag参数。（不包括命令名）<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FlagSet)</span> <span class="title">StringVar</span><span class="params">(p *<span class="keyword">string</span>, name <span class="keyword">string</span>, value <span class="keyword">string</span>, usage <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>StringVar用指定的名称、默认值、使用信息注册一个string类型flag，并将flag的值保存到p指向的变量。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = flag.Int(<span class="string">"i"</span>, <span class="number">0</span>, <span class="string">"int类型参数"</span>)</span><br><span class="line"><span class="keyword">var</span> b = flag.Bool(<span class="string">"b"</span>, <span class="literal">false</span>, <span class="string">"bool类型参数"</span>)</span><br><span class="line"><span class="keyword">var</span> s = flag.String(<span class="string">"s"</span>, <span class="string">""</span>, <span class="string">"string类型参数"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Println(<span class="string">"-i:"</span>, *i)</span><br><span class="line">fmt.Println(<span class="string">"-b:"</span>, *b)</span><br><span class="line">fmt.Println(<span class="string">"-s:"</span>, *s)</span><br><span class="line">fmt.Println(<span class="string">"其他参数："</span>, flag.Args())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译并运行，在窗口中输入：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build main.<span class="keyword">go</span> </span><br><span class="line">./main -i <span class="number">100</span> -b -s <span class="keyword">string</span> hi golang</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-i: <span class="number">100</span></span><br><span class="line">-b: <span class="literal">true</span></span><br><span class="line">-s: <span class="keyword">string</span></span><br><span class="line">其他参数： [hi golang]</span><br></pre></td></tr></table></figure></p><blockquote>  <p>上述代码在 flag.Prase() 之前，定义了 i、b、s 三个接受参数的变量， i、b、s 是指针类型的变量。flag.String()    方法返回的是保存日后解析出来的对应参数的值的位置，是一个已经分配好的空间，我们可以用这个指针变量来接受这个位置。<br>待程序重新进入main函数，执行flag.Parse()函数之后，这三个位置上就出现了我们命令行传入的参数（其实在程序初始化期就有默认值）。<br>后续我们可以使用    i、b、*s 来访问具体的内容。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;终端读取&quot;&gt;&lt;a href=&quot;#终端读取&quot; class=&quot;headerlink&quot; title=&quot;终端读取&quot;&gt;&lt;/a&gt;终端读取&lt;/h2&gt;
&lt;h3 id=&quot;标准输入&quot;&gt;&lt;a href=&quot;#标准输入&quot; class=&quot;headerlink&quot; title=&quot;标准输入&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（七）</title>
    <link href="https://www.kapyan.top/posts/3339487437.html"/>
    <id>https://www.kapyan.top/posts/3339487437.html</id>
    <published>2019-02-28T07:33:35.000Z</published>
    <updated>2019-02-28T09:36:38.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言反射"><a href="#Go语言反射" class="headerlink" title="Go语言反射"></a>Go语言反射</h2><h3 id="反射获取"><a href="#反射获取" class="headerlink" title="反射获取"></a>反射获取</h3><h4 id="反射介绍"><a href="#反射介绍" class="headerlink" title="反射介绍"></a>反射介绍</h4><p>反射可以在运行时动态获取变量的相关信息。Go语言中的reflect包实现了运行时反射，允许程序操作任意类型的对象。经典用法是静态类型interface{}保存一个值，通过调用TypeOF获取其动态类型信息，该函数返回一个Type类型值。调用ValueOf函数返回一个Value类型值，该值代表运行时的数据。Zero接受一个Type类型参数并返回一个代表该类型零值的Value类型值。<br>反射获取常用函数和方法：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure></p><p>TypeOf返回接口中保存的值的类型，TypeOf(nil)会返回nil。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValueOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>ValueOf返回一个初始化为i接口保管的具体值Value，ValueOf(nil)返回Value零值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Type)</span> <span class="title">ELem</span><span class="params">()</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure></p><p>返回map类型的键的类型。如非映射类型将panic<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Type)</span> <span class="title">Field</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">StructField</span></span></span><br></pre></td></tr></table></figure></p><p>返回索引序列指定的嵌套字段的类型，等价于用索引中的每个值链式调用本方法，如非结构体将会panic<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tag StructTag)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>Get方法返回标签字符串中键key对应的值。如果标签中没有该键，会返回””。如果标签不符合标准格式。Get的返回值是不确定的。</p><h4 id="反射获取应用"><a href="#反射获取应用" class="headerlink" title="反射获取应用"></a>反射获取应用</h4><ol>  <li>    <p>反射获取基本类型</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> o <span class="keyword">string</span> = <span class="string">"haha"</span></span><br><span class="line"><span class="comment">//返回值的类型</span></span><br><span class="line">t := reflect.TypeOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o type:"</span>, t)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回具体值的Value</span></span><br><span class="line">v := reflect.ValueOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o value:"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>反射获取结构体</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := Person&#123;<span class="string">"haha"</span>, <span class="number">18</span>&#125;</span><br><span class="line">t := reflect.TypeOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o type:"</span>, t)</span><br><span class="line">v := reflect.ValueOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o value:"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>获取结构体 Tag</p>  </li></ol><p>获取结构体元素单一Tag<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"u_name"`</span></span><br><span class="line">age  <span class="keyword">int</span>    <span class="string">`json:"u_age"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStructTag</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">t := reflect.TypeOf(i)</span><br><span class="line"></span><br><span class="line">tag := t.Elem().Field(<span class="number">0</span>).Tag.Get(<span class="string">"json"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Name Tag:%s\n"</span>, tag)</span><br><span class="line">tag = t.Elem().Field(<span class="number">1</span>).Tag.Get(<span class="string">"json"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Age Tag:%s\n"</span>, tag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := User &#123;<span class="string">"haha"</span>, <span class="number">18</span>&#125;</span><br><span class="line">getStructTag(&amp;a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取结构体元素多个Tag<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="keyword">string</span> <span class="string">`json:"user_name" xml:"UserName"`</span></span><br><span class="line">    &#125;</span><br><span class="line">    u := User&#123;</span><br><span class="line">        Name: <span class="string">"haha"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    f := reflect.TypeOf(u).Field(<span class="number">0</span>)</span><br><span class="line">    fmt.Println(f.Tag.Get(<span class="string">"json"</span>))</span><br><span class="line">    fmt.Println(f.Tag.Get(<span class="string">"xml"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>循环获取 结构体Tag<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span> <span class="string">`user name`</span></span><br><span class="line">Passwd <span class="keyword">string</span> <span class="string">`user password`</span></span><br><span class="line">&#125;</span><br><span class="line">u := &amp;User&#123;<span class="string">"haha"</span>, <span class="string">"haha123"</span>&#125;</span><br><span class="line">s := reflect.TypeOf(u).Elem()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.NumField(); i++ &#123;</span><br><span class="line">fmt.Println(s.Field(i).Tag)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="反射操作"><a href="#反射操作" class="headerlink" title="反射操作"></a>反射操作</h3><h4 id="反射操作常用函数和方法"><a href="#反射操作常用函数和方法" class="headerlink" title="反射操作常用函数和方法"></a>反射操作常用函数和方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Elem</span><span class="params">()</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure><p>Elem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface会Ptr或panic；如果v持有的值为nil，会返回Value零值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">SetInt</span><span class="params">(x <span class="keyword">int64</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>设置v的持有值。如果v的kind不是Int、Int8、Int16、Int32、Int64之一或者v.CanSet()返回假，会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Int</span><span class="params">()</span> <span class="title">int64</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有的有符号整数（表示为int64），如果v的Kind不是Int、Int8、Int16、Int32、Int64会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Kind</span><span class="params">()</span> <span class="title">Kind</span></span></span><br></pre></td></tr></table></figure></p><p>Kind返回v持有的值的分类，如果v是Value零值，返回值为Invalid。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">NumField</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有的结构体类型值的字段数，如果v的Kind不是Struct会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Field</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>返回结构体的第i个字段（的Value封装）。如果v的Kind不是Struct或i出界会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">SetString</span><span class="params">(x <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>设置v的持有值。如果v的Kind不是String或者v.CanSet()返回假，会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">NumMethod</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有值的方法集的方法数目。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">MethodByName</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>返回v的名为name的方法的已绑定（到v的持有值的）状态的函数形式的Value封装。返回值调用Call方法时不应包含接收者；返回值持有的函数总是使用v的持有者作为接收者（即第一个参数）。如果未找到该方法，会返回一个Value零值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Call</span><span class="params">(in []Value)</span> []<span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>Call方法使用输入的参数in调用v持有的函数。例如，如果len(in) == 3，v.Call(in)代表调用v(in[0], in[1],  in[2])（其中Value值表示其持有值）。如果v的Kind不是Func会panic。它返回函数所有输出结果的Value封装的切片。和go代码一样，每一个输入实参的持有值都必须可以直接赋值给函数对应输入参数的类型。如果v持有值是可变参数函数，Call方法会自行创建一个代表可变参数的切片，将对应可变参数的值都拷贝到里面。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有的值的类型的Type表示。</p><h4 id="反射操作应用"><a href="#反射操作应用" class="headerlink" title="反射操作应用"></a>反射操作应用</h4><ol>  <li>    <p>通过反射操作基本类型，来改变基本类型的值。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    val := reflect.ValueOf(&amp;a)</span><br><span class="line">    val.Elem().SetInt(<span class="number">200</span>)</span><br><span class="line">    b := val.Elem().Int()</span><br><span class="line">    fmt.Printf(<span class="string">"a =&gt; %d , b =&gt; %d\n"</span>, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>反射操作结构体及调用结构体方法。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Course <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s School)</span> <span class="title">Echo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"name : %s , Course : %s \n"</span>, s.Name, s.Course)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := School&#123;</span><br><span class="line">Name:   <span class="string">"haha"</span>,</span><br><span class="line">Course: <span class="string">"Linux"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val := reflect.ValueOf(&amp;o)</span><br><span class="line">kd := val.Kind()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> kd != reflect.Ptr &amp;&amp; val.Elem().Kind() == reflect.Struct &#123;</span><br><span class="line">fmt.Println(<span class="string">"expect struct"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取字段数量</span></span><br><span class="line">fields := val.Elem().NumField()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d field\n"</span>, fields)</span><br><span class="line"><span class="comment">//获取字段的类型</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; fields; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d %v\n"</span>, i, val.Elem().Field(i).Kind())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 操作结构体</span></span><br><span class="line">val.Elem().Field(<span class="number">1</span>).SetString(<span class="string">"Golang"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取方法数量</span></span><br><span class="line">methods := val.NumMethod()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d methods\n"</span>, methods)</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射调用的Echo方法</span></span><br><span class="line"><span class="keyword">var</span> params []reflect.Value</span><br><span class="line">val.Elem().Method(<span class="number">0</span>).Call(params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h4 id="反射综合应用"><a href="#反射综合应用" class="headerlink" title="反射综合应用"></a>反射综合应用</h4><ol>  <li>定义一个结构体</li>  <li>给结构体赋值</li>  <li>用反射获取结构体的下标、结构体名称、类型、值</li>  <li>改变结构体值    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u := Student&#123;<span class="string">"haha"</span>, <span class="number">18</span>&#125;</span><br><span class="line">v := reflect.ValueOf(&amp;u).Elem()</span><br><span class="line">t := v.Type()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v.NumField(); i++ &#123;</span><br><span class="line">f := v.Field(i)</span><br><span class="line">fmt.Printf(<span class="string">"构体的下标: %d: 名称: %s 类型: %s 值: %v\n"</span>, i,</span><br><span class="line">t.Field(i).Name, f.Type(), f.Interface())</span><br><span class="line">&#125;</span><br><span class="line">v.Field(<span class="number">0</span>).SetString(<span class="string">"哈哈"</span>)</span><br><span class="line">v.Field(<span class="number">1</span>).SetInt(<span class="number">100</span>)</span><br><span class="line">fmt.Println(<span class="string">"u is now"</span>, u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h2 id="Go语言数据格式"><a href="#Go语言数据格式" class="headerlink" title="Go语言数据格式"></a>Go语言数据格式</h2><h3 id="json格式"><a href="#json格式" class="headerlink" title="json格式"></a>json格式</h3><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript  (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON  成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<br>Go语言对json的解析函数在encoding/json包里面，主要是编码和解码两个函数。</p><h4 id="Marshal函数"><a href="#Marshal函数" class="headerlink" title="Marshal函数"></a>Marshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>,error)</span></span></span><br></pre></td></tr></table></figure><p>Marshal函数返回v的json编码。<br>Marshal函数会递归的处理值。如果一个值实现了Marshaler接口切非nil指针，会调用其MarshalJSON方法来生成json编码。nil指针异常并不是严格必需的，但会模拟与UnmarshalJSON的行为类似的必需的异常。<br>否则，Marshal函数使用下面的基于类型的默认编码格式：</p><ul>  <li>布尔类型编码为json布尔类型。</li>  <li>浮点数、整数和Number类型的值编码为json数字类型。</li>  <li>字符串编码为json字符串。角括号”&lt;”和”&gt;”会转义为”\u003c”和”\u003e”以避免某些浏览器吧json输出错误理解为HTML。基于同样的原因，”&amp;”转义为”\u0026”。</li>  <li>数组和切片类型的值编码为json数组，但[]byte编码为base64编码字符串，nil切片编码为null。</li>  <li>结构体的值编码为json对象。每一个导出字段变成该对象的一个成员。除非字段的标签是“-” ，或字段是空值而其标签指定了omitempty选项。</li>  <li>空值是false、0、””、nil指针、nil接口、长度为0的数组、切片、映射。</li></ul><p>对象默认键字符串是结构体的字段名，但可以在结构体字段的标签里指定。结构体标签值里的”json”键为键名，后跟可选的逗号和选项。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字段被本包忽略</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:"-"`</span></span><br><span class="line"><span class="comment">// 字段在json里的键为"myName"</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:"myName"`</span></span><br><span class="line"><span class="comment">// 字段在json里的键为"myName"且如果字段为空值将在对象中省略掉</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:"myName,omitempty"`</span></span><br><span class="line"><span class="comment">// 字段在json里的键为"Field"（默认值），但如果字段为空值会跳过；注意前导的逗号</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:",omitempty"`</span></span><br></pre></td></tr></table></figure></p><p>“string”选项标记一个字段在编码json时应编码为字符串。它只适用于字符串、浮点数、整数类型的字段。这个额外水平的编码选项有时候会用于和javascript程序交互：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Int64String <span class="keyword">int64</span> <span class="string">`json:",string"`</span></span><br></pre></td></tr></table></figure></p><p>如果键名是只含有unicode字符、数字、美元符号、百分号、连字符、下划线和斜杠的非空字符串，将使用它代替字段名。</p><p>匿名的结构体字段一般序列化为他们内部的导出字段就好像位于外层结构体中一样。如果一个匿名结构体字段的标签给其提供了键名，则会使用键名代替字段名，而不视为匿名。</p><p>Go结构体字段的可视性规则用于供json决定那个字段应该序列化或反序列化时是经过修正了的。如果同一层次有多个（匿名）字段且该层次是最小嵌套的（嵌套层次则使用默认go规则），会应用如下额外规则：</p><ol>  <li>json标签为”-“的匿名字段强行忽略，不作考虑；</li>  <li>json标签提供了键名的匿名字段，视为非匿名字段；</li>  <li>其余字段中如果只有一个匿名字段，则使用该字段；</li>  <li>其余字段中如果有多个匿名字段，但压平后不会出现冲突，所有匿名字段压平；</li>  <li>其余字段中如果有多个匿名字段，但压平后出现冲突，全部忽略，不产生错误。</li></ol><p>对匿名结构体字段的管理是从go1.1开始的，在之前的版本，匿名字段会直接忽略掉。<br>映射类型的值编码为json对象。映射的键必须是字符串，对象的键直接使用映射的键。<br>指针类型的值编码为其指向的值（的json编码）。nil指针编码为null。<br>接口类型的值编码为接口内保持的具体类型的值（的json编码）。nil接口编码为null。<br>通道、复数、函数类型的值不能编码进json。尝试编码它们会导致Marshal函数返回UnsupportedTypeError。</p><p>Json不能表示循环的数据结构，将一个循环的结构提供给Marshal函数会导致无休止的循环。</p><h4 id="Unmarshal函数"><a href="#Unmarshal函数" class="headerlink" title="Unmarshal函数"></a>Unmarshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unamrshal</span><span class="params">(data []<span class="keyword">byte</span>,v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>Unmarshal函数解析json编码的数据并将结果存入v指向的值。<br>Unmarshal和Marshal做相反的操作，必要时申请映射、切片或指针，有如下的附加规则：<br>要将json数据解码写入一个指针，Unmarshal函数首先处理json数据是json字面值null的情况。此时，函数将指针设为nil；否则，函数将json数据解码写入指针指向的值；如果指针本身是nil，函数会先申请一个值并使指针指向它。<br>要将json数据解码写入一个结构体，函数会匹配输入对象的键和Marshal使用的键（结构体字段名或者它的标签指定的键名），优先选择精确的匹配，但也接受大小写不敏感的匹配。<br>要将json数据解码写入一个接口类型值，函数会将数据解码为如下类型写入接口：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Bool                   对应JSON布尔类型</span><br><span class="line"><span class="keyword">float64</span>                对应JSON数字类型</span><br><span class="line"><span class="keyword">string</span>                 对应JSON字符串类型</span><br><span class="line">[]<span class="keyword">interface</span>&#123;&#125;          对应JSON数组</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; 对应JSON对象</span><br><span class="line"><span class="literal">nil</span>                    对应JSON的null</span><br></pre></td></tr></table></figure></p><p>如果一个JSON值不匹配给出的目标类型，或者如果一个json数字写入目标类型时溢出，Unmarshal函数会跳过该字段并尽量完成其余的解码操作。如果没有出现更加严重的错误，本函数会返回一个描述第一个此类错误的详细信息的UnmarshalTypeError。<br>JSON的null值解码为go的接口、指针、切片时会将它们设为nil，因为null在json里一般表示“不存在”。解码json的null值到其他go类型时，不会造成任何改变，也不会产生错误。<br>当解码字符串时，不合法的utf-8或utf-16代理（字符）对不视为错误，而是将非法字符替换为unicode字符U+FFFD。</p><h4 id="值类型json转换"><a href="#值类型json转换" class="headerlink" title="值类型json转换"></a>值类型json转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// int 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonInt</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="number">100</span></span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">int</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"int 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonString</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="string">"haha"</span></span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">string</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"string 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonArray</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Golang"</span>&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply [<span class="number">2</span>]<span class="keyword">string</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"array 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">JsonInt()</span><br><span class="line">JsonString()</span><br><span class="line">JsonArray()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针类型json转换"><a href="#指针类型json转换" class="headerlink" title="指针类型json转换"></a>指针类型json转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = []<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Golang"</span>, <span class="string">"Java"</span>, <span class="string">"DBA"</span>&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply []<span class="keyword">string</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"slice 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonMap</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"haha"</span>, <span class="number">2</span>: <span class="string">"Linux"</span>, <span class="number">3</span>: <span class="string">"Python"</span>, <span class="number">4</span>: <span class="string">"Golang"</span>, <span class="number">5</span>: <span class="string">"Java"</span>, <span class="number">6</span>: <span class="string">"DBA"</span>&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, <span class="number">6</span>)</span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"map 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">JsonSlice()</span><br><span class="line">JsonMap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构体json转换"><a href="#结构体json转换" class="headerlink" title="结构体json转换"></a>结构体json转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">Age     <span class="keyword">int</span>    <span class="string">`json:"-"`</span></span><br><span class="line">Courses []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = School&#123;</span><br><span class="line">Name:    <span class="string">"haha"</span>,</span><br><span class="line">Age:     <span class="number">100</span>,</span><br><span class="line">Courses: []<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Golang"</span>, <span class="string">"Java"</span>, <span class="string">"DBA"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply School</span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"struct 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">JsonStruct()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>  <p>School 类型<br>Name字段：JSON序列化、反序列化的时候，使用 name，而不是 Name。<br>Age字段：json:”-“    JSON序列化、反序列化的时候忽略该字段。默认情况下会解析这个字段，因为它是大写字母开头的。<br>Courses字段：因为它是大写字母开头的，JSON序列化、反序列化的时候默认解析这个字段。</p></blockquote><h3 id="xml格式"><a href="#xml格式" class="headerlink" title="xml格式"></a>xml格式</h3><p>XML是可扩展标记语言（标准通用标记语言的子集）是一种简单的数据存储语言。<br>使用一系列简单的标记描述数据，而这些标记可以用方便的方式建立，虽然可扩展标记语言占用的空间比二进制数据要占用更多的空间，但可扩展标记语言极其简单易于掌握和使用。<br>Go语言中提供了处理XML的标准库  encoding/xml 包，该包实现了一个简单的XML 1.0 解析器（支持XML命名空间）。</p><h4 id="Marshal函数-1"><a href="#Marshal函数-1" class="headerlink" title="Marshal函数"></a>Marshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>Marshal函数返回v的XML编码。<br>Marshal处理数组或者切片时会序列化每一个元素。Marshal处理指针时，会序列化其指向的值；如果指针为nil，则啥也不输出。Marshal处理接口时，会序列化其内包含的具体类型值，如果接口值为nil，也是不输出。Marshal处理其余类型数据时，会输出一或多个包含数据的XML元素。<br>XML元素的名字按如下优先顺序获取：</p><ol>  <li>如果数据是结构体，其XMLName字段的标签</li>  <li>类型为xml.Name的XMLName字段的值</li>  <li>数据是某结构体的字段，其标签</li>  <li>数据是某结构体的字段，其字段名</li>  <li>被序列化的类型的名字</li></ol><p>一个结构体的XML元素包含该结构体所有导出字段序列化后的元素，有如下例外：</p><ol>  <li>XMLName字段，如上所述，会省略</li>  <li>具有标签”-“的字段会省略</li>  <li>具有标签”name,attr”的字段会成为该XML元素的名为name的属性</li>  <li>具有标签”,attr”的字段会成为该XML元素的名为字段名的属性</li>  <li>具有标签”,chardata”的字段会作为字符数据写入，而非XML元素</li>  <li>具有标签”,innerxml”的字段会原样写入，而不会经过正常的序列化过程</li>  <li>具有标签”,comment”的字段作为XML注释写入，而不经过正常的序列化过程，该字段内不能有”–”字符串</li>  <li>标签中包含”omitempty”选项的字段如果为空值会省略<br>空值为false、0、nil指针、nil接口、长度为0的数组、切片、映射</li>  <li>匿名字段（其标签无效）会被处理为其字段是外层结构体的字段</li></ol><p>如果一个字段的标签为”a&gt;b&gt;c”，则元素c将会嵌套进其上层元素a和b中。如果该字段相邻的字段标签指定了同样的上层元素，则会放在同一个XML元素里。</p><h4 id="Unmarshal函数-1"><a href="#Unmarshal函数-1" class="headerlink" title="Unmarshal函数"></a>Unmarshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>Unmarshal解析XML编码的数据并将结果存入v指向的值。v只能指向结构体、切片或者和字符串。良好格式化的数据如果不能存入v，会被丢弃。<br>因为Unmarshal使用reflect包，它只能填写导出字段。本函数好似用大小写敏感的比较来匹配XML元素名和结构体的字段名/标签键名。<br>Unmarshal函数使用如下规则将XML元素映射到结构体字段上。这些规则中，字段标签指的是结构体字段的标签键’xml’对应的值：</p><ol>  <li>如果结构体字段的类型为字符串或者[]byte，且标签为”,innerxml”，Unmarshal函数直接将对应原始XML文本写入该字段，其余规则仍适用。</li>  <li>如果结构体字段类型为xml.Name且名为XMLName，Unmarshal会将元素名写入该字段</li>  <li>如果字段XMLName的标签的格式为”name”或”namespace-URL    name”，XML元素必须有给定的名字（以及可选的名字空间），否则Unmarshal会返回错误。</li>  <li>如果XML元素的属性的名字匹配某个标签”,attr”为字段的字段名，或者匹配某个标签为”name,attr”的字段的标签名，Unmarshal会将该属性的值写入该字段。</li>  <li>如果XML元素包含字符数据，该数据会存入结构体中第一个具有标签”,chardata”的字段中，该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</li>  <li>如果XML元素包含注释，该数据会存入结构体中第一个具有标签”,comment”的字段中，该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</li>  <li>如果XML元素包含一个子元素，其名称匹配格式为”a”或”a&gt;b&gt;c”的标签的前缀，反序列化会深入XML结构中寻找具有指定名称的元素，并将最后端的元素映射到该标签所在的结构体字段。以”&gt;”开始的标签等价于以字段名开始并紧跟着”&gt;”    的标签。</li>  <li>如果XML元素包含一个子元素，其名称匹配某个结构体类型字段的XMLName字段的标签名，且该结构体字段本身没有显式指定标签名，Unmarshal会将该元素映射到该字段。</li>  <li>如果XML元素的包含一个子元素，其名称匹配够格结构体字段的字段名，且该字段没有任何模式选项（”,attr”、”,chardata”等），Unmarshal会将该元素映射到该字段。</li>  <li>如果XML元素包含的某个子元素不匹配以上任一条，而存在某个字段其标签为”,any”，Unmarshal会将该元素映射到该字段。</li>  <li>匿名字段被处理为其字段好像位于外层结构体中一样。</li>  <li>标签为”-“的结构体字段永不会被反序列化填写。</li></ol><p>Unmarshal函数将XML元素写入string或[]byte时，会将该元素的字符数据串联起来作为值，目标[]byte不能是nil。<br>Unmarshal函数将属性写入string或[]byte时，会将属性的值以字符串/切片形式写入。<br>Unmarshal函数将XML元素写入切片时，会将切片扩展并将XML元素的子元素映射入新建的值里。<br>Unmarshal函数将XML元素/属性写入bool值时，会将对应的字符串转化为布尔值。<br>Unmarshal函数将XML元素/属性写入整数或浮点数类型时，会将对应的字符串解释为十进制数字。不会检查溢出。<br>Unmarshal函数将XML元素写入xml.Name类型时，会记录元素的名称。<br>Unmarshal函数将XML元素写入指针时，会申请一个新值并将XML元素映射入该值。</p><h4 id="xml转换应用"><a href="#xml转换应用" class="headerlink" title="xml转换应用"></a>xml转换应用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/xml"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`xml:"name"`</span></span><br><span class="line">Age     <span class="keyword">int</span>    <span class="string">`xml:"-"`</span></span><br><span class="line">Courses []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">XmlStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = School&#123;</span><br><span class="line">Name:    <span class="string">"haha"</span>,</span><br><span class="line">Age:     <span class="number">100</span>,</span><br><span class="line">Courses: []<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Golang"</span>, <span class="string">"Java"</span>, <span class="string">"DBA"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">data, err := xml.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"xml.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply School</span><br><span class="line">err = xml.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"struct 类型\nXML序列化 string(data) =&gt; %s\nXML反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">XmlStruct()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言反射&quot;&gt;&lt;a href=&quot;#Go语言反射&quot; class=&quot;headerlink&quot; title=&quot;Go语言反射&quot;&gt;&lt;/a&gt;Go语言反射&lt;/h2&gt;
&lt;h3 id=&quot;反射获取&quot;&gt;&lt;a href=&quot;#反射获取&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（六）</title>
    <link href="https://www.kapyan.top/posts/353173330.html"/>
    <id>https://www.kapyan.top/posts/353173330.html</id>
    <published>2019-02-27T08:25:34.000Z</published>
    <updated>2019-02-28T06:53:33.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言接口"><a href="#Go语言接口" class="headerlink" title="Go语言接口"></a>Go语言接口</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>Go语言中的接口很特别，而且提供了难以置信的一系列灵活性或抽象性。它们指定一个特定类型的值和指针表现为特定的方式。从语言角度看，接口是一种类型，它指定一个方法集，所有方法为接口类型就被认为是该接口。<br>interface是一种类型，默认是一个指针。interface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个空接口，空接口interface&#123;&#125;没有任何方法签名，也就意味着任何类型都实现了空接口。</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口，并赋值</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">interface</span>&#123;&#125; = <span class="string">"haha"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用interface定义一组方法，方法签名的集合</span></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">method1()<span class="comment">//无参数、无返回值</span></span><br><span class="line">method2(i <span class="keyword">int</span>)<span class="comment">//单参数、无返回值</span></span><br><span class="line">method3(x,y <span class="keyword">int</span>) <span class="comment">//多参数、无返回值</span></span><br><span class="line">method4() (i <span class="keyword">int</span>)<span class="comment">// 无参数、单返回值</span></span><br><span class="line">method5(x, y <span class="keyword">int</span>) (z <span class="keyword">int</span>, err error) <span class="comment">//多参数、多返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>Go语言类型断言语法为 value,ok := em.(T)如果确保em是同类型的时候可以直接使用value,ok :=  em.(T)，一般用于switch语句中。</p><blockquote>  <p>em：代表要判断的变量<br>T：代表被判断的类型<br>value：代表返回值<br>ok：代表是否为该类型<font color="red" size="2"><br>注意：要判断的变量必须为interface类型才可以进行类型断言。</font>  </p></blockquote><p>用switch做批量类型判断，不支持fallthrough。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d, %s"</span>, self.id, self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = &amp;User&#123;<span class="number">18</span>, <span class="string">"haha"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">        fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line">    <span class="keyword">case</span> fmt.Stringer:</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span>:</span></span><br><span class="line"><span class="function">        <span class="title">fmt</span>.<span class="title">Println</span><span class="params">(v()</span>)</span></span><br><span class="line"><span class="function">    <span class="title">case</span> *<span class="title">User</span>:</span></span><br><span class="line">        fmt.Printf("%d, %s\n", v.id, v.name)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口规则"><a href="#接口规则" class="headerlink" title="接口规则"></a>接口规则</h3><p>接口是一个或多个方法签名的集合。任何类型的方法集中只要拥有该接口对应的全部方法签名。就表示它“实现”了该接口，无须在该类型上显式声明实现了哪个接口。对应方法，是指有相同名称、参数列表（不包括参数名）以及返回值，该类型也可以有其他方法。</p><h4 id="接口赋值"><a href="#接口赋值" class="headerlink" title="接口赋值"></a>接口赋值</h4><p>对象赋值给接口时，会发生拷贝，而接口内部存储的是指向这个复制品的指针，既无法修改复制品的状态，也无法获取指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    u := User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = u</span><br><span class="line"></span><br><span class="line">    u.id =<span class="number">20</span> </span><br><span class="line">    u.name = <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"u : %v\n"</span>,u)</span><br><span class="line">    fmt.Printf(<span class="string">"i.(User) : %v\n"</span>,i.(User))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接口转型返回临时对象，只有使用指针才能修改其状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> vi,pi <span class="keyword">interface</span>&#123;&#125; = u,&amp;u</span><br><span class="line"></span><br><span class="line">    <span class="comment">//vi.(User).name = "Golang"</span></span><br><span class="line">    pi.(*User).name = <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"vi.(User) : %v\n"</span>,vi.(User))</span><br><span class="line">    fmt.Printf(<span class="string">"pi.(*User) : %v\n"</span>,pi.(*User))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><p>只有当接口存储的类型和对象都为nil时，接口才等于nil。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    fmt.Printf(<span class="string">"i =&gt; %v\n"</span>,i)</span><br><span class="line">    fmt.Printf(<span class="string">"(i == nil) =&gt; %v\n"</span>,i == <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p *<span class="keyword">int</span> =<span class="literal">nil</span></span><br><span class="line">    <span class="comment">//i指向p，指向的对象是个nil，但是存在类型不是nil，是个指针</span></span><br><span class="line">    i = p</span><br><span class="line">    fmt.Printf(<span class="string">"i =&gt; %v\n"</span>,i)</span><br><span class="line">    fmt.Printf(<span class="string">"(i == nil =&gt; %v\n)"</span>,i == <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><p>接口只有方法声明，没有数据字段，没有实现，也不要显示的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现了这个接口。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetAge() <span class="keyword">int</span></span><br><span class="line">    GetName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user Info = User&#123;<span class="string">"haha"</span>,<span class="number">18</span>&#125;</span><br><span class="line">    age := user.GetAge()</span><br><span class="line">    name := user.GetName()</span><br><span class="line">    fmt.Println(age,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口。<br>如果一个变量只含有了一个interface的部分方法，那么这个变量就没有实现这个接口。</p><h3 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h3><h4 id="接口嵌套"><a href="#接口嵌套" class="headerlink" title="接口嵌套"></a>接口嵌套</h4><p>接口可以匿名嵌入其他接口，或嵌入到结构中。如果一个interface1作为interface2的一个嵌入字段，那么interface2隐式的包含了interface1里面的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">interface</span> &#123;</span><br><span class="line">    Age</span><br><span class="line">    Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Age <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetAge() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Name <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">   age <span class="keyword">int</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    user := User&#123;<span class="string">"haha"</span>,<span class="number">18</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> u Info</span><br><span class="line">    u = user</span><br><span class="line">    age := u.GetAge()</span><br><span class="line">    name := u.GetName()</span><br><span class="line">    fmt.Println(age,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名接口可用作变量类型，或结构成员。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">struct</span> &#123;</span><br><span class="line">    u <span class="keyword">interface</span> &#123;</span><br><span class="line">        GetUser() <span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span> </span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">GetUser</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"user %d,%ds"</span>,self.id,self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := Info&#123;&amp;User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">    fmt.Println(t.u.GetUser())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口检查"><a href="#接口检查" class="headerlink" title="接口检查"></a>接口检查</h4><p>超集接口对象可转换为子集接口，反之出错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">    Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span> </span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d,%v"</span>,self.id, self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(self.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> o Printer = &amp;User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s Stringer = o</span><br><span class="line">    fmt.Println(s.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口技巧"><a href="#接口技巧" class="headerlink" title="接口技巧"></a>接口技巧</h4><p>让编译器检查，以确保某个类型实现接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Data)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123; </span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d,%s"</span>,self.id,self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _ fmt.Stringer = (*Data)(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某些时候，让函数直接“实现”接口能省不少事。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">type</span> Tester <span class="keyword">interface</span> &#123;</span><br><span class="line">    Do()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FuncDo <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(self FuncDo)</span> <span class="title">Do</span><span class="params">()</span></span> &#123;self() &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t Tester = FuncDo(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="built_in">println</span>(<span class="string">"Hello,world"</span>)&#125;)</span><br><span class="line">    t.Do()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="并发介绍"><a href="#并发介绍" class="headerlink" title="并发介绍"></a>并发介绍</h3><p>Golang从语言层面就对并发提供了支持，而goroutine是Go语言并发设计的核心。<br>Go语言的并发机制运用起来非常舒适，在启动并发的方式上直接添加了语言级的关键字就可以实现，和其他编程语言相比更加轻量。</p><h4 id="进程-amp-线程"><a href="#进程-amp-线程" class="headerlink" title="进程&amp;线程"></a>进程&amp;线程</h4><ol>  <li>进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。</li>  <li>线程是进程的一个执行实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</li>  <li>一个进程可以创建和撤销多个线程，同一个进程中的多个线程之间可以并发执行。</li></ol><h4 id="并发-amp-并行"><a href="#并发-amp-并行" class="headerlink" title="并发&amp;并行"></a>并发&amp;并行</h4><ol>  <li>多线程程序在一个核的cpu上运行，就是并发。</li>  <li>多线程程序在多个核的cpu上运行，就是并行。</li></ol><blockquote>  <p>并发不是并行：<br>并发主要由切换时间片来实现“同时”运行，并行则是直接利用多核实现多线程的运行，Go程序可以设置使用核数，以发挥多核计算机的能力。</p></blockquote><h4 id="协程-amp-线程"><a href="#协程-amp-线程" class="headerlink" title="协程&amp;线程"></a>协程&amp;线程</h4><p>协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。<br>线程：一个线程上可以跑多个协程，协程是轻量级的线程。</p><h4 id="Goroutine介绍"><a href="#Goroutine介绍" class="headerlink" title="Goroutine介绍"></a>Goroutine介绍</h4><p>goroutine只是由官方实现的超级“线程池”。每个实例4~5KB的栈内存占用和由于实现机制而大幅减少的创建和销毁开销是Go语言高并发的根本原因。<br>goroutine奉行通过通信来共享内存，而不是共享内存来通信。只需在函数调用语句前添加go关键字，就可创建并发执行单元。开发人员无需了解任何执行细节，调度器会自动将其安排到合适的系统线程上执行。goroutine是一种非常轻量级的实现，可在单个进程里执行成千上万的并发任务。<br>事实上，入口函数main就以goroutine运行。另有与之配套的channel类型，用以实现“以通讯来共享内存”的CSP模式。</p><h4 id="编写第一个Goroutine"><a href="#编写第一个Goroutine" class="headerlink" title="编写第一个Goroutine"></a>编写第一个Goroutine</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (<span class="string">"fmt"</span></span><br><span class="line">        <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">"hello world"</span>) </span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>  <p>进入main函数开启一个goroutine运行匿名函数体内容，主线程执行等待1秒。goroutine执行完毕回到主线程，主线程的sleep完成结束程序。（注意：若去掉time.Sleep(1    * time.Second)代码，进入main函数开启一个goroutine，没等goroutine运行匿名函数函数体内容，主线程已经完成结束程序）</p></blockquote><h3 id="Chan应用"><a href="#Chan应用" class="headerlink" title="Chan应用"></a>Chan应用</h3><p>channel是CSP模式的具体实现，用于多个goroutine通讯。其内部实现了同步，确保并发安全。<br>channel是先进先出，线程安全的，多个goroutine同时访问，不需要加锁。</p><h4 id="chan阻塞"><a href="#chan阻塞" class="headerlink" title="chan阻塞"></a>chan阻塞</h4><p>我们定义的管道intChan容量是5，开启goroutine写入10条数据，在写满5条数据时会阻塞，而read()每秒会从intChan中读取一条，然后write()再会写一条数据。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">        fmt.Println(<span class="string">"write data :"</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        i := &lt;-ch</span><br><span class="line">        fmt.Println(<span class="string">"read data:"</span>,i)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">go</span> write(intChan)</span><br><span class="line">    <span class="keyword">go</span> read(intChan)</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h4><p>默认为同步，需要发送和接收配对，否则会被阻塞，直到另一方准备好后被唤醒。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">//数据交换队列</span></span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)     <span class="comment">//退出通知</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> d := <span class="keyword">range</span> data &#123; <span class="comment">//从队列迭代接收数据，直到close</span></span><br><span class="line">            fmt.Println(d)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="string">"received over."</span>)</span><br><span class="line">        exit &lt;- <span class="literal">true</span>    <span class="comment">//发出退出通知</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    data &lt;- <span class="string">"haha"</span></span><br><span class="line">    data &lt;- <span class="string">"linux"</span></span><br><span class="line">    data &lt;- <span class="string">"golang"</span></span><br><span class="line">    data &lt;- <span class="string">"python"</span></span><br><span class="line">    <span class="built_in">close</span>(data) <span class="comment">//关闭队列</span></span><br><span class="line">    fmt.Println(<span class="string">"send over."</span>)</span><br><span class="line">    &lt;-exit <span class="comment">//等待退出通知</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h4><p>异步方式通过判断缓冲区来决定是否阻塞。如果缓冲区已满，发送被阻塞；缓冲区为空，接收被阻塞。<br>通常情况下，异步channel可减少排队阻塞，具备更高的效率。但应该考虑使用指针规避大对象拷贝，将多个元素打包，减少缓冲区大小。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>) <span class="comment">// 缓冲区可以存储 3 个元素</span></span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    data &lt;- <span class="string">"haha"</span> <span class="comment">// 在缓冲区未满前，不会阻塞。</span></span><br><span class="line">    data &lt;- <span class="string">"Linux"</span></span><br><span class="line">    data &lt;- <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> d := <span class="keyword">range</span> data &#123; <span class="comment">// 在缓冲区未空前，不会阻塞。</span></span><br><span class="line">            fmt.Println(d)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        exit &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    data &lt;- <span class="string">"Java"</span> <span class="comment">// 如果缓冲区已满，阻塞。</span></span><br><span class="line">    data &lt;- <span class="string">"DBA"</span></span><br><span class="line">    <span class="built_in">close</span>(data)</span><br><span class="line"></span><br><span class="line">    &lt;-exit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="chan选择"><a href="#chan选择" class="headerlink" title="chan选择"></a>chan选择</h4><p>如果需要同时处理多个channel，可使用select语句。它随机选择一个可用channel做收发操作，或执行default case。<br>用select实现超时控制<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">2</span>)</span><br><span class="line">    strChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> vi := &lt;-intChan:</span><br><span class="line">                fmt.Println(vi)</span><br><span class="line">            <span class="keyword">case</span> vs := &lt;-strChan:</span><br><span class="line">                fmt.Println(vs)</span><br><span class="line">            <span class="keyword">case</span> &lt;- time.After(time.Second * <span class="number">3</span>):</span><br><span class="line">                fmt.Println(<span class="string">"timeout."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        exit &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// intChan &lt;- 100 //注释掉，引发timeout</span></span><br><span class="line">    <span class="comment">// strChan &lt;-  "haha"</span></span><br><span class="line">    &lt;-exit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意：在循环中使用select default case需要小心，避免形成洪水。</font><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>用简单工厂模式打包并发任务和channel<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTest</span><span class="params">()</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        c &lt;- rand.Int()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := NewTest()</span><br><span class="line">    fmt.Println(&lt;-t) <span class="comment">// 等待 goroutine 结束返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><p>WaitGroup能够一直等到所有的goroutine执行完成，并且阻塞主线程的执行，直到所有的goroutine执行完成。<br>WaitGroup总共有三个方法：Add(delta  int),Done(),Wait()。</p><blockquote>  <p>Add：添加或减少等待goroutine的数量；<br>Done：相当于Add(-1);<br>Wait:执行阻塞，直到所有的WaitGroup数量变成0。</p></blockquote><p>WaitGroup用于线程同步，WaitGroup等待一组线程集合完成，才会继续向下执行。主线程（goroutine）调用Add来设置等待的线程（goroutine）数量。然后每个线程（goroutine）运行，并在完成后调用Done。同时，Wait用来阻塞，直到所有线程（goroutine）完成才会向下执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">//defer wg.Done()</span></span><br><span class="line">            <span class="keyword">defer</span> wg.Add(<span class="number">-1</span>)</span><br><span class="line">            EchoNum(n)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EchoNum</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序中将每次循环的数量 sleep 1  秒钟后输出。如果程序不使用WaitGroup，将不会输出结果。因为goroutine还没执行完，主线程已经执行完毕（注掉的 defer wg.Done()  和 defer wg.Add(-1) 作用一样）。</p><h4 id="WaitGroup陷阱"><a href="#WaitGroup陷阱" class="headerlink" title="WaitGroup陷阱"></a>WaitGroup陷阱</h4><ol>  <li>add数量小于done数量导致WaitGroup为负数</li>  <li>add数量大于done数量造成deadlock</li>  <li>跳过add和done操作，直接执行wait</li>  <li>WaitGroup拷贝传值问题</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg sync.WaitGroup, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"i=&gt;%d\n"</span>, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(wg, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行错误：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure></p><p>wg 给拷贝传递到了 goroutine 中，导致只有 Add 操作，其实 Done操作是在 wg 的副本执行的，因此 Wait 就死锁了。<br>正确代码：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    <span class="comment">// wg := &amp;sync.WaitGroup&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg *sync.WaitGroup, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"i=&gt;%d\n"</span>, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(wg, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>runtime包提供Go语言运行时的系统交互操作，例如控制goroutine的功能。<br>调度器不能保证多个goroutine执行次序，且进程退出时不会等待他们结束。<br>默认情况下，进程启动后仅允许一个系统线程服务于goroutine。可使用环境变量或标准库函数runtime.GOMAXPROCS修改，让调度器用于多个线程实现多核并行，而不仅仅是并发。<br>runtime包常用方法<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> GOOS <span class="keyword">string</span> = theGoos</span><br></pre></td></tr></table></figure></p><p>GOOS是可执行程序的目标操作系统（将要在该操作系统的机器上执行）：darwin、freebsd、linux等。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Gosched</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>Gosched使当前goroutine放弃处理器，以让其他goroutine运行。它不会挂起当前go程，因此当前goroutine未来会恢复执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NumCPU</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>NumCPU返回本地机器的逻辑CPU个数<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GOROOT</span><span class="params">()</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>GOROOT返回go的根目录。如果存在GOROOT环境变量，返回该变量的值；否则，返回创建go时的根目录。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GOMAXPROCS</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>GOMAXPROCS设置可同时执行的最大CPU数，并返回先前的设置。 若 n &lt; 1，它就不会更改当前设置。本地机器的逻辑CPU数可通过  NumCPU 查询。本函数在调度程序优化后会去掉。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Goexit</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>Goexit终止调用它的goroutine。其他goroutine不会受影响。Goexit会在终止该goroutine前执行所有defer的函数。<br>在程序的main  goroutine调用本函数，会终结该goroutine，而不会让main返回。因为main函数没有返回，程序会继续执行其它goroutine。如果所有其他goroutine都退出了，程序就会崩溃。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NumGoroutine</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>NumGoroutine返回当前存在的Goroutine数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言接口&quot;&gt;&lt;a href=&quot;#Go语言接口&quot; class=&quot;headerlink&quot; title=&quot;Go语言接口&quot;&gt;&lt;/a&gt;Go语言接口&lt;/h2&gt;
&lt;h3 id=&quot;接口定义&quot;&gt;&lt;a href=&quot;#接口定义&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（五）</title>
    <link href="https://www.kapyan.top/posts/1879225483.html"/>
    <id>https://www.kapyan.top/posts/1879225483.html</id>
    <published>2019-02-25T02:30:30.000Z</published>
    <updated>2019-02-26T09:29:21.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言流程控制"><a href="#Go语言流程控制" class="headerlink" title="Go语言流程控制"></a>Go语言流程控制</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为true来决定是否执行指定语句，并在条件为false的情况下执行另外的语句。</p><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>if语句由一个布尔表达式后紧跟一个或多个语句组成。if 在布尔表达式为 true 时，其后紧跟的语句块执行，如果为 false 则不执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接判断bool类型</span></span><br><span class="line">b := <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> b &#123;</span><br><span class="line">fmt.Println(<span class="string">"b := true"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式中判断bool类型</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> str == <span class="string">""</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">`str == ""`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过&amp;&amp;逻辑与、||逻辑或、！逻辑非，判断bool类型</span></span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span> &amp;&amp; a &lt; b &#123;</span><br><span class="line">fmt.Println(<span class="string">"a &gt; 0 &amp;&amp; a &lt; b"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">10</span> || b == <span class="number">20</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"a &lt; 10 || b == 20"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !(a == b) &#123;</span><br><span class="line">    fmt.Println(<span class="string">"!(a == b)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式中先变量后判断bool类型</span></span><br><span class="line"><span class="keyword">if</span> age ：= <span class="number">18</span>;age == <span class="number">18</span> &#123; </span><br><span class="line">fmt.Println(<span class="string">"age == 18"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h4><p>if语句后可以使用可选的else语句，else语句中的表达式在布尔表达式为false时执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i&lt;10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i=10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i&gt;10"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="if嵌套语句"><a href="#if嵌套语句" class="headerlink" title="if嵌套语句"></a>if嵌套语句</h4><p>可以在if或else if语句中嵌入一个或多个if或else if 语句。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">"haha"</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"haha"</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> age == <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"haha"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="switch条件语句"><a href="#switch条件语句" class="headerlink" title="switch条件语句"></a>switch条件语句</h3><p>switch语句用于基于不同条件执行不同动作。每一个case分支都是唯一的，所有case分支的参数必须是相同的类型，语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加上break，默认自动终止。</p><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接判断</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span> </span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带初始化语句</span></span><br><span class="line">names := []<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Golang"</span>, <span class="string">"Jav"</span>Python<span class="string">"&#125;</span></span><br><span class="line"><span class="string">switch name := names[0]; name &#123;</span></span><br><span class="line"><span class="string">case "</span>Golang<span class="string">":</span></span><br><span class="line"><span class="string">    fmt.Println("</span>Golang<span class="string">")</span></span><br><span class="line"><span class="string">case "</span>Java<span class="string">":</span></span><br><span class="line"><span class="string">    fmt.Println("</span>Java<span class="string">")</span></span><br><span class="line"><span class="string">case "</span>Python<span class="string">":</span></span><br><span class="line"><span class="string">    fmt.Println("</span>Python<span class="string">")</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">    fmt.Println("</span>haha<span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//一个case多个可能符合条件的值</span></span><br><span class="line"><span class="string">var i = 1</span></span><br><span class="line"><span class="string">switch i &#123;</span></span><br><span class="line"><span class="string">case 0,1:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="number">0</span> or <span class="number">1</span><span class="string">")</span></span><br><span class="line"><span class="string">case 2:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="number">2</span><span class="string">")</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="keyword">default</span><span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//省略条件表达式应用</span></span><br><span class="line"><span class="string">var i = 10</span></span><br><span class="line"><span class="string">switch &#123;</span></span><br><span class="line"><span class="string">case i &gt;=0 &amp;&amp; i &lt; 10:</span></span><br><span class="line"><span class="string">fmt.Println("</span>i &gt; <span class="number">0</span> and i &lt; <span class="number">10</span><span class="string">")</span></span><br><span class="line"><span class="string">case i &gt;=10 &amp;&amp; i &lt; 20:</span></span><br><span class="line"><span class="string">fmt.Println("</span>i &gt;<span class="number">10</span> and i &lt; <span class="number">20</span><span class="string">")</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="keyword">default</span><span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*fallthrough应用</span></span><br><span class="line"><span class="string">Go语言switch语句的每个case最后默认带有break,成功后不会自动向下执行其他case，而是跳出整个switch。</span></span><br><span class="line"><span class="string">可以使用fallthrough语句强制执行后面的case代码。*/</span></span><br><span class="line"><span class="string">var i = 0</span></span><br><span class="line"><span class="string">switch i &#123;</span></span><br><span class="line"><span class="string">case 0:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="keyword">fallthrough</span><span class="string">")</span></span><br><span class="line"><span class="string">fallthrough</span></span><br><span class="line"><span class="string">case 1:</span></span><br><span class="line"><span class="string">fmt.Println(1)//此行代码被强制执行</span></span><br><span class="line"><span class="string">case 2:</span></span><br><span class="line"><span class="string">fmt.Println(2)</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">fmt.Println("</span>defalut<span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h3><p>select是Go中的一个控制结构，类似于通信的switch语句。每个case必须是一个通信操作，要么是发送要么是接收。<br>select随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。一个默认的子句应该总是可运行的。<br>语法如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意数量的 case */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <ol>    <li>每个case都必须是一个通信</li>    <li>所有channels表达式都被会求值</li>    <li>所有被发送的表达式都被求值</li>    <li>如果任意某个通信可以进行，他就执行，其它被忽略</li>    <li>如果有多个case都可以运行，select会随机公平地选出一个执行。其它不会被执行。否则：如果有default子句，则执行该语句；如果没有default字句，select将阻塞，直到某个通信可以运行；Go不会重新对channel或值进行求值。</li>  </ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> c1, c2, c3 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">var</span> i1, i2 <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> i1 = &lt;-c1:</span><br><span class="line">         fmt.Printf(<span class="string">"received "</span>, i1, <span class="string">" from c1\n"</span>)</span><br><span class="line">      <span class="keyword">case</span> c2 &lt;- i2:</span><br><span class="line">         fmt.Printf(<span class="string">"sent "</span>, i2, <span class="string">" to c2\n"</span>)</span><br><span class="line">      <span class="keyword">case</span> i3, ok := (&lt;-c3):  <span class="comment">// same as: i3, ok := &lt;-c3</span></span><br><span class="line">         <span class="keyword">if</span> ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"received "</span>, i3, <span class="string">" from c3\n"</span>)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"c3 is closed\n"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">"no communication\n"</span>)</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>for循环是一个循环控制结构，可以执行指定次数的循环。<br>三种循环方式：</p><ol>  <li>常见的for循环，支持初始化语句    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>init:一般为赋值表达式，给控制变量赋初值；<br>condition：关系表达式或逻辑表达式，循环控制条件；<br>post：一般为复制表达式，给控制变量增量或减量。<br>for语句执行过程如下：<br>①    先对表达式init赋初值<br>②    判别赋值表达式init是否满足给定condition条件，若其值为真，满足循环条件则执行循环体内语句，然后执行post，进入第二次循环，再判别condition；否则判断condition值为假，不满足条件就终止for循环，执行循环体外语句。</p></blockquote><ol start="2">  <li>    <p>关系表达式或逻辑表达式控制循环</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> condition &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">5</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i == <span class="number">5</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>无限循环</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h3 id="range循环语句"><a href="#range循环语句" class="headerlink" title="range循环语句"></a>range循环语句</h3><p>Go语言中range关键字用于for循环中迭代数组（array）、切片（slice）、通道（channel）或者集合（map）的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回key-value对应的key值。</p><h4 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"linux系统"</span></span><br><span class="line"><span class="keyword">for</span> k,v := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Println(k,<span class="keyword">string</span>(v))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol>  <li>for range英文字符串，key值按照+1顺序递增</li>  <li>for range包含中文字的字符串，英文字符key值按照+1顺序递增，中文字符key值按照+3顺序递增</li></ol><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><ol>  <li>    <p>for range数组程序会复制对象，key、value都是从复制品中取出</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>], arr[<span class="number">1</span>] = <span class="number">1000</span>, <span class="number">1000</span></span><br><span class="line">        fmt.Println(<span class="string">"修改原数组："</span>, arr)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 使用复制品中取出的 value 修改原数组</span></span><br><span class="line">    arr[k] = v + <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>多维数组遍历</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k1, v1 := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="keyword">for</span> k2, v2 := <span class="keyword">range</span> v1 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%d*%d=%d "</span>, k1+<span class="number">1</span>, k2+<span class="number">1</span>, v2)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>数组遍历值拷贝行为会造成性能问题，建议数组遍历使用饮用型slice，或数组指针。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">arrP := &amp;arr</span><br><span class="line"><span class="keyword">for</span> k, _ := <span class="keyword">range</span> arrP &#123;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">        arrP[<span class="number">0</span>], arrP[<span class="number">1</span>] = <span class="number">1000</span>, <span class="number">1000</span></span><br><span class="line">        fmt.Println(<span class="string">"修改原数组："</span>, arr)</span><br><span class="line"> &#125; </span><br><span class="line">    arrP[k] += <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure>  </li></ol><h4 id="slice遍历"><a href="#slice遍历" class="headerlink" title="slice遍历"></a>slice遍历</h4><p>将所需数据copy到较小的slice，以便释放底层数组内存<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">slice := arr[:]</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"key: %v , value : %v\n"</span>, key,value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h4><p>map遍历不能保证迭代返回次序，通常是随机结果，具体和版本实现有关。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">"Linux"</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">"Golang"</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">"Python"</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">"Java"</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">"DBA"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d =&gt; %s \n"</span>, k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="channel遍历"><a href="#channel遍历" class="headerlink" title="channel遍历"></a>channel遍历</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>;i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="2">注意：如果没有close()，因为存入管道10个数字，然后无限取数据，再取出来第10个数据，再次range管道，会dead  lock。</font><br>### 循环控制语句<br>循环控制语句可以控制循环体内语句的执行过程。<br>Go语言支持goto、break、continue三种循环控制语句，三个语句都可以配合标签（label）使用，标签名区分大小写，定义后不使用会造成编译错误。<br>####goto语句<br>Go语言支持在函数内goto跳转，goto语句可以无条件地转移到过程中指定的行，通常与条件语句配合使用。可用来实现条件转移、构成循环、跳出循环体等功能。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义标签后定义goto语句</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">GO:</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">20</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">15</span> &#123;<span class="comment">//跳过迭代</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">goto</span> GO</span><br><span class="line">&#125;</span><br><span class="line">fmt .Printf(<span class="string">"i的值为：%d\n"</span>,i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先定义goto语句后定义标签</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">goto</span> haha</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">haha:</span><br><span class="line">    fmt.Println(<span class="string">"golang"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><font color="red" size="2">注意：goto语句与标签之间不能有变量声明，否则编译错误。</font><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><ol>  <li>break语句中断当前for循环，并开始执行循环之后的语句</li>  <li>break语句中断当前for range循环，并开始执行循环之后的语句</li>  <li>break语句在执行一条case后跳出switch循环</li>  <li>break语句在执行一条case后跳出select循环</li>  <li>break label语句跳出多层嵌套循环，break标签除了可以跳出for循环，还可以跳出select、switch循环<font color="red" size="2">（注意：label要写在循环的开始而不是结束的地方，和goto语句不一样）</font>  </li></ol><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><ol>  <li>continue语句在for循环和for range循环中用于跳过当前循环的剩余语句，然后继续进行下一轮循环。</li>  <li>continue label语句可在多级嵌套循环中跳出。</li></ol><h2 id="Go语言函数"><a href="#Go语言函数" class="headerlink" title="Go语言函数"></a>Go语言函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><h4 id="Go语言函数特点"><a href="#Go语言函数特点" class="headerlink" title="Go语言函数特点"></a>Go语言函数特点</h4><ol>  <li>关键字func用来声明一个函数名；</li>  <li>函数可以有一个或多个参数，每个参数后面带有类型，通过逗号“,”分隔；</li>  <li>函数可以返回多个值；</li>  <li>返回值可以使用声明变量，如果不想声明也可以直接使用返回值的类型；</li>  <li>如果只有一个返回值且不声明返回值变量，那么可以省略包括返回值的括号；</li>  <li>如果没有返回值，可以直接省略最后的返回信息；</li>  <li>如果有返回值，必须在函数的外层添加return语句，否则会引发编译错误；</li>  <li>函数也是一种类型，一个函数可以赋值给变量，可作为参数传递；</li>  <li>函数不支持嵌套，一个包不能有两个名字一样的函数。不支持重载，不支持默认参数    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无参数、无返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个参数、无返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(st <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义多个参数的函数，一个返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">haha</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(ret <span class="keyword">string</span>,err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> str == <span class="string">"go"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>,errors.New(<span class="string">"error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值只有类型，无变量声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">haha</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>,error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> str == <span class="string">"go"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>,errors.New(<span class="string">"error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个五参数、无返回值的函数类型</span></span><br><span class="line"><span class="keyword">type</span> funcType <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义一个参数，无返回值的函数类型</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">funcType</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义多个参数的函数，一个返回值的函数类型</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">funcType</span> <span class="title">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">init</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义一个多返回值的函数类型</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">funcType</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>,error)</span></span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>实际参数简称“实参”。在调用有参数时，函数名后面括号中的参数称为“实际参数”，实参可以是常量、变量或表达式。<br>自定义函数中的“形参”全称为“形式参数”，由于它不是实际存在变量，所以又称虚拟变量。实参和形参可以重名。形参的作用域是整个函数体，就像定义在函数体内的局部变量。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><ol>  <li>    <p>值传递：指在调用函数时将实际参数复制一份到传递函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> y <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 值传递</span></span><br><span class="line">    z := sum(x, y)</span><br><span class="line">    fmt.Println(z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>引用传递：是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行修改，将影响到实际参数。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y *<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> temp <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    temp = *x</span><br><span class="line">    *x = *y</span><br><span class="line">    *y = temp</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> course1, course2 <span class="keyword">string</span> = <span class="string">"Python"</span>, <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    swap(&amp;course1, &amp;course2)</span><br><span class="line"></span><br><span class="line">    fmt.Println(course1, course2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>固定类型可变参数：就是函数的参数不是固定的，后面的类型是固定的。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable</span><span class="params">(name <span class="keyword">string</span>, course ...<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"可变参数的长度:"</span>, <span class="built_in">len</span>(course))</span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> course &#123;</span><br><span class="line">        fmt.Println(name, val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    variable(linux<span class="string">", "</span>golang<span class="string">", "</span>python<span class="string">", "</span>java<span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>  </li>  <li>    <p>任意类型的不定参数：就是函数的参数和每个参数的类型都不是固定的。形参用interface{}传递任意类型数据。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable</span><span class="params">(values ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> values &#123;</span><br><span class="line">        <span class="keyword">switch</span> v := val.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is int "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is float "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is string "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is bool "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> Person:</span><br><span class="line">            fmt.Println(<span class="string">"val type is Person "</span>, v.name)</span><br><span class="line">        <span class="keyword">case</span> *Person:</span><br><span class="line">            fmt.Println(<span class="string">"val type is *Person "</span>, v.name)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is unknow "</span>, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    temp_int := <span class="number">1</span></span><br><span class="line">    temp_float := <span class="number">5.6</span></span><br><span class="line">    temp_string := <span class="string">"hello"</span></span><br><span class="line">    temp_bool := <span class="literal">true</span></span><br><span class="line">    temp_person1 := &amp;Person&#123;name: <span class="string">"jack"</span>&#125;</span><br><span class="line">    temp_person2 := Person&#123;name: <span class="string">"rose"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> temp_float32 <span class="keyword">float32</span> = <span class="number">6.6</span></span><br><span class="line"></span><br><span class="line">    variable(temp_int, temp_float, temp_string, temp_bool, temp_person1, temp_person2, temp_float32)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>函数类型参数：就是函数类型赋值给变量，作为参数传递应用。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数类型</span></span><br><span class="line"><span class="keyword">type</span> myfunc <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">addperfix</span><span class="params">(perfix, name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(perfix, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数用匿名函数当参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(name <span class="keyword">string</span>, f myfunc)</span></span> &#123;</span><br><span class="line">    f(<span class="string">"hello"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sayhello(<span class="string">"haha"</span>, addperfix)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>注意：</p>  <ol>    <li>Go语言函数中的参数不支持默认值。</li>    <li>无论是值传递，还是引用传递，传递给函数的都是变量的副本，不过，值传递是值的拷贝。引用传递是地址的拷贝，一般来说，地址拷贝更为高效。而值拷贝取决于拷贝的对象大小，对象越大，则性能越低。</li>    <li>map、slice、chan、指针、interface默认以引用的方式传递。</li>    <li>函数的可变参数只能有一个，且必须是最后一个。</li>    <li>在参数赋值时可以不用一个个赋值，可以直接传递一个数组或者切片，特别注意的在参数后加上“…”即可。</li>  </ol></blockquote><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><h4 id="返回值定义"><a href="#返回值定义" class="headerlink" title="返回值定义"></a>返回值定义</h4><p>返回值通过使用返回语句返回。可以返回任意类型。返回语句会立即中止函数的运行，并且将控制权交回调用该函数的代码行。<br>Go语言函数可以有零个或多个返回值，可以返回多个不同类型的结果。当函数有返回值时return语句必须要写，否则编译器会报错。<br>Go语言在定义函数返回值可以被命名，命名返回值的作用域是整个函数体，就像定义在函数体内的局部变量。在return语句中，无需显示的返回这些值，Go会自动将其返回。</p><h4 id="巧用return"><a href="#巧用return" class="headerlink" title="巧用return"></a>巧用return</h4><ol>  <li>    <p>无返回值函数，在内部任何程序执行片段return，直接会跳出该函数，return下面的程序片段都不会再执行。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">10</span>; i &lt; <span class="number">100</span>;i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,i)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">11</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>有返回值函数，在内部任何程序执行片段使用return，它下面的程序片段都不会再执行，但是程序结尾必须以return结束，否则程序报错。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pacakage main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">10</span> ;i &lt; <span class="number">100</span>; i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,i)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">11</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_ = test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数是指不需要定义函数名的一种函数实现方式。1958年LISP首先采用匿名函数。<br>在Go里面，函数可以像普通变量一样被传递或使用，Go语言支持随时在代码里定义匿名函数。<br>匿名函数由一个不带函数名的函数声明和函数体组成。匿名函数的优越性在于可以直接使用函数内的变量，不必声明。</p><h4 id="匿名函数定义"><a href="#匿名函数定义" class="headerlink" title="匿名函数定义"></a>匿名函数定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先声明一个函数类型的变量，然后定义一个匿名函数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sum <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="title">sum</span> = <span class="title">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用更简略的“:=”方式定义一个匿名函数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">product := <span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(product(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名函数应用"><a href="#匿名函数应用" class="headerlink" title="匿名函数应用"></a>匿名函数应用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数的变量为函数地址</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"sum -&gt; %v sum(1,3) =%v\n"</span>,sum,sum(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接创建匿名函数执行并返回结果</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">product := <span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y</span><br><span class="line">&#125;(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"product = % d\n"</span>,product)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>递归，就是在运行的过程中调用自己。一个函数调用自己，就叫做递归函数。<br>构成递归需具备的条件：</p><ol>  <li>子问题须与原始问题为同样的是事，且更为简单。</li>  <li>不能无限制地调用本身，须有个出口，化简为非递归状况处理。</li></ol><p>Go编程语言支持递归，即函数调用函数本身。在使用递归时，需要谨慎确定函数的退出条件，否则会造成无限循环。<br>递归函数可以解决许多数学问题如计算给定数字阶乘、产生斐波那契数列等。</p><h3 id="延迟调用"><a href="#延迟调用" class="headerlink" title="延迟调用"></a>延迟调用</h3><p>defer是Go语言提供的关键字，用来调度一个函数（被延期的函数），使其在执行defer的函数即将返回之前才运行被延期执行的函数，它的参数（包括接受者）在defer执行的时候被求值，而不是在调用执行的时候  。也就是说被延期执行的函数的参数是按照正常顺序被求值的。<br>defer常用来释放资源，如果有多个defer表达式，调用顺序类似于栈，越后面的defer表达式越先被调用。defer函数调用的执行时机是外层函数设置返回值后，并在即将返回之前。</p><h4 id="defer应用"><a href="#defer应用" class="headerlink" title="defer应用"></a>defer应用</h4><ol>  <li>    <p>当defer被声明时，参数被实时解析</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="params">(str <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">str = <span class="string">"haha"</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">"defer : %s\n"</span>,str)</span><br><span class="line">str = <span class="string">"哈哈"</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>deferz执行顺序为先进后出</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i&lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">"defer%d\n"</span>,i)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>defer可以读取有名返回值</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; i += <span class="number">100</span>&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := test()</span><br><span class="line">fmt.Println(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>需要明确的是defer代码块的作用域仍然在函数之内。defer的作用域仍然在test()函数之内，因此可以读取test()函数内的变量。</p></blockquote><h2 id="Go语言方法"><a href="#Go语言方法" class="headerlink" title="Go语言方法"></a>Go语言方法</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p>在Go语言中有一个概念和函数极其相似叫做方法。Go语言的方法其实是作用在接收者（receiver）上的一个函数，接收者是某种非内置类型的变量。因此，方法是一种特殊类型的函数。<br>接收者类型可以是（几乎）任何类型，不仅仅是结构体类型，任何类型都可以有方法，甚至可以是函数类型，可以是int、bool、string或数组的别名类型。但是接收者不能是接口类型。<br>方法的声明和普通函数的声明类似，只是在函数名称前面多了一个参数，这个参数把这个方法绑定到这个参数对应的类型上。<br><strong>方法定义</strong><br>首先声明一个自定义类型Test<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>方法参数receiver类型可以是Test或*Test。类型Test不能是接口或指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无参数、无返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个单参数、无返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多参数、无返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个无参数、单返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多参数、多返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="params">(z <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="方法和函数的关系"><a href="#方法和函数的关系" class="headerlink" title="方法和函数的关系"></a>方法和函数的关系</h4><p>方法是特殊的函数，定义在某一特定的类型上，通过类型的实例来进行调用，这个实例被叫接收者。<br>接受者必须有一个显式的名字，这个名字必须在方法中被使用。接受者类型必须在和方法同样的包中被声明。</p><p>  <font color="red" size="2">注意：Go语言不允许为简单的内置类型添加方法</font></p><h4 id="方法与函数的区别"><a href="#方法与函数的区别" class="headerlink" title="方法与函数的区别"></a>方法与函数的区别</h4><ol>  <li>对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然。</li>  <li>对于方法（如struct的方法），接收者为值类型时，可以直接用指针类型的变量调用方法，反之亦然。</li></ol><h3 id="方法规则"><a href="#方法规则" class="headerlink" title="方法规则"></a>方法规则</h3><p>根据调用者不同，方法分为两种表现形式：方法（method value）、方法表达式（method expression）。<br>两者都可像普通函数那样赋值和传参，区别在于方法（method  value）绑定了实例，而方法表达式（method expression）必须显式传参。</p><h4 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h4><p>直接调用，类型T和*T上的方法集是互相继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为*T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1 := T&#123;<span class="number">1</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"t1 is :%v\n"</span>,t1)</span><br><span class="line">t1.testT()</span><br><span class="line">t1.testP()</span><br><span class="line"></span><br><span class="line">t2 := &amp;t1</span><br><span class="line">fmt.Printf(<span class="string">"t2 is : %v\n"</span>, t2)</span><br><span class="line">t2.testT()</span><br><span class="line">t2.testP()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接调用，类型S包含匿名字段*T或T,则S和*S方法包含T和*T上的方法集是互相继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ST <span class="keyword">struct</span> &#123;</span><br><span class="line">    T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SP <span class="keyword">struct</span> &#123;</span><br><span class="line">    *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 *T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    st1 := ST&#123;T&#123;<span class="number">1</span>&#125;&#125;</span><br><span class="line">    st2 := &amp;st1</span><br><span class="line">    fmt.Printf(<span class="string">"st1 is : %v\n"</span>, st1)</span><br><span class="line">    st1.testT()</span><br><span class="line">    st1.testP()</span><br><span class="line">    fmt.Printf(<span class="string">"st2 is : %v\n"</span>, st2)</span><br><span class="line">    st2.testT()</span><br><span class="line">    st2.testP()</span><br><span class="line"></span><br><span class="line">    sp1 := SP&#123;&amp;T&#123;<span class="number">1</span>&#125;&#125;</span><br><span class="line">    sp2 := &amp;sp1</span><br><span class="line">    fmt.Printf(<span class="string">"sp1 is : %v\n"</span>, sp1)</span><br><span class="line">    sp1.testT()</span><br><span class="line">    sp1.testP()</span><br><span class="line">    fmt.Printf(<span class="string">"sp2 is : %v\n"</span>, sp2)</span><br><span class="line">    sp2.testT()</span><br><span class="line">    sp2.testP()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="隐式传递调用"><a href="#隐式传递调用" class="headerlink" title="隐式传递调用"></a>隐式传递调用</h4><p>接收者隐式传递，类型T和*上的方法是相互继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为*T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := T&#123;<span class="string">"haha"</span>&#125;</span><br><span class="line">methodValue1 := t.testT</span><br><span class="line">methodValue1()</span><br><span class="line">methodValue2 := (&amp;t).testT</span><br><span class="line">methodValue2()</span><br><span class="line">methodValue3 := t.testP</span><br><span class="line">methodValue3()</span><br><span class="line">methodValue4 := (&amp;t).testP</span><br><span class="line">methodValue4()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接收者隐式传递，类型S包含匿名字段*T或T,则S和*S方法集包含T和*T上的方法集是互相继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ST <span class="keyword">struct</span> &#123;</span><br><span class="line">    T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SP <span class="keyword">struct</span> &#123;</span><br><span class="line">    *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 *T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    st1 := ST&#123;T&#123;<span class="string">"hahha"</span>&#125;&#125;</span><br><span class="line">    methodValue1 := st1.testT</span><br><span class="line">    methodValue1()</span><br><span class="line">    methodValue2 := (&amp;st1).testT</span><br><span class="line">    methodValue2()</span><br><span class="line">    methodValue3 := st1.testP</span><br><span class="line">    methodValue3()</span><br><span class="line">    methodValue4 := (&amp;st1).testP</span><br><span class="line">    methodValue4()</span><br><span class="line"></span><br><span class="line">    sp1 := SP&#123;&amp;T&#123;<span class="string">"oldboy"</span>&#125;&#125;</span><br><span class="line">    methodValue5 := sp1.testT</span><br><span class="line">    methodValue5()</span><br><span class="line">    methodValue6 := (&amp;sp1).testT</span><br><span class="line">    methodValue6()</span><br><span class="line">    methodValue7 := sp1.testP</span><br><span class="line">    methodValue7()</span><br><span class="line">    methodValue8 := (&amp;sp1).testP</span><br><span class="line">    methodValue8()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="显示传递调用"><a href="#显示传递调用" class="headerlink" title="显示传递调用"></a>显示传递调用</h4><p>接收者显示传值，类型T的可调用方法集包含接收者为T所有方法，不包含接收者为*T的方法。类型*T的可调用方法集包含接收者为*T或者T的所有方法集。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"接受者为 T "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"接受者为 *T "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;<span class="string">"haha"</span>&#125;</span><br><span class="line">    expression1 := T.testT</span><br><span class="line">    expression1(t)</span><br><span class="line">    expression2 := (*T).testT</span><br><span class="line">    expression2(&amp;t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expression3 := T.testP</span></span><br><span class="line">    <span class="comment">// expression3(t)</span></span><br><span class="line">    expression4 := (*T).testP</span><br><span class="line">    expression4(&amp;t)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接收者显示传值，类型S包含匿名字段*T,则S和*S方法集包含T和*T上的方法集是互相继承的。<br>类型 S 包含匿名字段 T ，类型 S  的可调用方法集包含接受者为 T 的所有方法，不包含接受者为 *T 的方法。类型 *S 的可调用方法集包含接受者为 *T 或 T 的所有方法集。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ST <span class="keyword">struct</span> &#123;</span><br><span class="line">    T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SP <span class="keyword">struct</span> &#123;</span><br><span class="line">    *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 *T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    st1 := ST&#123;T&#123;<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">    expression1 := ST.testT</span><br><span class="line">    expression1(st1)</span><br><span class="line">    expression2 := (*ST).testT</span><br><span class="line">    expression2(&amp;st1)</span><br><span class="line">    <span class="comment">// expression3 := ST.testP</span></span><br><span class="line">    <span class="comment">// expression3(st1)</span></span><br><span class="line">    expression4 := (*ST).testP</span><br><span class="line">    expression4(&amp;st1)</span><br><span class="line"></span><br><span class="line">    sp1 := SP&#123;&amp;T&#123;<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">    expression5 := SP.testT</span><br><span class="line">    expression5(sp1)</span><br><span class="line">    expression6 := (*SP).testT</span><br><span class="line">    expression6(&amp;sp1)</span><br><span class="line">    expression7 := SP.testP</span><br><span class="line">    expression7(sp1)</span><br><span class="line">    expression8 := (*SP).testP</span><br><span class="line">    expression8(&amp;sp1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法应用"><a href="#方法应用" class="headerlink" title="方法应用"></a>方法应用</h3><h4 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h4><p>Go语言支持只提供类型，而不写字段名的方式，也就是匿名字段，也称为嵌入字段。<br>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。<br>Go语言匿名字段可以像字段成员那样访问匿名字段方法，编译器负责查找。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Course <span class="keyword">struct</span> &#123;</span><br><span class="line">Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Student)</span> <span class="title">ToString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"Student: %p, %v"</span>, self, self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Course&#123;Student&#123;<span class="number">1</span>,<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Course: %p\n"</span>,&amp;c)</span><br><span class="line">fmt.Println(c.ToString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Go语言不像其它面向对象语言一样可以写个类，然后在类里面写一堆方法，但其实Go语言的方法很巧妙的实现了这种效果：我们只需要在普通函数前面加个接收者（receiver，写在函数名前面的括号里面），这样编译器就知道这个函数（方法）属于哪个struct了。</p><h4 id="继承复用"><a href="#继承复用" class="headerlink" title="继承复用"></a>继承复用</h4><p>Go语言中没有继承，但是可以依靠组合来模拟继承和多态。<br>通过匿名字段，可获得和继承类似的复用能力。依据编译器查找次序，只需在外层定义同名方法，就可以实现。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Course <span class="keyword">struct</span> &#123;</span><br><span class="line">Student</span><br><span class="line">title <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Student)</span> <span class="title">ToString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"Student:%p,%v"</span>,self,self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Course)</span> <span class="title">ToString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"Course: %p, %v"</span>, self, self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := Course&#123;Student&#123;<span class="number">1</span>, <span class="string">"haha"</span>&#125;, <span class="string">"Golang"</span>&#125;</span><br><span class="line">    fmt.Println(c.ToString())</span><br><span class="line">    fmt.Println(c.Student.ToString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义EEROR"><a href="#自定义EEROR" class="headerlink" title="自定义EEROR"></a>自定义EEROR</h4><p>错误是可以用字符串描述自己的任何东西。可以由预定义的内建接口类型error，和其返回字符串的方法Error构成。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当用fmt包的多种不同的打印函数输出一个error时，会自动调用该方法。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;</span><br><span class="line">path       <span class="keyword">string</span></span><br><span class="line">op         <span class="keyword">string</span></span><br><span class="line">createTime <span class="keyword">string</span></span><br><span class="line">message    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PathError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"path=%s \nop=%s \ncreateTime=%s \nmessage=%s"</span>, p.path, p.op, p.createTime, p.message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;PathError&#123;</span><br><span class="line">path:       filename,</span><br><span class="line">op:         <span class="string">"read"</span>,</span><br><span class="line">message:    err.Error(),</span><br><span class="line">createTime: fmt.Sprintf(<span class="string">"%v"</span>, time.Now()),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := Open(<span class="string">"/test/test.go"</span>)</span><br><span class="line"><span class="keyword">switch</span> v := err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *PathError:</span><br><span class="line">fmt.Println(<span class="string">"get path error,"</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言流程控制&quot;&gt;&lt;a href=&quot;#Go语言流程控制&quot; class=&quot;headerlink&quot; title=&quot;Go语言流程控制&quot;&gt;&lt;/a&gt;Go语言流程控制&lt;/h2&gt;
&lt;h3 id=&quot;if条件语句&quot;&gt;&lt;a href=&quot;#if条件语句&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（四）</title>
    <link href="https://www.kapyan.top/posts/530346444.html"/>
    <id>https://www.kapyan.top/posts/530346444.html</id>
    <published>2019-02-21T06:45:24.000Z</published>
    <updated>2019-02-25T02:28:21.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言切片"><a href="#Go语言切片" class="headerlink" title="Go语言切片"></a>Go语言切片</h2><p>Go语言切片是对数组的抽象。数组的长度不可改变，在特定场景中不太使用，Go提供了一种灵活，功能强悍的内置类型切片（“动态数组”），与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片容量增大。（slice并不是数组或数组指针，它通过内部指针和相关属性引用数组片段，以实现变长方案）</p><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个切片</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//切片定义并初始化</span></span><br><span class="line"><span class="keyword">var</span> slice0 []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice1 = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过make来创建切片</span></span><br><span class="line"><span class="keyword">var</span> slice0 []<span class="keyword">int</span> = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> slice1 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> slice2 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过:=语法来定义切片</span></span><br><span class="line">slice0 := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过操作数组来创建切片</span></span><br><span class="line"><span class="keyword">var</span> array = [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice0 []<span class="keyword">int</span> = array[<span class="number">2</span>:<span class="number">8</span>]</span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">int</span> = array[<span class="number">0</span>:<span class="number">6</span>]<span class="comment">//可以简写为 var slice []int = array[:end]</span></span><br><span class="line"><span class="keyword">var</span> slice2 []<span class="keyword">int</span> = array[<span class="number">5</span>:<span class="number">10</span>]<span class="comment">//可以简写为 var slice[]int = array[start:]</span></span><br><span class="line"><span class="keyword">var</span> slice3 []<span class="keyword">int</span> = array[<span class="number">0</span>:<span class="built_in">len</span>(array)]<span class="comment">//可以简写为var slice []int = array[:]</span></span><br><span class="line"><span class="keyword">var</span> slice4 = array[:<span class="built_in">len</span>(array)<span class="number">-1</span>]  <span class="comment">//去掉切片的最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过两个冒号创建切片，slice[x:y:z]切片实体[x:y],切片长度len=y-x,切片容量cap=z-x</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    slice1 := slice[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">    fmt.Printf(<span class="string">"slice1 : %v , len : %d , cap : %d\n"</span>, slice1, <span class="built_in">len</span>(slice1), <span class="built_in">cap</span>(slice1))</span><br><span class="line">    slice2 := slice[<span class="number">2</span>:<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">    fmt.Printf(<span class="string">"slice2 : %v , len : %d , cap : %d\n"</span>, slice2, <span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h3><p>切片长度，可以由len()函数获取切片长度。<br>切片容量，可以由cap()函数获取切片最长可以达到多少。<br>如果slice ==  nil，那么len、cap结果都等于0。<br>切片追加，使用append()函数向slice尾部添加数据，返回新的slice<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次 append 一个值</span></span><br><span class="line">    b := <span class="built_in">append</span>(a, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次 append 多个值</span></span><br><span class="line">    c := <span class="built_in">append</span>(b, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次 append 一个切片</span></span><br><span class="line">    <span class="keyword">var</span> d = []<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">    e := <span class="built_in">append</span>(c, d...)</span><br><span class="line"></span><br><span class="line">    fmt.Println(a, b, c, d, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切片拷贝，使用copy()函数copy在两个slice间复制数据，复制长度以len小的为准。两个slice可指向同一底层数组，允许元素区间重叠。</p><p>slice中cap重新分配规律<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">c := <span class="built_in">cap</span>(s)</span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>;i &lt; <span class="number">50</span>;i++ &#123;</span><br><span class="line">s = <span class="built_in">append</span>(s,i)</span><br><span class="line"><span class="keyword">if</span> n := <span class="built_in">cap</span>(s); n &gt; c&#123;</span><br><span class="line">Printf(<span class="string">"cap:%d -&gt; %d\n"</span>,c,n )</span><br><span class="line">c = n</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cap</span>:<span class="number">1</span> -&gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">2</span> -&gt; <span class="number">4</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">4</span> -&gt; <span class="number">8</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">8</span> -&gt; <span class="number">16</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">16</span> -&gt; <span class="number">32</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">32</span> -&gt; <span class="number">64</span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言容器"><a href="#Go语言容器" class="headerlink" title="Go语言容器"></a>Go语言容器</h2><p>Map是一种无序的键值对的集合。Map最重要的一点是通过key来快速检索数据，key类似于索引，指向数据的值。<br>Map是一种集合，所以可以像迭代数组和切片那样迭代它。不过，Map是无序的，我们无法决定它的返回顺序，这是因为Map是使用hash表来实现的。<br>键必须是支持相等运算符（“==”、“！=”）类型，如number、string、pointer、array、struct和对应的interface，值可以是任意类型，没有限制。</p><h3 id="定义Map"><a href="#定义Map" class="headerlink" title="定义Map"></a>定义Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个Map</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map定义并初始化</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">"Linux"</span>,<span class="number">1</span>:<span class="string">"Golang"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">"Linux"</span>,<span class="number">1</span>:<span class="string">"Golang"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过make来创建Map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过:=语法来定义Map</span></span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Map操作"><a href="#Map操作" class="headerlink" title="Map操作"></a>Map操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"key0"</span>: <span class="string">"Linux"</span>, <span class="string">"key1"</span>: <span class="string">"Python"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line">m[<span class="string">"key2"</span>] = <span class="string">"golang"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新操作</span></span><br><span class="line">m[<span class="string">"key1"</span>] = <span class="string">"php"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找操作</span></span><br><span class="line">val,ok := m[<span class="string">"key0"</span>]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"查找操作：key0 =&gt; %v\n"</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">"key1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//求长度</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(m)</span><br></pre></td></tr></table></figure><font color="red" size="2">注意：不可以在map上使用cap()方法</font><h2 id="Go语言管道"><a href="#Go语言管道" class="headerlink" title="Go语言管道"></a>Go语言管道</h2><h3 id="Channel概念"><a href="#Channel概念" class="headerlink" title="Channel概念"></a>Channel概念</h3><p>Channel是Go中的一个核心类型，可以把它看成一个管道。Channel是引用类型，操作符是箭头 &lt;-。<br>Channel是CSP模式的具体实现，用于多个goroutine通讯。其内部实现了同步，确保并发安全。<br>Channel是线程安全的，先进先出，多个goroutine同时访问，不需要加锁，channel是有类型的，一个整数的channel只能存放整数。</p><h3 id="Channel定义"><a href="#Channel定义" class="headerlink" title="Channel定义"></a>Channel定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//channel声明</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span>  <span class="comment">//声明int类型的chan</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">string</span> <span class="comment">//声明string类型的chan</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> <span class="comment">//声明map类型的chan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用make定义，无缓冲channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">chan</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用make定义，有缓冲channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ch2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ch2 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ch3 = <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">ch4 := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//只写channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ch3 = <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line">ch4 := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Channel特点"><a href="#Channel特点" class="headerlink" title="Channel特点"></a>Channel特点</h3><p>无缓冲的与有缓冲channel有着重大差别，那就是一个是同步的，一个是非同步的。</p><blockquote>  <p>无缓冲chan：ch1:=make(chan int)<br>有缓冲chan：ch2:=make(chan int,1)<br>无缓冲：    ch1&lt;-1不仅仅是向c1通道放1，而是一直要等到有别的协程&lt;-ch1接收了这个参数，ch1&lt;-1才会继续下去，要不然就一直阻塞着。<br>有缓冲：ch2&lt;-1则不会阻塞，因为缓大小是1（其实是缓冲大小为0,），只有当放第二个值的时候，第一个还没被接收，才会阻塞。</p></blockquote><p>缓冲区是内部属性，并非类型构成要素。<br>普通channel可以隐式转为只读channel或只写channel。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> send <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> = ch</span><br><span class="line"><span class="keyword">var</span> recv &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> = ch</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意：只读channel或只写channel不能转为普通channel</font><h3 id="Channel操作"><a href="#Channel操作" class="headerlink" title="Channel操作"></a>Channel操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用内置函数len()返回未被读取的缓冲元素数量，使用内置函数cap()返回缓冲区大小</span></span><br><span class="line"></span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">len</span>(ch1), <span class="built_in">cap</span>(ch1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//channel写入、读取操作：</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//写入chan</span></span><br><span class="line">ch &lt;- <span class="number">99</span></span><br><span class="line"><span class="comment">//读取chan</span></span><br><span class="line">value,ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"读取chan:%v\n"</span>,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//channel关闭操作</span></span><br><span class="line">使用内置函数<span class="built_in">close</span>()进行关闭<span class="keyword">chan</span></span><br><span class="line"><span class="comment">/*chan关闭之后，for range遍历chan中已经存在的元素后结束</span></span><br><span class="line"><span class="comment">没有使用for range的写法需要使用，val,ok := &lt;-ch进行判断chan是否关闭,注意:*/</span></span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">val,ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> ok == <span class="literal">false</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"chan is closed"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go语言指针"><a href="#Go语言指针" class="headerlink" title="Go语言指针"></a>Go语言指针</h2><p>指针（Pointer）是编程语言中的一个对象，利用地址，它的值直接指向（points  to）存在的电脑存储器中另一个地方的值。由于通过地址能找到所需的变量单元，可以说，地址指向该变量单元。因此，将地址形象化的称为“指针”。意思是通过它能找到以它为地址的内存单元。一个指针变量指向了一个值的内存地址。<br>Go语言支持指针类型*T，指针的指针**T，以及包含包名前缀的*package.T。</p><h3 id="指针声明"><a href="#指针声明" class="headerlink" title="指针声明"></a>指针声明</h3><p>在指针类型变量前面加上*（取值符）来获取指针所指向的内容。<br>在值类型变量前面加上&amp;（取地址符）来获取该变量的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span> <span class="comment">//声明一个int值的指针变量</span></span><br><span class="line"><span class="keyword">var</span> sp *<span class="keyword">string</span><span class="comment">//声明一个string值的指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过:=语法来定义指针</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">sp := &amp;str</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p **<span class="keyword">int</span> <span class="comment">//声明一个int值的指针的指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t *time.Time <span class="comment">//声明一个time.Time值的指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印变量在内存中的地址：</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">fmt.Printf(<span class="string">"变量的地址:%x\n"</span>,&amp;str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>当一个指针被定义后没有分配到任何变量时，它的值为nil。nil指针也被称为空指针。<br>nil在概念上和其他语言的null、None、nil、NULL一样，都代替零值或空值。<br>定义的不同类型的零值不能用于比较运算。</p><h3 id="指针类型转换"><a href="#指针类型转换" class="headerlink" title="指针类型转换"></a>指针类型转换</h3><p>Go语言是不允许两个指针类型进行转换的。<br>unsafe.Pointer类型用于表示任意类型的指针。有4个特殊的只能用于Pointer类型的操作。</p><ol>  <li>在任意类型的指针可以转换为一个Pointer类型值。</li>  <li>一个Pointer类型值可以转换为任意类型的指针。</li>  <li>一个uintptr类型值可以转换为一个Pointer类型值。</li>  <li>一个Pointer类型值可以转换为一个uintptr类型值。</li></ol><p>因此，Pointer类型允许程序绕过类型系统读写任意内存。使用它时必须谨慎。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">uint</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> p2 *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">p1 := &amp;i</span><br><span class="line">p2 = (*<span class="keyword">int</span>)(unsafe.Pointer(p1))</span><br><span class="line">fmt.Println(*p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Go语言结构体"><a href="#Go语言结构体" class="headerlink" title="Go语言结构体"></a>Go语言结构体</h2><p>Go语言中数组可以存储同一类型的数据，但在结构体中为不同项定义不同的数据类型。<br>结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。</p><h3 id="struct特点"><a href="#struct特点" class="headerlink" title="struct特点"></a>struct特点</h3><ol>  <li>用来定义复杂数据结构</li>  <li>struct里面可以包含一个或多个字段（属性）</li>  <li>struct类型可以定义方法，注意和函数的区分</li>  <li>struct类型是值类型</li>  <li>struct类型可以嵌套</li>  <li>结构体是用户单独定义的类型，不能和其他类型进行强制转换</li>  <li>Go中的struct没有构造函数，一般可以使用工厂模式来解决这个问题</li>  <li>可以为struct中的每个字段，写上一个tag。这个tag可以通过反射的机制获取到，最常用的场景就是json序列化和反序列化</li>  <li>访问结构体成员，用“.”来连接，格式为：“结构体.成员名”</li></ol><h3 id="struct定义"><a href="#struct定义" class="headerlink" title="struct定义"></a>struct定义</h3><p>可以用tpye在全局或函数内定义新类型<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个新的数据类型，结构体中只有一个成员</span></span><br><span class="line"><span class="keyword">type</span> bigint <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">type</span> smallint <span class="keyword">int8</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">新类型不是原类型的别名，除拥有相同数据存储结构外，它们之间没有任何关系，不会持有原类型任何信息。除非目标类型是未命名类型，否则必须显式转换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个新的数据类型，结构体中有多个成员</span></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">linux <span class="keyword">string</span></span><br><span class="line">python <span class="keyword">string</span></span><br><span class="line">golang <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个新的数据类型，指向结构体的指针</span></span><br><span class="line"><span class="keyword">type</span> linux <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">*linux</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不能同时嵌入某一类型和其指针类型，因为它们名字相同。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> linux <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">*linux</span><br><span class="line">linux</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译错误：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\test.<span class="keyword">go</span>:<span class="number">6</span>:<span class="number">2</span>: duplicate field linux</span><br></pre></td></tr></table></figure></p><h3 id="struct初始化"><a href="#struct初始化" class="headerlink" title="struct初始化"></a>struct初始化</h3><p>有序初始化：结构体中的多个成员的值，必须一一对应。<br>无序初始化：结构体中的多个成员的值，无须一一对应，可初始化部分值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">    Linux  <span class="keyword">string</span></span><br><span class="line">    Python <span class="keyword">string</span></span><br><span class="line">    Golang <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有序初始化</span></span><br><span class="line"><span class="keyword">var</span> ordered = study&#123;<span class="string">"linux"</span>, <span class="string">"python"</span>, <span class="string">"golang"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无序初始化</span></span><br><span class="line"><span class="keyword">var</span> disordered = study&#123;Golang: <span class="string">"golang"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>结构体初始化方法有以下几种：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">int</span> </span><br><span class="line"><span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one study</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mian</span><span class="params">()</span></span>&#123;</span><br><span class="line">two ：= <span class="built_in">new</span>(study)<span class="comment">//同var two *study = new(study)</span></span><br><span class="line">three := study&#123;<span class="number">1</span>,<span class="string">"three"</span>&#125;</span><br><span class="line">four ：= study&#123;&#125;</span><br><span class="line">five := &amp;study&#123;&#125;</span><br><span class="line">six := &amp;study&#123;<span class="number">2</span>,<span class="string">"six"</span>&#125;<span class="comment">//同var six *study = &amp;study&#123;2,"six"&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(one,two,three,four,five,six)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <p>one three four返回study类型变量；two five six返回“*study”类型变量；若无初始化值，则默认为零值。</p></blockquote><h3 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h3><p>定义一个struct，定义的时候字段名与其类型一一对应，实际上Go语言支持只提供类型，而不写字段名的方式，也就是匿名字段，或称为嵌入字段。<br>当匿名字段是一个struct的时候，这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">//匿名字段</span></span><br><span class="line">salary <span class="keyword">int</span></span><br><span class="line"><span class="keyword">int</span>           <span class="comment">//用内置类型作为匿名字段</span></span><br><span class="line">addr   <span class="keyword">string</span> <span class="comment">//类似于重载</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">em1 := Employee&#123;</span><br><span class="line">Person&#123;<span class="string">"haha"</span>, <span class="number">18</span>, <span class="string">"北京"</span>&#125;,</span><br><span class="line"><span class="number">10</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="string">"首都"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(em1)</span><br><span class="line"><span class="keyword">var</span> em2 Person = em1.Person</span><br><span class="line">fmt.Println(em2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="struct与tag应用"><a href="#struct与tag应用" class="headerlink" title="struct与tag应用"></a>struct与tag应用</h3><p>声明struct结构的时候，在属性的右侧用小米点`括起来的内容叫标签（Tag），在转换成其其它数据格式的时候，会使用其中特定的字段作为键值。如转成json格式：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId <span class="keyword">int</span></span><br><span class="line">UserName <span class="keyword">string</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserTag <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId <span class="keyword">int</span> <span class="string">`json:"user_id" bson:"user_id"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`json:"user_name" bson:"user_name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">user := &amp;User&#123;UserId:<span class="number">1</span>,UserName:<span class="string">"haha"</span>&#125;</span><br><span class="line">json_user, _:= json.Marshal(user)</span><br><span class="line">fmt.Printf(<span class="string">"struct User echo : %v\n"</span>,<span class="keyword">string</span>(json_user))</span><br><span class="line"></span><br><span class="line">user_tag := &amp;UserTag&#123;UserId:<span class="number">1</span>,UserName:<span class="string">"haha"</span>&#125;</span><br><span class="line">json_user_tag, _:= json.Marshal(user_tag)</span><br><span class="line">fmt.Printf(<span class="string">"struct UserTag echo : %v\n"</span>,<span class="keyword">string</span>(json_user_tag))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> User echo : &#123;<span class="string">"UserId"</span>:<span class="number">1</span>,<span class="string">"UserName"</span>:<span class="string">"haha"</span>&#125;</span><br><span class="line"><span class="keyword">struct</span> UserTag echo : &#123;<span class="string">"user_id"</span>:<span class="number">1</span>,<span class="string">"user_name"</span>:<span class="string">"haha"</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <p>标签是struct类型的组成部分</p></blockquote><h2 id="Go语言常见语法错误"><a href="#Go语言常见语法错误" class="headerlink" title="Go语言常见语法错误"></a>Go语言常见语法错误</h2><ol>  <li>    <p>开大括号不能放在单独一行。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>存在未使用的变量。如果有未使用的局部变量，代码将编译失败。如果给未使用的变量分配了一个新的值，代码还是会编译失败。需要在某个地方使用这个变量，才能让编译器愉快的编译。</p>  </li>  <li>未使用的Imports。如果引入了一个包，而没有使用其中的任何函数、接口、结构体或者变量的话，代码将会编译失败。如果真的需要引入的包，可以添加一个“_”下划线标记符，来作为这个包的名字，从而避免编译失败。下划线标记符用于引入，但不使用。</li>  <li>“:=”简式声明仅可以在函数内部使用。</li>  <li>    <p>使用简式声明重复声明变量。不能在一个单独的声明中重复声明一个变量，但在多变量中这是允许的，其中至少要有一个新的声明变量。重复变量需要在相同的代码块内，否则将得到一个隐藏变量。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">one := <span class="number">0</span></span><br><span class="line">one := <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">one :=<span class="number">0</span></span><br><span class="line">one,two := <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">one,two = two,one</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>Go语言命名区分大小写</p>  </li>  <li>Go语言中分号分行。如果想将多行代码写在同一行，使用”;”分隔</li>  <li>Go语言中无效的分号。不可以写两个及两个以上连续的分号。</li>  <li>偶然的变量隐藏。短式变量声明的语法如此的方便，容易让人把它当成一个正常的分配操作。如果在一个新的代码块中犯了这个错误，将不会出现编译错误，但应用将不会做期望的事情。    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">x := <span class="number">1</span></span><br><span class="line">fmt.Println(x) <span class="comment">//1</span></span><br><span class="line">&#123;</span><br><span class="line">fmt.Println(x)<span class="comment">//1</span></span><br><span class="line">x :=<span class="number">2</span> </span><br><span class="line">fmt.Println(x)<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(x) <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>这是一个非常常见的陷阱，但又很难发现。<br>可以使用vet命令来发现一些这样的问题。默认情况下，vet不会执行这样的检查，需要设置-shadow参数：<br>命令：<code>go      tool vet -shadow your_file.go</code></p></blockquote><ol start="10">  <li>不使用显式类型，无法使用“nil”来初始化变量。nil标志符用于表示interface、函数、maps、slices和channels的“零值”。如果不指定变量的类型，编译器将无法编译代码，因为它猜不出具体的类型。</li>  <li>使用“nil” Slices and    Maps。在一个nil的slice中添加元素是没有问题的，但对一个map做同样的事将会生成一个运行时的panic。</li>  <li>Map的容量。map只有len操作，没有cap操作。</li>  <li>字符串不会为nil。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言切片&quot;&gt;&lt;a href=&quot;#Go语言切片&quot; class=&quot;headerlink&quot; title=&quot;Go语言切片&quot;&gt;&lt;/a&gt;Go语言切片&lt;/h2&gt;
&lt;p&gt;Go语言切片是对数组的抽象。数组的长度不可改变，在特定场景中不太使用，Go提供了一种灵活，功能强悍的内置类
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（三）</title>
    <link href="https://www.kapyan.top/posts/2830198955.html"/>
    <id>https://www.kapyan.top/posts/2830198955.html</id>
    <published>2019-02-21T00:44:12.000Z</published>
    <updated>2019-02-21T06:38:10.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言fmt包"><a href="#Go语言fmt包" class="headerlink" title="Go语言fmt包"></a>Go语言fmt包</h2><h3 id="格式化输出函数"><a href="#格式化输出函数" class="headerlink" title="格式化输出函数"></a>格式化输出函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure><p>Print采用默认格式将其参数格式化并写入标准输出。如果两个相邻的参数都不是字符串，会在它们的输出之间添加空格，返回写入的字节数和遇到的任何错误。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>,a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>,err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Printf根据format参数生成格式化的字符串并写入标准输出，返回写入的字节数和遇到的任何错误。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>,err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Println采用默认格式将其参数格式化并写入标准输出。总是会在相邻参数的输出之间添加空格并在输出结束后添加换行符，返回写入的字节数和遇到的任何错误。</p><h3 id="常用的格式化"><a href="#常用的格式化" class="headerlink" title="常用的格式化"></a>常用的格式化</h3><p>Go语言的标准输出流在打印到屏幕时有些参数跟别的语言（比如C#和Java）不同。</p><h4 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%v</td>      <td>以默认的方式打印变量的值</td>      <td>fmt.Printf(“%v”,site)</td>    </tr>    <tr>      <td>%+v</td>      <td>在打印结构体时，会添加字段名</td>      <td>fmt.Printf(“%+v”, site)</td>    </tr>    <tr>      <td>%#v</td>      <td>在打印结构体时，会添加字段名和包名</td>      <td>fmt.Printf(“%#v”, site)</td>    </tr>    <tr>      <td>%T</td>      <td>打印变量的类型</td>      <td>fmt.Printf(“%T”, site)</td>    </tr>    <tr>      <td>%%</td>      <td>字面上的百分号，并非值的占位符</td>      <td>fmt.Printf(“%%”)</td>    </tr>  </tbody></table><h4 id="布尔占位符"><a href="#布尔占位符" class="headerlink" title="布尔占位符"></a>布尔占位符</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%t</td>      <td>打印true或fasle</td>      <td>fmt.Printf(“%t”,true)</td>    </tr>  </tbody></table><h4 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%b</td>      <td>表示为二进制</td>      <td>fmt.Printf(“%b”,100)</td>    </tr>    <tr>      <td>%c</td>      <td>该值对应的Unicode码值</td>      <td>fmt.Printf(“%c”,0x4E2D)</td>    </tr>    <tr>      <td>%d</td>      <td>表示为十进制</td>      <td>fmt.Printf(“%d”,0x12)</td>    </tr>    <tr>      <td>%o</td>      <td>表示为八进制</td>      <td>fmt.Printf(“%d”, 10)</td>    </tr>    <tr>      <td>%q</td>      <td>该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示</td>      <td>fmt.Printf(“%q”, 0x4E2D)</td>    </tr>    <tr>      <td>%x</td>      <td>十六进制表示，字母形式为小写 a-f</td>      <td>fmt.Printf(“%x”, 13)</td>    </tr>    <tr>      <td>%X</td>      <td>十六进制表示，字母形式为大写 A-F</td>      <td>fmt.Printf(“%x”, 13)</td>    </tr>    <tr>      <td>%U</td>      <td>表示为Unicode格式：U+1234，等价于”U+%04X”</td>      <td>fmt.Printf(“%U”, 0x4E2D)</td>    </tr>  </tbody></table><h4 id="浮点数和复数的组成部分（实部和虚部）"><a href="#浮点数和复数的组成部分（实部和虚部）" class="headerlink" title="浮点数和复数的组成部分（实部和虚部）"></a>浮点数和复数的组成部分（实部和虚部）</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%e</td>      <td>(=%.6e) 6位小数点科学计数法，例如 -1234.456e+78</td>      <td>fmt.Printf(“%e”, 10.2)</td>    </tr>    <tr>      <td>%E</td>      <td>科学计数法，如-1234.456E+78</td>      <td>fmt.Printf(“%e”, 10.2)</td>    </tr>    <tr>      <td>%f</td>      <td>(=%.6f) 6位小数点有小数点而无指数，例如 123.456</td>      <td>fmt.Printf(“%f”, 10.2)</td>    </tr>    <tr>      <td>%g</td>      <td>根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td>      <td>fmt.Printf(“%g”, 10.20)</td>    </tr>    <tr>      <td>%G</td>      <td>根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td>      <td>fmt.Printf(“%G”, 10.20+2i)</td>    </tr>  </tbody></table><h4 id="字符串与字节切片"><a href="#字符串与字节切片" class="headerlink" title="字符串与字节切片"></a>字符串与字节切片</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%s</td>      <td>输出字符串表示（string类型或[]byte）</td>      <td>fmt.Printf(“%s”, []byte(“haha”))</td>    </tr>    <tr>      <td>%10s</td>      <td>输出字符串最小宽度为10(右对齐)</td>      <td>fmt.Printf(“%10s”, “haha”)</td>    </tr>    <tr>      <td>%-10s</td>      <td>输出字符串最小宽度为10(左对齐)</td>      <td>fmt.Printf(“%-10s”, “haha”)</td>    </tr>    <tr>      <td>%.5s</td>      <td>输出字符串最大宽度为5</td>      <td>fmt.Printf(“%.5s”, “haha”)</td>    </tr>    <tr>      <td>%5.10s</td>      <td>输出字符串最小宽度为5，最大宽度为10</td>      <td>fmt.Printf(“%5.10s”, “haha”)</td>    </tr>    <tr>      <td>%-5.10s</td>      <td>输出字符串最小宽度为5，最大宽度为10(左对齐)</td>      <td>fmt.Printf(“%-5.10s”, “haha”)</td>    </tr>    <tr>      <td>%5.3s</td>      <td>输出字符串宽度为5,如果原字符串宽度大于3,则截断</td>      <td>fmt.Printf(“%5.3s”, “haha”)</td>    </tr>    <tr>      <td>%010s</td>      <td>如果宽度小于10，就会在字符串前面补零</td>      <td>fmt.Printf(“%010s”, “haha”)</td>    </tr>    <tr>      <td>%q</td>      <td>双引号围绕的字符串，由Go语法安全地转义</td>      <td>fmt.Printf(“%q”, “haha”)</td>    </tr>    <tr>      <td>%x</td>      <td>十六进制，小写字母，每字节两个字符</td>      <td>fmt.Printf(“%x”, “haha”)</td>    </tr>    <tr>      <td>%X</td>      <td>十六进制，大写字母，每字节两个字符</td>      <td>fmt.Printf(“%X”, “haha”)</td>    </tr>  </tbody></table><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%p</td>      <td>十六进制表示，前缀0x</td>      <td>fmt.Printf(“%p”,&amp;site)</td>    </tr>    <tr>      <td>%#p</td>      <td>不带前缀0x</td>      <td>fmt.Printf(“%#p”,&amp;site)</td>    </tr>  </tbody></table><h2 id="Go语言字符串"><a href="#Go语言字符串" class="headerlink" title="Go语言字符串"></a>Go语言字符串</h2><p>Go语言的字符串是一个用UTF-8编码的变宽字符序列，它的每一个字符都用一个或多个字节表示。<br>在Go语言中，没有字符类型，字符类型是rune类型，rune是int32的别称。可用[]byte()获取字节，使用[]rune()获取字符，可对中文进行转换。</p><h3 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"Go语言字符串\n不能跨行赋值"</span><span class="comment">//双引号，用来创建可解析的字符串字面量（支持转义，但不能用来引用多行）</span></span><br><span class="line">str := <span class="string">`Go原生原格式字符串</span></span><br><span class="line"><span class="string">可以跨行`</span><span class="comment">//反引号，用来创建原生的字符串字面量，这些字符串可能由多行组成（不支持任何转义序列），原生的字符串字面量多用于书写多行消息、HTML以及正则表达式</span></span><br></pre></td></tr></table></figure><font color="red">注意:单引号不能用于定义字符串，单引号用于定义Go语言的一个特殊类型rune，类似其他语言的byte但又不完全一样，是指码点字面量（Unicode  code point），不做任何转义的原始内容。</font><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"hello"</span> + <span class="string">"world"</span></span><br></pre></td></tr></table></figure><p>golang里字符串都是不可变的，每次运算都会产生一个新的字符串，所以会产生很多临时无用的字符串，不仅没有用，还会给gc带来额外的负担，所以性能比较差。<font color="red" size="2">(注意：连接跨行字符串时，”+”必须在上一行末尾，否则导致编译错误)</font><br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str := fmt.Sprintf(<span class="string">"%s,%s"</span>,<span class="string">"hello"</span>,<span class="string">"world"</span>)</span><br></pre></td></tr></table></figure></p><p>内部使用[]byte实现，不像直接运算符这种会产生很多临时的字符串，但是内部逻辑比较复杂，有很多额外的判断，还用到了interface，所以性能也不是很好。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str := strings.Join([]<span class="keyword">string</span>&#123;<span class="string">"hello"</span>,<span class="string">"world"</span>&#125;,<span class="string">","</span>)</span><br></pre></td></tr></table></figure></p><p>join会先根据字符串数组的内容，计算出一个拼接之后的长度，然后申请对应大小的内存，一个一个字符串填入，在已有一个数组的情况下，这种效率会很高，但是本来没有，去构造这个数据的代价也不小。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bytes"</span></span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">buffer.WriteString(<span class="string">"hello"</span>)</span><br><span class="line">buffer.WriteString(<span class="string">","</span>)</span><br><span class="line">buffer.WriteString(<span class="string">"world"</span>)</span><br><span class="line">str := buffer.String()</span><br></pre></td></tr></table></figure></p><p>这个比较理想,可以当成可变字符使用，对内存的增长也有优化。</p><blockquote>  <p>总结：</p>  <ol>    <li>在已有字符串数组的场合，使用strings.Join()能有比较好的性能；</li>    <li>在一些性能要求比较高的场合，尽量使用buffer.WriteString() 以获得更好的性能；</li>    <li>“+” 运算符在较少字符串连接的场景下性能最好，而且代码更简短清晰，可读性更好；</li>    <li>如果需要拼接的不仅仅是字符串，还有数字之类的其他需求的话，可以考虑 fmt.Sprintf()。</li>  </ol></blockquote><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>1.将字符串转换为[]rune后调用len函数进行统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := <span class="built_in">len</span>([]<span class="keyword">rune</span>(str))</span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <p>在golang中，如果字符串出现中文字符不能直接调用len函数来统计字符串字符长度，这是因为在Go中，字符串是以UTF-8为格式进行存储的，在字符串上调用len函数，取得的是字符串包含的byte的个数。</p></blockquote><p>2.使用bytes.Count()统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := bytes.Count([]<span class="keyword">byte</span>(str), <span class="literal">nil</span>) - <span class="number">1</span></span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算字节切片sep在字节切片s中非重叠显示的个数，如果 sep 为 nil，则返回 s 中的字符个数 + 1。</p><p>3.使用strings.Count()统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := strings.Count(str, <span class="string">""</span>) - <span class="number">1</span></span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>判断字符sep在字符串s中出现的次数，没有找到则返回-1，如果为空字符串(“”)则返回字符串的长度+1。</p><p>4.使用 utf8.RuneCountInString() 统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := utf8.RuneCountInString(str)</span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回 s 字符串长度，可以正常解析中文，一个中文被当做一个字符。</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>使用索引号“[]”返回子串。返回的字符串依然指向原字节数组，仅修改了指针和长度属性。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello, world"</span></span><br><span class="line">    s1 := str[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">    s2 := str[<span class="number">7</span>:<span class="number">13</span>]</span><br><span class="line">    fmt.Println(s1, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>修改字符串，可先将其转换成 []rune 或 []byte，完成后再转换为string。无论哪种转换，都会重新分配内存，并复制字节数组。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">"hello world"</span></span><br><span class="line">    s1 := []<span class="keyword">byte</span>(str1)</span><br><span class="line">    s1[<span class="number">0</span>] = <span class="string">'H'</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(s1))</span><br><span class="line"></span><br><span class="line">    str2 := <span class="string">"鸟宿池边树，僧推月下门。"</span></span><br><span class="line">    s2 := []<span class="keyword">rune</span>(str2)</span><br><span class="line">    s2[<span class="number">7</span>] = <span class="string">'敲'</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(s2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello world</span><br><span class="line">鸟宿池边树，僧敲月下门。</span><br></pre></td></tr></table></figure></p><h2 id="Go语言string包"><a href="#Go语言string包" class="headerlink" title="Go语言string包"></a>Go语言string包</h2><p>strings包实现了用于操作字符的简单函数。</p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>判断给定字符串s中是否包含子串substr,找到返回true, 找不到返回false。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"包含子串返回："</span>, strings.Contains(<span class="string">"hello world"</span>, <span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在字符串s中查找sep所在的位置,返回位置值,找不到返回-1<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"存在返回第一个匹配字符的位置："</span>, strings.Index(<span class="string">"hello"</span>, <span class="string">"o"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"不存在返回："</span>, strings.Index(<span class="string">"hello"</span>, <span class="string">"world"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"中文字符串存在返回："</span>, strings.Index(<span class="string">"呜呼哈哈"</span>, <span class="string">"哈哈"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">存在返回第一个匹配字符的位置： <span class="number">4</span></span><br><span class="line">不存在返回： <span class="number">-1</span></span><br><span class="line">中文字符串存在返回： <span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>统计给定子串sep的出现次数, sep为空时, 返回字符串的长度 + 1<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"子字符串出现次数："</span>, strings.Count(<span class="string">"hello ooo"</span>, <span class="string">"o"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"子字符串为空时, 返回："</span>, strings.Count(<span class="string">"hello"</span>, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子字符串出现次数： <span class="number">4</span></span><br><span class="line">子字符串为空时, 返回： <span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="重复操作"><a href="#重复操作" class="headerlink" title="重复操作"></a>重复操作</h3><p>重复s字符串count次，最后返回新生成的重复的字符串<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(strings.Repeat(<span class="string">"嘀嗒"</span>,<span class="number">4</span>),<span class="string">"时针它不停在转动"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">嘀嗒嘀嗒嘀嗒嘀嗒 时针它不停在转动</span><br></pre></td></tr></table></figure></p><h3 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h3><p>在s字符串中，把old字符串替换为new字符串，n表示替换的次数，如果n&lt;0会替换所有old子串。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Replace(<span class="string">"luck luck luck"</span>, <span class="string">"k"</span>, <span class="string">"ky"</span>, <span class="number">2</span>))</span><br><span class="line">    fmt.Println(strings.Replace(<span class="string">"luck luck luck"</span>, <span class="string">"k"</span>, <span class="string">"ky"</span>, <span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lucky lucky luck</span><br><span class="line">lucky lucky lucky</span><br></pre></td></tr></table></figure></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除在s字符串的头部和尾部中由cutset指定的字符，并返回删除后的字符串<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Trim(<span class="string">"   hello   "</span>, <span class="string">" "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure></p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定字符串转换为英文标题的首字母大写的格式（不能正确处理unicode标点）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Title</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//返回将所有字母都转为对应的小写版本的拷贝</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">ToLower</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//返回将所有字母都转为对应的大写版本的拷贝</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">ToUpper</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure><h3 id="字符串前后缀"><a href="#字符串前后缀" class="headerlink" title="字符串前后缀"></a>字符串前后缀</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断字符串是否包含前缀prefix，大小写敏感</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">HasPrefix</span><span class="params">(s,prefix <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//判断<span class="title">s</span>是否有后缀字符串<span class="title">suffix</span>，大小写敏感</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">HasSuffix</span><span class="params">(s,suffix <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>用去掉s中出现的sep的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s,sep <span class="keyword">string</span>)</span> []<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>返回将字符串按照空白（Unicode.IsSpace确定，可以是一个到多个连续的空白字符）分割的多个字符串。如果字符串全部是空白或者空字符串的话，会返回空切片。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言数组"><a href="#Go语言数组" class="headerlink" title="Go语言数组"></a>Go语言数组</h2><p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型，如：整形、字符串或自定义类型。<br>在go中数组是固定长度的数据类型，它包含相同类型的连续的元素，这些元素可以是内建类型，像数字和字符串，也可以是结构类型，元素可以通过唯一的索引值访问，从0开始。<br>数组是很有价值的数据结构，因为它的内存分配是连续的，内存连续意味着可以让它在CPU缓存中待更久，所以迭代数组和移动元素都会非常迅速。</p><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><p>1.通过指定数据类型和元素个数（数组长度）来声明数组。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">//声明一个长度为5的整数数组</span></span><br><span class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">//声明一个长度为5的整数数组并初始化</span></span><br></pre></td></tr></table></figure></p><p>2.一种快速创建和初始化数组的方法是使用数组字面值。数组字面值允许我们声明我们需要的元素个数并指定数据类型。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array := [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Java"</span>, <span class="string">"Golang"</span>, <span class="string">"DBA"</span>&#125;<span class="comment">//声明一个长度为5的字符串数组并初始化每个元素</span></span><br></pre></td></tr></table></figure></p><p>3.如果把长度写成…，go编译器将会根据元素来推导出长度<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment">//通过初始化值的个数来推导出数组容量</span></span><br></pre></td></tr></table></figure></p><p>4.如果知道想要数组的长度，但是希望对指定位置元素初始化。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arry := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">3</span>:<span class="number">3</span>&#125;<span class="comment">//声明一个长度为5的整数数组，为索引为1和3的位置指定元素初始化，剩余元素为该元素类型的默认值</span></span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意:当一个数组被声明时，它里面包含的每个元素都会被初始化为该元素类型的默认值。一旦数组被声明了，那么它的数据类型和长度都不能再被改变。如果需要更多的元素，那么只能创建一个想要长度的新的数组，然后把原有数组的元素拷贝过去。</font><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><p>使用内置函数len()和cap()返回数组长度和数组容量。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">array := [<span class="number">2</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"数组长度：%d，数组容量：%d\n"</span>, <span class="built_in">len</span>(array), <span class="built_in">cap</span>(array))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组长度：<span class="number">2</span>，数组容量：<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>使用[]操作符来访问数组元素：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变索引为2的元素的值：</span></span><br><span class="line">array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">array[<span class="number">2</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意：数组可以通过下标进行访问，数组下标是从0开始，最后一个元素下标是：len(array)-1。如果下标在数组合法范围之外，则触发访问越界。</font><br>数组赋值操作，一个数组可以被赋值给任意相同类型的数组：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">string</span></span><br><span class="line">arr2 := [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Java"</span>, <span class="string">"Golang"</span>, <span class="string">"DBA"</span>&#125;</span><br><span class="line">arr1 = arr2</span><br></pre></td></tr></table></figure><br><br><font color="red" size="2">注意：数组的类型同时包括数组的长度和可以被存储的元素类型，数组类型完全相同才可以互相赋值。</font><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>数组总是一维的，但是可以组合成多维的。多维数组通常用于有父子关系的数据或者是坐标系数据：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array [<span class="number">3</span>][<span class="number">6</span>]<span class="keyword">int</span>  <span class="comment">//声明一个二维数组</span></span><br><span class="line">array := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">10</span>, <span class="number">11</span>&#125;, &#123;<span class="number">20</span>, <span class="number">21</span>&#125;, &#123;<span class="number">30</span>, <span class="number">31</span>&#125;, &#123;<span class="number">40</span>, <span class="number">41</span>&#125;&#125;<span class="comment">//使用数组字面值声明并初始化</span></span><br><span class="line">array := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: &#123;<span class="number">20</span>, <span class="number">21</span>&#125;, <span class="number">3</span>: &#123;<span class="number">40</span>, <span class="number">41</span>&#125;&#125;<span class="comment">//指定外部数组索引位置初始化</span></span><br><span class="line">array := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="number">3</span>: &#123;<span class="number">1</span>: <span class="number">41</span>&#125;&#125; <span class="comment">//同时指定内外部数组索引位置初始化</span></span><br></pre></td></tr></table></figure></p><p>使用内置函数len()和cap返回多维数组长度和多维数组容量。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    array := [<span class="number">3</span>][<span class="number">6</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    fmt.Printf(<span class="string">"数组长度：%d，数组容量：%d\n"</span>, <span class="built_in">len</span>(array), <span class="built_in">cap</span>(array))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组长度：<span class="number">3</span>，数组容量：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言类型转换"><a href="#Go语言类型转换" class="headerlink" title="Go语言类型转换"></a>Go语言类型转换</h2><p>类型转换用于将一种数据类型的变量转换为另一种类型的变量。<br>Go语言类型转换基本格式如下：<br>表达式T(v)将值v转换为类型T。</p><p>Go语言各种类型转换及函数的高级用法：<br>strconv包实现了基本数据类型和其字符串表示的相互转换。</p><h3 id="字符串转字节"><a href="#字符串转字节" class="headerlink" title="字符串转字节"></a>字符串转字节</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">    result := []<span class="keyword">byte</span>(str)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32位整型转字节"><a href="#32位整型转字节" class="headerlink" title="32位整型转字节"></a>32位整型转字节</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int32</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    bytesBuffer := bytes.NewBuffer([]<span class="keyword">byte</span>&#123;&#125;)</span><br><span class="line">    binary.Write(bytesBuffer, binary.BigEndian, x)</span><br><span class="line">    result := bytesBuffer.Bytes()</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节转字符串<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b []<span class="keyword">byte</span> = []<span class="keyword">byte</span>&#123;<span class="number">111</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">111</span>, <span class="number">121</span>&#125;</span><br><span class="line">    result := <span class="keyword">string</span>(b)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="整型转字符串"><a href="#整型转字符串" class="headerlink" title="整型转字符串"></a>整型转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    result := strconv.Itoa(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FormatInt 将 int 型整数 i 转换为字符串形式<br>base：进位制（2 进制到 36 进制） 大于 10 进制的数，返回值使用小写字母  ‘a’ 到 ‘z’<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatInt</span><span class="params">(i <span class="keyword">int64</span>, base <span class="keyword">int</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>Itoa 相当于 FormatInt(i, 10)</p><h3 id="64位整形转字符串"><a href="#64位整形转字符串" class="headerlink" title="64位整形转字符串"></a>64位整形转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int64</span></span><br><span class="line">    i = <span class="number">0x100</span></span><br><span class="line">    result := strconv.FormatInt(i, <span class="number">10</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="布尔值转字符串"><a href="#布尔值转字符串" class="headerlink" title="布尔值转字符串"></a>布尔值转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := strconv.FormatBool(<span class="literal">true</span>)</span><br><span class="line">    f := strconv.FormatBool(<span class="literal">false</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"t is %v , t type is %v\n"</span>, t, reflect.TypeOf(t))</span><br><span class="line">    fmt.Printf(<span class="string">"f is %v , f type is %v\n"</span>, f, reflect.TypeOf(f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数转字符串"><a href="#浮点数转字符串" class="headerlink" title="浮点数转字符串"></a>浮点数转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">strconv.FormatFloat(f,fmt,prec,bitSize)</span><br><span class="line">f：要转换的浮点数 </span><br><span class="line">fmt：格式标记（b、e、E、,f、g、G） </span><br><span class="line">prec：精度（数字部分的长度，不包括指数部分） </span><br><span class="line">bitSize：指定浮点类型（<span class="number">32</span>:<span class="keyword">float32</span>、<span class="number">64</span>:<span class="keyword">float64</span>）</span><br><span class="line"></span><br><span class="line">格式标记： </span><br><span class="line">‘b’ (-ddddp±ddd，二进制指数) </span><br><span class="line">‘e’ (-d.dddde±dd，十进制指数) </span><br><span class="line">‘E’ (-d.ddddE±dd，十进制指数) </span><br><span class="line">‘f’ (-ddd.dddd，没有指数) </span><br><span class="line">‘g’ (‘e’:大指数，’f’:其它情况) </span><br><span class="line">‘G’ (‘E’:大指数，’f’:其它情况)</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := <span class="number">100.12345678901234567890123456789</span></span><br><span class="line">    result := strconv.FormatFloat(f, <span class="string">'e'</span>, <span class="number">30</span>, <span class="number">32</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="int转int64"><a href="#int转int64" class="headerlink" title="int转int64"></a>int转int64</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    result := <span class="keyword">int64</span>(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转整形"><a href="#字符串转整形" class="headerlink" title="字符串转整形"></a>字符串转整形</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">    str = <span class="string">"100"</span></span><br><span class="line">    result, _ := strconv.Atoi(str)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节转32位整形"><a href="#字节转32位整形" class="headerlink" title="字节转32位整形"></a>字节转32位整形</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := []<span class="keyword">byte</span>&#123;<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0xe8</span>&#125;</span><br><span class="line">    bytesBuffer := bytes.NewBuffer(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int32</span></span><br><span class="line">    binary.Read(bytesBuffer, binary.BigEndian, &amp;result)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br></pre></td></tr></table></figure><h3 id="float32转float64"><a href="#float32转float64" class="headerlink" title="float32转float64"></a>float32转float64</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">float32</span> = <span class="number">100</span></span><br><span class="line">    result := <span class="keyword">float64</span>(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整型转浮点型"><a href="#整型转浮点型" class="headerlink" title="整型转浮点型"></a>整型转浮点型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    result := <span class="keyword">float32</span>(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转浮点数"><a href="#字符串转浮点数" class="headerlink" title="字符串转浮点数"></a>字符串转浮点数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">strconv.ParseFloat(str,bitSize)</span><br><span class="line">str：要转换的字符串</span><br><span class="line">bitSize：指定浮点类型（<span class="number">32</span>:<span class="keyword">float32</span>、<span class="number">64</span>:<span class="keyword">float64</span>）</span><br><span class="line">如果 str 是合法的格式，而且接近一个浮点值，</span><br><span class="line">则返回浮点数的四舍五入值（依据 IEEE754 的四舍五入标准）</span><br><span class="line">如果 str 不是合法的格式，则返回“语法错误”</span><br><span class="line">如果转换结果超出 bitSize 范围，则返回“超出范围”</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"0.12345678901234567890"</span></span><br><span class="line">    result, _ := strconv.ParseFloat(str, <span class="number">32</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转布尔值"><a href="#字符串转布尔值" class="headerlink" title="字符串转布尔值"></a>字符串转布尔值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ParseBool 将字符串转换为布尔值 </span><br><span class="line">它接受真值：<span class="number">1</span>, t, T, TRUE, <span class="literal">true</span>, True </span><br><span class="line">它接受假值：<span class="number">0</span>, f, F, FALSE, <span class="literal">false</span>, False. </span><br><span class="line">其它任何值都返回一个错误</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result, _ := strconv.ParseBool(<span class="string">"1"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Go语言不能将其他类型当bool值使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言fmt包&quot;&gt;&lt;a href=&quot;#Go语言fmt包&quot; class=&quot;headerlink&quot; title=&quot;Go语言fmt包&quot;&gt;&lt;/a&gt;Go语言fmt包&lt;/h2&gt;
&lt;h3 id=&quot;格式化输出函数&quot;&gt;&lt;a href=&quot;#格式化输出函数&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（二）</title>
    <link href="https://www.kapyan.top/posts/3853503483.html"/>
    <id>https://www.kapyan.top/posts/3853503483.html</id>
    <published>2019-02-20T06:36:42.000Z</published>
    <updated>2019-02-20T09:29:36.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言变量"><a href="#Go语言变量" class="headerlink" title="Go语言变量"></a>Go语言变量</h2><p>变量来源于数学，是计算机语言中能储存计算结果或能标识值抽象概念。变量可以通过变量名访问。<br>Go语言是静态类型语言，不能在运行期间改变变量类型。使用关键字var定义变量，自动初始化为零值。如果提供初始化值，可省略变量类型，由编译器自动推断。<br>Go语言中变量可以在三个地方声明：</p><ol>  <li>函数外定义的变量称为全局变量：在函数体外声明，可以在整个包甚至外部包（被导出后）使用</li>  <li>函数内定义的变量称为局部变量：在函数体内部声明，作用域只在函数体内，参数和返回值变量也是局部变量</li>  <li>函数定义中的变量称为形式参数：会作为函数的局部变量来使用</li></ol><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span><span class="comment">//指定变量类型，声明后若不赋值，使用默认值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span><span class="comment">//根据值自行判定变量类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> class <span class="keyword">string</span> = <span class="string">"linux"</span>  <span class="comment">//变量声明并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一次声明多个变量</span></span><br><span class="line"><span class="keyword">var</span>  Mon,Tues,Wed,Thur,Fri,Sat,Sun, <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    Monday    <span class="keyword">int</span></span><br><span class="line">    Tuesday   <span class="keyword">int</span></span><br><span class="line">    Wednesday <span class="keyword">int</span></span><br><span class="line">    Thursday  <span class="keyword">int</span></span><br><span class="line">    Friday    <span class="keyword">int</span></span><br><span class="line">    Saturday  <span class="keyword">int</span></span><br><span class="line">    Sunday    <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//短变量声明，在函数内部，可以使用更简略的":="方式定义变量。":="简洁赋值语句在明确类型的地方可以用于替代var定义,":="结构不能在函数外使用</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">name := <span class="string">"haha"</span></span><br><span class="line">age,class :=<span class="number">18</span>,<span class="string">"linux"</span></span><br><span class="line">_, _, _ = name,age,class</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//形式参数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="params">(c init)</span></span>&#123;</span><br><span class="line">c = a + b</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级"></a>变量优先级</h3><p>Go语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先使用。<br>多变量赋值时，先计算所有相关值，然后再从左到右依次赋值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">data, i := [<span class="number">4</span>]<span class="keyword">string</span>&#123;<span class="string">"course"</span>, <span class="string">"Python"</span>, <span class="string">"Linux"</span>, <span class="string">"Golang"</span>&#125;, <span class="number">0</span></span><br><span class="line">i, data[i] = <span class="number">2</span>,<span class="string">"haha"</span></span><br><span class="line">fmt.Printf(<span class="string">"i：%v，data：%v\n"</span>, i, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果:<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i:<span class="number">2</span>,data:[haha Python Linux Golang]</span><br></pre></td></tr></table></figure></p><h2 id="Go语言常量"><a href="#Go语言常量" class="headerlink" title="Go语言常量"></a>Go语言常量</h2><p>常量是一个简单值的标识符，在程序运行时，永远是只读，不能修改。<br>使用const关键字定义常量。常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">"haha"</span> <span class="comment">//显式类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span> <span class="comment">//隐式类型定义，一个未指定类型的常量由上下文来决定其类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一次性定义多个常量</span></span><br><span class="line"><span class="keyword">const</span> Mon, Tues, Wed, Thur, Fri, Sat, Sun = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    name = <span class="string">"haha"</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//常量可以用len(),cap()，unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不通过</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="string">"abc"</span></span><br><span class="line">b = <span class="built_in">len</span>(a)</span><br><span class="line">c = unsafe.Sizeof(b)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="常量技巧"><a href="#常量技巧" class="headerlink" title="常量技巧"></a>常量技巧</h3><p>未使用的局部常量不会引发编译错误。<br>在常量组中，如不提供类型和初始化值，那么视作与上一个常量相同。</p><h3 id="特殊常量"><a href="#特殊常量" class="headerlink" title="特殊常量"></a>特殊常量</h3><p>特殊常量，iota,可以认为是一个可以被编译器修改的常量。<br>在每一个const关键字出现时，被重置为0，然后在下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1。</p><p>关键字iota定义常量组中从0开始按行计数的自增枚举值。实例如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>在同一常量组中，可以提供多个iota，他们各自增长。实例如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">A1,B1 = <span class="literal">iota</span>,<span class="literal">iota</span> &lt;&lt;<span class="number">10</span></span><br><span class="line">A2,B2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(A1,B1,A2,B2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1024</span></span><br></pre></td></tr></table></figure></p><p>如果iota自增被打断，须显式恢复。实例如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sun = <span class="literal">iota</span></span><br><span class="line">    Mon</span><br><span class="line">    Tues</span><br><span class="line">    Wed = <span class="string">"Wednesday"</span></span><br><span class="line">    Thur</span><br><span class="line">    Fri = <span class="literal">iota</span></span><br><span class="line">    Sat</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sun, Mon, Tues, Wed, Thur, Fri, Sat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> Wednesday Wednesday <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言包和文件"><a href="#Go语言包和文件" class="headerlink" title="Go语言包和文件"></a>Go语言包和文件</h2><h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><p>Go语言工作空间：编译工具对源码目录有严格要求，每个工作空间（workspace）必须由bin、pkg、src三个目录组成。</p><blockquote>  <p>src:项目源码目录，里面每一个子目录，就是一个包，包内是Go语言的源码文件。<br>pkg：Go语言编译的.a中间文件存放目录，可自动生成。<br>bin：Go语言编译可执行文件存放目录，可自动生成。</p></blockquote><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>包是结构化代码的一种方式：每个程序都由包的概念组成，可以使用自身的包或者从其他包中导入内容。<br>如同其他一些编程语言中的类库或命名空间的概念，每个Go文件都属于且仅属于一个包。一个包可以由许多以.go为扩展名的源文件组成，因此文件名和包名一般来说都不是相同的。<br>包声明“package  + 包名”，必须在源文件中非注释的第一行指明这个文件属于哪个包。如：package main。package  main表示一个可独立执行的程序，每个Go应用程序都包含一个名为main的包。<br>同一个包（package）下面，可以有非常多的不同文件，只要每个文件的头部都有相同name就可以。文件夹名称和可以和这个package名称不一致。</p><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>在Go的安装文件里包含了一些可以直接使用的包，即标准库。<br>Go语言标准库包，覆盖了几乎所有的基础库，提供了丰富广泛的功能特性。<br>标准库的内容还可能继续增加，可以通过在线查阅库API或使用godoc（包含在Go发布包中）来获取最新信息及全面了解每个包所具备的功能。</p><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><p>通过“go get + 完整包名”保存下载第三方库。<br>在执行go get命令之前，确保配置了环境变量GOPATH，并且安装了git。</p><h3 id="导出包"><a href="#导出包" class="headerlink" title="导出包"></a>导出包</h3><p>在Go语言中根据首字母的大小写来确定可以访问的权限。如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用。该规则适用于全局变量、全局常量、类型、结构字段、函数、方法等。<br>可以简单的理解成，首字母大写是公有的，首字母小写是私有的。<br>在导入包之后，只能访问包所导出的名字，任何未导出的名字是不能被包外的代码访问的。</p><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>使用包成员前，必须先用import关键字导入，但不能形成导入循环。<br>import用法：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span><span class="comment">//导入系统包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./test"</span><span class="comment">//相对路径导入包，导入同一目录下test包中的内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"test/app"</span><span class="comment">//绝对路径导入包，导入gopath/sr/tset/app包中的内容</span></span><br><span class="line"><span class="keyword">import</span> f <span class="string">"fmt"</span><span class="comment">//导入包并启用别名为f</span></span><br><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span><span class="comment">//将fmt启用别名"."，这样就可以直接使用其内容，而不用在添加fmt，如fmt.Println可以直接写成Println</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"fmt"</span><span class="comment">//表示不使用该包，而是只是使用该包的init函数，并不显示的使用该包的其他内容。这种形式的import，当import时就执行了fmt包中的init函数，而不能够使用该包的其他函数</span></span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意:未使用的导入包，会被编译器视为错误（不包括”import _“）。</font><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><p>Go语言源码文件编码格式必须是UTF-8格式，否则会导致编译器出错。</p><h2 id="结束语句"><a href="#结束语句" class="headerlink" title="结束语句"></a>结束语句</h2><p>在Go程序中，一行代表一个语句结束。每个语句不需要像其他语言一样以分号“;”结尾，因为这些工作都将由Go编译器自动完成。<br>如果打算将多个语句写在同一行，他们则必须使用“;”人为区分。</p><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><p>注释不会被编译，每一个包应该有相关注释。<br>Go语言代码注释支持 “//“、”/**/“ 两种注释方式，不能嵌套。<br>单行注释是最常见的注释形式，你可以在任何地方使用以  // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。</p><h2 id="Go程序启动执行顺序"><a href="#Go程序启动执行顺序" class="headerlink" title="Go程序启动执行顺序"></a>Go程序启动执行顺序</h2><p>按顺序导入所有被main包引用的其他包，然后在每个包中执行如下流程：<br>如果该包又导入了其他的包，则从第一步开始递归执行，但是每个包只会被导入一次。<br>然后以相反的顺序在每个包中初始化常量和变量，如果该包含后init函数的话，则调用该函数。<br>在完成这一切之后，main也执行同样的过程，最后调用main函数开始执行程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言变量&quot;&gt;&lt;a href=&quot;#Go语言变量&quot; class=&quot;headerlink&quot; title=&quot;Go语言变量&quot;&gt;&lt;/a&gt;Go语言变量&lt;/h2&gt;
&lt;p&gt;变量来源于数学，是计算机语言中能储存计算结果或能标识值抽象概念。变量可以通过变量名访问。&lt;br&gt;Go语言是
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（一）</title>
    <link href="https://www.kapyan.top/posts/3585681187.html"/>
    <id>https://www.kapyan.top/posts/3585681187.html</id>
    <published>2019-02-20T02:17:25.000Z</published>
    <updated>2019-02-20T06:36:16.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言简介"><a href="#Go语言简介" class="headerlink" title="Go语言简介"></a>Go语言简介</h2><p>Go语言是谷歌2009发布的第二款开源编程语言。<br>Go语言专门针对多处理器系统应用程序的编程进行了优化，使用Go编译的程序可以媲美C或C++代码的速度，而且更加安全、支持并行进程。</p><h2 id="Go语言主要特征"><a href="#Go语言主要特征" class="headerlink" title="Go语言主要特征"></a>Go语言主要特征</h2><ol>  <li>可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了。</li>  <li>静态类型语言，但是有动态语言的感觉，静态类型的语言就是可以在编译的时候检查出来隐藏的大多数问题，动态语言的感觉就是有很多的包可以使用，写起来的效率很高。</li>  <li>语言层面支持并发，这个就是Go语言最大的特色，可以充分的利用多核，很容易的使用并发。</li>  <li>内置runtime，支持垃圾回收，这属于动态语言的特性之一吧，虽然目前来说GC不算完美，但是足以应付我们所能遇到的大多数情况，特别是Go1.1之后的GC。</li>  <li>简单易学，Go语言的作者都有C的基因，那么Go自然而然就有了C的基因，那么Go关键字是25个，但是表达能力很强大，几乎支持大多数你在其他语言见过的特性：继承、重载、对象等。</li>  <li>丰富的标准库，Go目前已经内置了大量的库，特别是网络库非常强大。</li>  <li>内置强大的工具，Go语言里面内置了很多工具链，最好的应该是gofmt工具，自动化格式化代码，能够让团队review变得如此的简单，代码格式一模一样，想不一样都很困难。</li>  <li>跨平台编译，如果你写的Go代码不包含cgo，那么就可以做到window系统编译linux的应用，如何做到的呢？Go引用了plan9的代码，这就是不依赖系统的信息。</li>  <li>内嵌C语言支持，前面说了作者是C语言的作者，所以Go语言里面也可以直接包含C语言代码，利用现有的丰富的C语言库。</li></ol><h2 id="Go语言标准命令解释"><a href="#Go语言标准命令解释" class="headerlink" title="Go语言标准命令解释"></a>Go语言标准命令解释</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> env #用于打印GO语言的环境信息</span><br><span class="line"><span class="keyword">go</span> run#命令可以编译并运行命令源码文件</span><br><span class="line"><span class="keyword">go</span> get#可以根据要求和实际情况从互联网下载或更新指定的代码包及其依赖包，并对他们进行编译和安装</span><br><span class="line"><span class="keyword">go</span> build #用于编译指定的源码文件或代码包以及它们的依赖包</span><br><span class="line"><span class="keyword">go</span> install#用于编译并安装指定的代码包及它们的依赖包</span><br><span class="line"><span class="keyword">go</span> clean #命令会删除掉执行其他命令时产生的一些文件和目录</span><br><span class="line"><span class="keyword">go</span> doc#命令可以打印附于Go语言程序实体上的文档，我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的</span><br><span class="line"><span class="keyword">go</span> test#命令用于对Go语言编写的程序进行测试</span><br><span class="line"><span class="keyword">go</span> list#命令的作用是列出指定的代码包的信息</span><br><span class="line"><span class="keyword">go</span> fix #会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码</span><br><span class="line"><span class="keyword">go</span> vet#是一个用于检查Go语言源码中静态错误的简单工具</span><br><span class="line"><span class="keyword">go</span> tool pprof#交互式的访问概要文件的内容</span><br></pre></td></tr></table></figure><h2 id="Go关键字及用途"><a href="#Go关键字及用途" class="headerlink" title="Go关键字及用途"></a>Go关键字及用途</h2><table>  <thead>    <tr>      <th>关键字</th>      <th>用途</th>    </tr>  </thead>  <tbody>    <tr>      <td>var</td>      <td>用于变量声明</td>    </tr>    <tr>      <td>const</td>      <td>用于常量声明</td>    </tr>    <tr>      <td>type</td>      <td>用于类型声明</td>    </tr>    <tr>      <td>func</td>      <td>用于声明函数和方法</td>    </tr>    <tr>      <td>package</td>      <td>用于声明包文件</td>    </tr>    <tr>      <td>import</td>      <td>用于导入其他package</td>    </tr>    <tr>      <td>return</td>      <td>用于从函数返回</td>    </tr>    <tr>      <td>defer</td>      <td>延迟调用，在函数退出之前执行</td>    </tr>    <tr>      <td>go</td>      <td>创建一个协程</td>    </tr>    <tr>      <td>select</td>      <td>用于选择不同类型的通讯</td>    </tr>    <tr>      <td>interface</td>      <td>用于定义接口</td>    </tr>    <tr>      <td>struct</td>      <td>用于定义数据类型</td>    </tr>    <tr>      <td>break、case、continue、for、fallthrough、else、if、switch、goto、default</td>      <td>用于流程控制</td>    </tr>    <tr>      <td>chan</td>      <td>用于声明chan类型数据</td>    </tr>    <tr>      <td>map</td>      <td>用于声明map类型数据</td>    </tr>    <tr>      <td>range</td>      <td>用于遍历array、slice、map、channel数据类型</td>    </tr>  </tbody></table><h2 id="Go语言保留字"><a href="#Go语言保留字" class="headerlink" title="Go语言保留字"></a>Go语言保留字</h2><p>Go语言有37个保留字：</p><table>  <thead>    <tr>      <th>作用域</th>      <th>保留字</th>    </tr>  </thead>  <tbody>    <tr>      <td>Constants(常量)</td>      <td>true false iota nil</td>    </tr>    <tr>      <td>Types（类型）</td>      <td>int int8 int16 int 32 int64<br>uint uint8 uint16 uint32 uint64        uintptr<br>float32 float64 complex128 complex64<br>bool byte rune        string error</td>    </tr>    <tr>      <td>Functions(方法)</td>      <td>make len cap new append copy close delete<br>complex real imag<br>panic        recover</td>    </tr>  </tbody></table><h2 id="Go语言命名规范"><a href="#Go语言命名规范" class="headerlink" title="Go语言命名规范"></a>Go语言命名规范</h2><p>Go语言的包（package）、变量、常量、自定义类型、函数、方法的命名方式遵循以下规则：</p><ol>  <li>首字符可以是任意的Unicode字符或者下划线</li>  <li>剩余字符可以是Unicode字符、下划线、数字</li>  <li>字符长度不限</li>  <li>不要使用Go语言的关键字和保留字命名</li></ol><h2 id="Go语言内置类型和函数"><a href="#Go语言内置类型和函数" class="headerlink" title="Go语言内置类型和函数"></a>Go语言内置类型和函数</h2><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><table>  <thead>    <tr>      <th>类型</th>      <th>长度（字节）</th>      <th>默认值</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>bool</td>      <td>1</td>      <td>false</td>      <td>bool类型代表逻辑值，有true（真）和false（假）两种取值</td>    </tr>    <tr>      <td>byte</td>      <td>1</td>      <td>0</td>      <td>是int8的别名</td>    </tr>    <tr>      <td>rune</td>      <td>4</td>      <td>0</td>      <td>是int32的别名，代表Unicode代码点</td>    </tr>    <tr>      <td>int,uint</td>      <td>4或8（和系统有关）</td>      <td>0</td>      <td>int有符号整数、uint无符号整数</td>    </tr>    <tr>      <td>int8,uint8</td>      <td>1</td>      <td>0</td>      <td>int8:-128~127<br>uint8:0~255<br>byte是uint8的别名</td>    </tr>    <tr>      <td>int16,uint16</td>      <td>2</td>      <td>0</td>      <td>int16：-32768~32767<br>uint16:0~65535</td>    </tr>    <tr>      <td>int32,uint32</td>      <td>4</td>      <td>0</td>      <td>int32:-2147483648~2147483647<br>uint32:0~4294967295<br>rune是int32的别名</td>    </tr>    <tr>      <td>int64,unint64</td>      <td>8</td>      <td>0</td>      <td>int64:-9223372036854775808~9223372036854775807<br>uint64:0~18446744073709551615</td>    </tr>    <tr>      <td>float32</td>      <td>4</td>      <td>0</td>      <td>单精度浮点型</td>    </tr>    <tr>      <td>float64</td>      <td>8</td>      <td>0</td>      <td>双精度浮点型</td>    </tr>    <tr>      <td>complex64</td>      <td>8</td>      <td>(0+0i)</td>      <td>复数类型</td>    </tr>    <tr>      <td>complex128</td>      <td>16</td>      <td>(0+0i)</td>      <td>复数类型</td>    </tr>    <tr>      <td>uintptr</td>      <td>4或8（和系统有关）</td>      <td>0</td>      <td>指针类型<br>存储指针的uint32或uint64整数</td>    </tr>    <tr>      <td>array</td>      <td></td>      <td>默认值要根据其数据类型确定<br>var a[4]int,其默认值为[0 0 0 0]</td>      <td>值类型</td>    </tr>    <tr>      <td>struct</td>      <td></td>      <td>默认值要根据其数据类型来确定</td>      <td>值类型</td>    </tr>    <tr>      <td>string</td>      <td></td>      <td>“”</td>      <td>UTF-8字符串</td>    </tr>    <tr>      <td>slice</td>      <td></td>      <td>nil</td>      <td>引用类型</td>    </tr>    <tr>      <td>map</td>      <td></td>      <td>nil</td>      <td>引用类型</td>    </tr>    <tr>      <td>channel</td>      <td></td>      <td>nil</td>      <td>引用类型</td>    </tr>    <tr>      <td>interface</td>      <td></td>      <td>nil</td>      <td>接口类型</td>    </tr>    <tr>      <td>function</td>      <td></td>      <td>nil</td>      <td>函数类型</td>    </tr>    <tr>      <td>error</td>      <td></td>      <td>nil</td>      <td>错误类型</td>    </tr>  </tbody></table><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>Go语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同类型进行操作，例如：len、cap、和append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p><table>  <thead>    <tr>      <th>函数</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>append</td>      <td>用来追加元素到slice中，返回修改后的slice</td>    </tr>    <tr>      <td>close</td>      <td>主要用来关闭channel</td>    </tr>    <tr>      <td>delete</td>      <td>从map中删除key对应的value</td>    </tr>    <tr>      <td>panic</td>      <td>停止常规的goroutine（panic和recover：用来做错误处理）</td>    </tr>    <tr>      <td>recover</td>      <td>允许程序定义goroutine的panic动作</td>    </tr>    <tr>      <td>imag</td>      <td>返回complex的实部（complex、real imag:用于创建和操作复数）</td>    </tr>    <tr>      <td>real</td>      <td>返回complex的虚部</td>    </tr>    <tr>      <td>make</td>      <td>用来分配内存，返回Type本身（只能应用于slice、map、channel）</td>    </tr>    <tr>      <td>new</td>      <td>用来分配内存，主要用来分配值类型，比如int，struct。返回指向Type的指针</td>    </tr>    <tr>      <td>cap</td>      <td>用于求最大容量，比如array、slice、channel，返回最大容量</td>    </tr>    <tr>      <td>len</td>      <td>用于求长度，比如string、array、slice、map、channel，返回长度</td>    </tr>    <tr>      <td>print,println</td>      <td>底层打印函数，在部署环境中建议使用fmt包</td>    </tr>  </tbody></table><h3 id="内置接口error"><a href="#内置接口error" class="headerlink" title="内置接口error"></a>内置接口error</h3><p>只要实现了Error()函数，返回值为String,就实现了error接口<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">Error()String</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Go语言特殊函数"><a href="#Go语言特殊函数" class="headerlink" title="Go语言特殊函数"></a>Go语言特殊函数</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>Go语言程序的默认入口函数（主函数）：func main()<br>函数体用{}一对括号包裹。<br>只能应用于package main<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><p>go语言中init函数用于包package的初始化，该函数是go语言的一个重要特性。<br>init函数有以下的特证：</p><ol>  <li>init函数是用于程序执行前做包的初始化函数，比如初始化包里的变量等。</li>  <li>每个包可以拥有多个init函数。</li>  <li>包的每个源文件也可以拥有多个init函数</li>  <li>同一个包中多个init函数的执行顺序go语言没有明确定义（说明）</li>  <li>不同包的init函数按照包导入的依赖关系决定该初始化函数的执行顺序</li>  <li>init函数不能被其他函数调用，而是在main函数执行之前，自动被调用</li></ol><h3 id="init函数和main函数的异同"><a href="#init函数和main函数的异同" class="headerlink" title="init函数和main函数的异同"></a>init函数和main函数的异同</h3><p><strong>相同点：</strong><br>两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。<br><strong>不同点:</strong><br>init函数可以应用于任意包中，且可以重复定义多个。<br>main函数只能用于main包中，且只能定义一个。</p><p><strong>两个函数的执行顺序</strong><br>对同一个go文件的init()调用顺序是从上到下的。<br>对铜鼓一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的init()函数。<br>对于不同的package，如果不互相依赖的话，按照main包中“先import的后调用”的顺序调用其包中的init(),如果package存在依赖，则先调用最早被依赖的package中的init(),最后调用main函数。<br>如果init函数中使用了println()或者print()，会发现在执行过程中这两函数不会按照想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。</p><h2 id="Go语言运算符"><a href="#Go语言运算符" class="headerlink" title="Go语言运算符"></a>Go语言运算符</h2><p>运算符用于在程序运行时执行数学或逻辑运算。<br>Go语言内置的运算符有：算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符、其他运算符。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>  <thead>    <tr>      <th>运算符</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>+</td>      <td>加 </td>    </tr>    <tr>      <td>-</td>      <td>减</td>    </tr>    <tr>      <td>*</td>      <td>乘</td>    </tr>    <tr>      <td>/</td>      <td>除</td>    </tr>    <tr>      <td>%</td>      <td>求余</td>    </tr>    <tr>      <td>++</td>      <td>自增</td>    </tr>    <tr>      <td>–</td>      <td>自减</td>    </tr>  </tbody></table><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table>  <thead>    <tr>      <th>运算符</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>==</td>      <td>检查两个值是否相等，如果相等返回 True 否则返回 False</td>    </tr>    <tr>      <td>!=</td>      <td>检查两个值是否不相等，如果不相等返回 True 否则返回 False</td>    </tr>    <tr>      <td>&gt;</td>      <td>检查左边值是否大于右边值，如果是返回 True 否则返回 False</td>    </tr>    <tr>      <td>&lt;</td>      <td>检查左边值是否小于右边值，如果是返回 True 否则返回 False</td>    </tr>    <tr>      <td>&gt;=</td>      <td>检查左边值是否大于等于右边值，如果是返回 True 否则返回 False</td>    </tr>    <tr>      <td>&lt;=</td>      <td>检查左边值是否小于等于右边值，如果是返回 True 否则返回 False</td>    </tr>  </tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>  <thead>    <tr>      <th>运算符</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>&amp;&amp;</td>      <td>逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False</td>    </tr>    <tr>      <td>&#124;&#124;</td>      <td>逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False</td>    </tr>    <tr>      <td>!</td>      <td>逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True</td>    </tr>  </tbody></table><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table>  <thead>    <tr>      <th>运算符</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>&amp;</td>      <td>按位与运算符“&amp;”是双目运算符。其功能是参与运算的两数各对应的二进位相与</td>    </tr>    <tr>      <td>&#124;&#124;</td>      <td>按位或运算符“&#124;”是双目运算符。其功能是参与运算的两数各对应的二进位相或</td>    </tr>    <tr>      <td>^</td>      <td>按位异或运算符“^”是双目运算符。其功能是参与运算的两数各对应的二进位相异或，当两数对应的二进位相异时，结果为1</td>    </tr>    <tr>      <td>&lt;&lt;</td>      <td>左移运算符“&lt;&lt;”是双目运算符。左移n位就是乘以2的n次方。        其功能把“&lt;&lt;”左边的运算数的各二进位全部左移若干位，由“&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0</td>    </tr>    <tr>      <td>&gt;&gt;</td>      <td>右移运算符“&gt;&gt;”是双目运算符。右移n位就是除以2的n次方。        其功能是把“&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数。</td>    </tr>  </tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>  <thead>    <tr>      <th>运算符</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>=</td>      <td>简单的赋值运算符，将一个表达式的值赋给一个左值</td>    </tr>    <tr>      <td>+=</td>      <td>相加后再赋值</td>    </tr>    <tr>      <td>-=</td>      <td>相减后再赋值</td>    </tr>    <tr>      <td>*=</td>      <td>相乘后再赋值</td>    </tr>    <tr>      <td>/=</td>      <td>相除后再赋值</td>    </tr>    <tr>      <td>%=</td>      <td>求余后再赋值</td>    </tr>    <tr>      <td>&lt;&lt;=</td>      <td>左移后赋值</td>    </tr>    <tr>      <td>&gt;&gt;=</td>      <td>右移后赋值</td>    </tr>    <tr>      <td>&amp;=</td>      <td>按位与后赋值</td>    </tr>    <tr>      <td>^=</td>      <td>按位异或后赋值</td>    </tr>    <tr>      <td>&#124;=</td>      <td>按位或后赋值</td>    </tr>  </tbody></table><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><table>  <thead>    <tr>      <th>运算符</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>&amp;</td>      <td>取地址符，返回变量存储地址</td>    </tr>    <tr>      <td>*</td>      <td>取值符，返回指针的变量</td>    </tr>  </tbody></table><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及他们的优先级，由上至下代表优先级由高到低：</p><table>  <thead>    <tr>      <th style="text-align:center">优先级</th>      <th style="text-align:center">运算符</th>    </tr>  </thead>  <tbody>    <tr>      <td style="text-align:center">7</td>      <td style="text-align:center">^ !</td>    </tr>    <tr>      <td style="text-align:center">6</td>      <td style="text-align:center">* / % &lt;&lt; &gt;&gt; &amp; &amp;^</td>    </tr>    <tr>      <td style="text-align:center">5</td>      <td style="text-align:center">+ - &#124; ^</td>    </tr>    <tr>      <td style="text-align:center">4</td>      <td style="text-align:center">== != &lt; &lt;= &gt;= &gt;</td>    </tr>    <tr>      <td style="text-align:center">3</td>      <td style="text-align:center">&lt;-</td>    </tr>    <tr>      <td style="text-align:center">2</td>      <td style="text-align:center">&amp;&amp;</td>    </tr>    <tr>      <td style="text-align:center">1</td>      <td style="text-align:center">&#124;&#124;</td>    </tr>  </tbody></table><h3 id="特殊标识符"><a href="#特殊标识符" class="headerlink" title="特殊标识符"></a>特殊标识符</h3><p>“_”是特殊标识符，又称占位符（空标识符号），用来忽略结果。</p><ol>  <li>特殊标识符应用在import中<br>在go语言里，import的作用是导入其他package。<br>特殊标识符（如：import _    test/golang）的作用：当导入一个包时，该包下的文件里所有init()函数都会被执行，然而，有些时候我们并不需要把整个包都导入进来，仅仅是希望它执行init()函数而已。这个时候就可以使用import    _ 引用包。即使用（import _ 引用包）只是引用该包，仅仅是为了调用init()函数，所以无法通过包名来调用包中的其他函数。</li>  <li>特殊标识符应用在代码中    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">str, _ := test()</span><br><span class="line">_ = str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="params">(str <span class="keyword">string</span>,err erro)</span></span>&#123;</span><br><span class="line">str = <span class="string">"hello"</span></span><br><span class="line">err = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>占位符，意思是那个位置本应该赋值给某个值，但是不需要这个值。所以就把该赋值给站位符，意思是丢掉不要，这样编译器可以更好的优化，任何类型的单个值都可以丢给占位符。<br>第一个占位符：这种情况是忽略函数返回值，函数返回两个结果，而只想要一个结果。<br>第二个站位符：这种情况是忽略未使用的局部变量，如果声明的局部变量，不使用，编译器是会报错。</p></blockquote><style>  table th:nth-of-type(1) {    width: 15%;  }  table th:nth-of-type(2) {    width: 15%;  }  table th:nth-of-type(3) {    width: 20%;  }  table th:nth-of-type(4) {    width: 50%;  }</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言简介&quot;&gt;&lt;a href=&quot;#Go语言简介&quot; class=&quot;headerlink&quot; title=&quot;Go语言简介&quot;&gt;&lt;/a&gt;Go语言简介&lt;/h2&gt;
&lt;p&gt;Go语言是谷歌2009发布的第二款开源编程语言。&lt;br&gt;Go语言专门针对多处理器系统应用程序的编程进行了优
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制和集群</title>
    <link href="https://www.kapyan.top/posts/655286048.html"/>
    <id>https://www.kapyan.top/posts/655286048.html</id>
    <published>2019-02-13T08:58:21.000Z</published>
    <updated>2019-02-19T02:05:31.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h3 id="redis复制特性"><a href="#redis复制特性" class="headerlink" title="redis复制特性"></a>redis复制特性</h3><ol>  <li>使用异步复制</li>  <li>一个主服务器可以有多个从服务器</li>  <li>从服务也可以有自己的从服务器</li>  <li>复制功能不会阻塞主服务器</li>  <li>可以通过复制功能来让主服务器免于执行持久化操作，由从服务器去执行持久化操作即可</li></ol><p><img src="/posts/655286048/zhucong.svg" alt="主从"></p><p>  <center>    <font color="red" size="2"> 关闭主服务器持久化时，复制功能的数据安全 </font>  </center><br>当配置Redis复制功能时，强烈建议打开主服务器的持久化功能。否则，由于延迟等问题，部署的服务应该要避免自动拉起。</p><p>为了帮助理解主服务器关闭持久化时自动拉起的危险性，参考一下会导致主从服务器数据全部丢失的例子：</p><blockquote>  <ol>    <li>假设节点A为主服务器，并且关闭了持久化，并且节点B和节点C从节点A复制数据</li>    <li>节点A崩溃，然后由自动拉起服务重启了节点A。由于节点A的持久化被关闭了，所以重启之后没有任何数据</li>    <li>节点B和节点C将从节点A复制数据，但是A的数据是空的，于是就把自身保存的数据副本删除</li>  </ol></blockquote><p>在关闭主服务器的持久化，并同时开启自动拉起进程的情况下，即便使用Sentinel来实现Redis的高可用性，也是非常危险的。因为主服务器可能拉起得非常快，以至于Sentinel在配置的心跳时间间隔内没有检测到主服务器已被重启，然后还是会执行上面的数据丢失流程。</p><p>无论何时，数据安全都是极其重要的，所以应该禁止主服务器关闭持久化的同时自动拉起。</p><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><p>redis主从同步有两种方式（或者说两个阶段）：全同步和部分同步。</p><p>主从刚刚连接的时候，进行全同步；全同步结束后，进行部分同步。当然，如果有需要，slave在任何时候都可以发起全同步。</p><p>redis策略是，无论如何，首先会尝试进行部分同步，如不成功，要求从机进行全同步，并启动BGSAVE，BGSAVE结束后，传输RDB文件；如果成功，允许从机进行部分同步，并传输积压空间中的数据。</p><p>下图总结了主从同步机制：<br><img src="/posts/655286048/redisms.svg" alt="ms"></p><blockquote>  <p><strong>主从复制过程：</strong></p>  <ol>    <li>从服务器向主服务器发送SYNC命令</li>    <li>接收到SYNC命令的主服务器会调用BGSAVE命令，创建一个RDB文件，并使用缓冲区记录接下来执行的所有命令</li>    <li>当主服务器执行完BGSAVE命令时，它会向从服务器发送RDB文件，而从服务器则会接收并载入这个文件</li>    <li>主服务器将缓冲区存储的所有写命令发送给从服务器执行</li>  </ol></blockquote><p><strong>命令的传播</strong><br>在主从服务器完成同步之后，主服务器每执行一个写命令，他都会将被执行的写命令发送给从服务器执行，这个操作被称为“命令传播”（command  propagate）。<br><img src="/posts/655286048/commandpropagate.svg" alt="commandpropagate"></p><p>命令传播是一个持续的过程：只要复制仍在继续，命令传播就会一直进行，使得主从服务器的状态可以一直保持一致。</p><h3 id="复制中的SYNC与PSYNC"><a href="#复制中的SYNC与PSYNC" class="headerlink" title="复制中的SYNC与PSYNC"></a>复制中的SYNC与PSYNC</h3><p>在Redis2.8版本之前，断线之后重连的从服务器总要执行一次完整重同步（full resynchronization）操作。</p><p>从Redis2.8开始，Redis使用PSYNC命令代替SYNC命令。PSYNC比起SYNC的最大改进在于PSYNC实现了部分重同步（partial  resync）特性：在主从服务器断线并且重新连接的时候，只要条件允许，PSYNC可以让主服务器只向从服务器同步断线期间缺失的数据，而不用重新向从服务器同步整个数据库。</p><h3 id="复制的一致性问题"><a href="#复制的一致性问题" class="headerlink" title="复制的一致性问题"></a>复制的一致性问题</h3><p><img src="/posts/655286048/redisfzyzx.svg" alt="yzx"><br>在读写分离环境下，客户端向主服务器发送写命令SET  n 1086，主服务器在执行这个写命令之后，向客户端返回回复，并将这个写命令传播给从服务器。<br>接到回复的客户端继续向从服务器发送读命令GET  n，并且因为网络状态的原因，客户端的GET命令比主服务器传播的SET命令更快到达了从服务器。<br>因为从服务器键n的值还未被更新，所以客户端在从服务器读取到的将是一个错误（过期）的n值。</p><h3 id="复制安全性提升"><a href="#复制安全性提升" class="headerlink" title="复制安全性提升"></a>复制安全性提升</h3><p>主服务器只在有至少N个从服务器的情况下，才执行写操作。从Redis2.8开始，为了保证数据的安全性，可以通过配置，让主服务器只在至少有N个当前已连接从服务器的情况下，才执行写命令。<br>不过，因为Redis使用异步复制，所以主服务器发送的写数据并不一定会被从服务器接收到，因此，数据丢失的可能性仍然存在。<br>通过以下两个参数保证数据的安全：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write &lt;number of slaves&gt;  <span class="comment"># 从服务器个数</span></span><br><span class="line">min-slaves-max-lag &lt;number of seconds&gt;  <span class="comment"># 从服务器网络延迟（秒）</span></span><br></pre></td></tr></table></figure></p><blockquote>  <p>参数说明:<br>如果至少有min-slaves-to-write个从服务器，并且这些服务器的延迟值都少于min-slaves-max-lag秒，主服务器就会执行客户端的写操作。这个特性看作CAP理论中的C的条件放宽版本:    尽管不能保证写操的持久性，但起码丢失数据的窗口会被严格限制在指定的秒数中。<br>如果条件达不到min-slaves-to-write和min-slaves-max-lag所指定的条件，那么写操作就不会被执行，主服务器会向请求执行写操作的客户端返回一个错误。</p></blockquote><h3 id="Redis主从复制实践"><a href="#Redis主从复制实践" class="headerlink" title="Redis主从复制实践"></a>Redis主从复制实践</h3><p>启动多个Redis实例：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server /6380/redis.conf</span><br><span class="line">redis-server /6381/redis.conf</span><br><span class="line">redis-server /6382/redis.conf</span><br></pre></td></tr></table></figure></p><p>配置文件示例：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">pidfile /var/run/redi_6380.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/var/log/redis_6380.log"</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /usr/<span class="built_in">local</span>/redis/6380/</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></p><p>复制环境说明：</p><ul>  <li>主节点：6380</li>  <li>从节点：6381、6382</li></ul><p>开启主从（在6381、6382实例中执行）<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6381/6382</span><br><span class="line">SLAVEOF 127.0.0.1 6380</span><br></pre></td></tr></table></figure></p><h3 id="Redis主从复制管理"><a href="#Redis主从复制管理" class="headerlink" title="Redis主从复制管理"></a>Redis主从复制管理</h3><p>主从复制状态监控：<code>info replication</code><br>主从切换：<code>slaveof no one</code>(在从库执行，将从库设为主库)</p><h2 id="Redis-HA实践（Redis-Sentinel）"><a href="#Redis-HA实践（Redis-Sentinel）" class="headerlink" title="Redis HA实践（Redis Sentinel）"></a>Redis  HA实践（Redis Sentinel）</h2><p>Redis-Sentinel是Redis官方推荐的高可用性（HA）解决方案，当用Redis做Master-salve的高可用方案时，假如master宕机了，Redis本身（包括它的很多客户端）都没有实现自动进行主备切换，而Redis-sentinel本身也是一个独立运行的进程，它能监控多个master-slave集群，发现master宕机后能进行自动切换。</p><p><img src="/posts/655286048/sentinel.svg" alt="yzx"><br>Sentinel是一个监视器，它可以根据被监视实例的身份和状态来判断应该执行何种动作。</p><h3 id="Redis-Sentinel功能"><a href="#Redis-Sentinel功能" class="headerlink" title="Redis Sentinel功能"></a>Redis  Sentinel功能</h3><p><strong>监控（Monitoring）：</strong><br>Sentinel会不断地检查主服务器和从服务器是否运作正常。<br><strong>提醒（Notification）：</strong><br>当被监控的某个Redis服务器出现问题时，Sentinel可以通过API向管理员或其他应用程序发送通知。<br><strong>自动故障迁移（Automatic    failover）：</strong><br>当一个主服务器不能正常工作时，Sentinel会开始一次自动故障迁移操作，它会将失效主服务器的其中一个从服务器升级为新的主服务器，并让失效主服务器的其他从服务器改为复制新的主服务器；当客户端试图连接失效的主服务器时，集群也会向客户端返回新主服务器的地址，使得集群可以使用新主服务器代替失效服务器。</p><h3 id="服务器连接"><a href="#服务器连接" class="headerlink" title="服务器连接"></a>服务器连接</h3><p>发现并连接主服务器:<br>Sentinel通过用户给定的配置文件来发现主服务器。</p><p><img src="/posts/655286048/sentinellj.svg" alt="lj"></p><p>Sentinel会与被监视的主服务器创建两个网络连接：</p><ol>  <li>命令连接：用于向主服务器发送命令。</li>  <li>订阅连接：用于订阅指定的频道，从而发现监视同一主服务器的其他Sentinel。</li></ol><p>发现并连接从服务器：<br>Sentinel通过向主服务器发送INFO命令来自动获得所有从服务器的地址。<br>跟主服务器一样，Sentinel会与每个被发现的从服务器创建命令连接和订阅连接。</p><p><img src="/posts/655286048/sentinelslj.svg" alt="slj"></p><p>发现其他Sentinel：<br>Sentinel会通过命令连接向被监视的主从服务器发送“HELLO”信息，该消息包含Sentinel的IP、端口、ID等内容，以此来向其他Sentinel宣告自己的存在。与此同时Sentinel会通过订阅连接接收其他Sentinel的“HELLO”信息，以此来发现监视同一个主服务器的其他Sentinel。</p><p><img src="/posts/655286048/sentinels.svg" alt="sls"></p><p>sentinel1通过发送HELLO信息来让sentinel2和sentinel3发现自己，其他两个sentinel也会进行类似的操作。</p><p>多个Sentinel之间的连接：<br>Sentinel之间只会互相创建命令连接，用于通信。因为已经有主从服务器作为发送和接收HELLO信息的中介，所以Sentinel之间不会创建订阅连接。</p><p><img src="/posts/655286048/sentinelmss.svg" alt="mss"></p><blockquote>  <p>Redis的Sentinel中关于下线（down）有两个不同的概念：<br>主观下线（Subjectively    Down，简称SDOWN）指的是单个Sentinel实例对服务器做出的下线判断。<br>客观下线（Objectively    Down，简称ODOWN）指的是多个Sentinel实例在对同一个服务器做出SDOWN判断，并且通过SENTINEL is-master-down    -by-addr命令互相交流之后，得出的服务器下线判断。（一个Sentinel可以通过向另一个Sentinel发送SENTINEL    is-master-down-by-addr命令来询问对方是否认为给定的服务器已下线。）</p></blockquote><p>如果一个服务器没有在master-down-after-milliseconds选项所指定的时间内，对向它发送PING命令的Sentinel返回一个有效回复（valid  reply），那么Sentinel就会将这个服务器标记为主观下线。</p><h3 id="故障转移FAILOVER"><a href="#故障转移FAILOVER" class="headerlink" title="故障转移FAILOVER"></a>故障转移FAILOVER</h3><p>一次故障转移操作由以下步骤组成：</p><ol>  <li>发现主服务器已进入客观下线状态；</li>  <li>基于Raft leader election协议，进行投票选举；</li>  <li>如果当选失败，那么在设定的故障迁移超时时间的两倍之后，重新尝试当选。如果当选成功，那么执行以下步骤；</li>  <li>选出一个从服务器，并将它升级为主服务器；</li>  <li>向被选中的从服务器发送SLAVEOF NO ONE命令，让它转变为主服务器；</li>  <li>通过发布与订阅功能，将更新后的配置传播给所有其他Sentinel，其他Sentinel对他们自己的配置进行更新；</li>  <li>向已下线主服务器的从服务器发送SLAVEOF命令，让它们去复制新的主服务器；</li>  <li>当所有从服务器都已经开始复制新的主服务器时，leader Sentinel终止这次故障迁移操作。</li></ol><h3 id="配置sentinel"><a href="#配置sentinel" class="headerlink" title="配置sentinel"></a>配置sentinel</h3><p>创建程序目录<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /application</span><br><span class="line">mkdir 26380</span><br><span class="line">cp /usr/<span class="built_in">local</span>/redis/src/redis-sentinel ./26380/</span><br><span class="line"><span class="built_in">cd</span> 26380</span><br></pre></td></tr></table></figure></p><p>编辑配置文件<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim sentinel.conf</span><br><span class="line"><span class="comment"># 写入以下配置</span></span><br><span class="line">port 26380</span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6370 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br><span class="line">sentinel config-epoch mymaster 0</span><br></pre></td></tr></table></figure></p><p>启动sentinel<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-sentinel ./sentinel.conf</span><br></pre></td></tr></table></figure></p><p>配置文件说明：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定监控master</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6370 2</span><br><span class="line"><span class="comment"># 2表示多少个sentinel同意</span></span><br><span class="line"><span class="comment"># 安全信息</span></span><br><span class="line">sentinel auth-pass mymaster root</span><br><span class="line"><span class="comment"># 超过15000毫秒后认为主机宕机</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 15000</span><br><span class="line"><span class="comment"># 当主从切换多久后认为主从切换失败</span></span><br><span class="line">sentinel failover-timeout mymaster 900000</span><br><span class="line"><span class="comment"># 这两个配置后面的数量主从机需要一样，epoch为master的版本</span></span><br><span class="line">sentinel leader-epoch mymaster 1</span><br><span class="line">sentinel config-epoch mymaster 1</span><br></pre></td></tr></table></figure></p><h4 id="Sentinel命令操作"><a href="#Sentinel命令操作" class="headerlink" title="Sentinel命令操作"></a>Sentinel命令操作</h4><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>PING</td>      <td>返回PONG</td>    </tr>    <tr>      <td>SENTINEL masters</td>      <td>列出所有被监视的主服务器</td>    </tr>    <tr>      <td>SENTINEL slaves <master name=""></master>      </td>      <td>列出指定master的所有slave及它们的状态</td>    </tr>    <tr>      <td>SENTINEL get-master-addr-by-name <master name=""></master>      </td>      <td>返回给定名字的服务器的IP地址和端口号</td>    </tr>    <tr>      <td>SENTINEL reset <pattern></pattern>      </td>      <td>重置所有名字和给定模式pattern相匹配的主服务器</td>    </tr>    <tr>      <td>SENTINEL failover <master name=""></master>      </td>      <td>当主服务器失效时，在不询问其他Sentinel意见的情况下，强制开始一次自动故障迁移</td>    </tr>  </tbody></table><h3 id="Sentinel发布与订阅信息"><a href="#Sentinel发布与订阅信息" class="headerlink" title="Sentinel发布与订阅信息"></a>Sentinel发布与订阅信息</h3><p>客户端可以将Sentinel看作是一个只提供了订阅功能的Redis服务器：不可以使用PUBLISH命令向这个服务器发送信息，但可以用SUBSCRIBE命令或PSUBSCRIBE命令，通过订阅给定的频道来获取相应的事件提醒。<br>一个频道能够接受和这个频道的名字相同的事件。比如：名为  + sdown的频道就可以接受所有实例进入主观下线（SDOWN）状态的事件。<br>通过执行PSUBSCRIBE * 命令可以接收所有事件信息。<br>以下列出的是客户端可以通过订阅来获得的频道和信息的格式：<br><code>第一个英文单词是频道    / 事件的名字，其余的是数据的格式</code></p><blockquote>  <p>注意：<br>当格式中包含instance details字样时，表示频道所返回的信息中包含了以下用于识别目标实例的内容：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;instance-type&gt;&lt;name&gt;&lt;ip&gt;&lt;port&gt;@&lt;master-name&gt;&lt;master-ip&gt;&lt;master-port &gt;</span><br><span class="line">@字符之后的内容用于指定主服务器，这些内容是可选的，它们仅在@字符之前的内容指定的实例不是主服务器时使用。</span><br></pre></td></tr></table></figure>  </p></blockquote><h2 id="Redis-cluster-集群"><a href="#Redis-cluster-集群" class="headerlink" title="Redis cluster(集群)"></a>Redis  cluster(集群)</h2><h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><p>Redis集群是一个可以在多个Redis节点之间进行数据共享的设施（installation）。<br>Redis集群不支持那些需要同时处理多个键的Redis命令，因为执行这些命令需要在多个Redis节点之间移动数据，并且在高负载的情况下，这些命令将降低Redis集群的性能，并导致不可预测的行为。<br>Redis集群通过分区（partition）来提供一定程度的可用性（availability）：即使集群中一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。将数据自动切分（split）到多个节点的能力。<br>当集群中的一部分节点失效或者无法进行通讯时，仍然可以继续处理命令请求的能力。</p><h3 id="Redis集群数据共享"><a href="#Redis集群数据共享" class="headerlink" title="Redis集群数据共享"></a>Redis集群数据共享</h3><p>Redis集群使用数据分片（sharding）而非一致性哈希（consistency  hashing）来实现：一个Redis集群包含16384个哈希槽（hash  slot），数据库中的每个键都属于这16384个哈希槽的其中一个，集群使用公式CRC16（key）%  16384来计算键key属于哪个槽，其中CRC16（key）语句用于计算键key的CRC校验和。</p><blockquote>  <p>节点A负责处理0号至5500号哈希槽<br>节点B负责处理5501号至11000号哈希槽<br>节点C负责处理11001号至16384号哈希槽</p></blockquote><p>槽的计算公式： CRC16(key) % 16383</p><p><img src="/posts/655286048/sharding.svg" alt="sharding"></p><h3 id="集群运行机制"><a href="#集群运行机制" class="headerlink" title="集群运行机制"></a>集群运行机制</h3><p>所有的redis节点彼此互联（PING-PONG机制），内部使用二进制协议优化传输速度和带宽。<br>节点的fail是通过集群中超过半数的master节点检测失效时才失效。<br>客户端与redis节点直连，不需要中间proxy层。客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。<br>把所有的物理节点映射到[0-16383]slot上，cluster负责维护node<->slot<->key</->  </-></p><p><img src="/posts/655286048/slot.svg" alt="sharding"></p><p>为了使得集群在一部分节点下线或者无法与集群的大多数（majority）节点进行通讯的情况下，仍然可以正常运作，Redis集群对节点使用了主从复制功能：集群中的每个节点都有1个至N个复制品（replication），其中一个复制品为主节点（master），而其余的N  - 1个复制品为从节点（slave）。</p><blockquote>  <p>在之前列举的节点A、B、C的例子中，如果节点B下线了，那么集群将无法正常运行，因为集群找不到节点来处理5501号至11000号的哈希槽。<br>假如在创建集群的时候（或者至少在节点B下线之前），我们为主节点B添加了从节点B1，那么当主节点B下线的时候，集群就会将B1设置为新的主节点，并让它代替下线的主节点B,    继续处理5501号至11000号的哈希槽，这样集群就不会因为主节点B的下线而无法正常运作了。<br>不过，如果节点B和B1都下线的话，Redis集群还是会停止工作。</p></blockquote><p>集群的复制特性重用了SLAVEOF命令代码，所以集群节点的复制行为和SLAVEOF命令的复制行为完全相同。</p><h3 id="集群的故障转移"><a href="#集群的故障转移" class="headerlink" title="集群的故障转移"></a>集群的故障转移</h3><ol>  <li>在集群里面，节点会对其他节点进行下线检测。</li>  <li>当一个主节点下线时，集群里面的其它主节点会负责对下线主节点进行故障转移。</li>  <li>换句话说，集群的节点集成了下线检测和故障转移等类似Sentinel的功能。</li>  <li>因为Sentinel是一个独立运行的监控程序，而集群的下线检测和故障转移等功能是集成在节点里面的，它们的运行模式非常地不同，所以尽管这两者功能很相似，但集群的实现没有重用Sentinel的代码。</li></ol><p>在集群里执行命令的两种情况：</p><ol>  <li>命令发送到了正确的节点：<br>命令要处理的键所在的槽正好是由接收命令的节点负责，那么该节点执行命令，就像单机Redis服务器一样。</li></ol><p><img src="/posts/655286048/cluster1.svg" alt="cluster1"></p><blockquote>  <p>槽位说明：<br>7000：槽0~5000 7001：槽5001~10000 7002：槽10001~16383<br>键date位于2022槽，该槽由节点7000负责，命令会直接执行。</p></blockquote><ol start="2">  <li>命令发送到了错误的节点：<br>接收到命令的节点并非处理键所在槽的节点，那么节点将向客户端返回一个转向（redirection）错误，告知客户端应该到哪个节点去执行这个命令，客户端会根据错误提示的信息，重新向正确的节点发送命令。</li></ol><p><img src="/posts/655286048/cluster2.svg" alt="cluster2"></p><blockquote>  <p>键date位于2022槽，该槽点由7000负责，但错误发送到了7001节点，7001向客户返回转向错误。<br>客户端根据转向错误的指引，转向到节点7000，并重新发送命令。</p></blockquote><h3 id="关于转向错误"><a href="#关于转向错误" class="headerlink" title="关于转向错误"></a>关于转向错误</h3><p>在集群中的节点会互相告知对方，自己负责处理哪些槽点。集群中的每个节点都会记录16384个槽分别由哪个节点负责，从而形成一个“槽表”（slot  table）。<br>节点在接收到命令请求时，会通过槽表检查键所在的槽是否由本节点处理：</p><ul>  <li>如果是，那么节点直接执行命令</li>  <li>如果不是，那么节点就从槽表里面提取出正确节点的地址信息，然后返回转向错误。</li></ul><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl-rh　　  <span class="comment"># 会在/etc/yum.repos.d/目录下多出一个CentOS-SCLo-scl-rh.repo源</span></span><br><span class="line">yum install rh-ruby23 -y</span><br><span class="line">scl <span class="built_in">enable</span> rh-ruby23 bash  <span class="comment"># 必须执行</span></span><br><span class="line">ruby -v  <span class="comment"># 查看ruby版本</span></span><br><span class="line">gem install redis-v4.1.0  <span class="comment"># redis-trib 工具执行需要安装redis gem才能执行</span></span><br></pre></td></tr></table></figure><p>配置文件<br>Redis集群由多个运行在集群模式（cluster  mode）下的Redis实例组成，实例的集群模式需要通过配置来开启，开启集群模式的实例将可以使用集群特有的功能和命令。<br>以下是一个包含了最少选项的集群配置文件示例：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">port 7000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></p><p>创建程序目录<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /application/redis</span><br><span class="line">mkdir 7000 7001 7002 7003 7004 7005</span><br></pre></td></tr></table></figure></p><p>拷贝应用<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 0 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span> cp /usr/<span class="built_in">local</span>/redis/bin/redis-server  ./700<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>创建配置文件<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 7000 7001 7002 7003 7004 7005</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"port <span class="variable">$i</span></span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">daemonize yes"</span>&gt;<span class="variable">$i</span>/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>启动redis集群<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 7000 7001 7002 7003 7004 7005</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$i</span></span><br><span class="line">    ./redis-server ./redis.conf &amp;</span><br><span class="line">    <span class="built_in">cd</span> ../</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>创建集群<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/src/</span><br><span class="line">./redis-trib.rb  create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</span><br></pre></td></tr></table></figure></p><blockquote>  <p>给定redis-trib.rb程序的命令是create，表示创建一个新的集群。<br>选项–replicas 1    表示集群中的每个主节点创建一个从节点。</p></blockquote><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>写数据，查看集群状态<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -p 7000<span class="comment">#-c连接集群结点时使用，此选项可防止moved和ask异常</span></span><br><span class="line"><span class="built_in">set</span> foo bar</span><br><span class="line">get foo</span><br></pre></td></tr></table></figure></p><p>重新分片实践<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/src/</span><br><span class="line">./redis-trib.rb reshard 127.0.0.1:7000</span><br></pre></td></tr></table></figure></p><p>集群状态<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7000 cluster nodes | grep master</span><br></pre></td></tr></table></figure></p><p>故障转移<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7002 debug segfault</span><br></pre></td></tr></table></figure></p><p>查看状态<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7000 cluster info | grep master</span><br></pre></td></tr></table></figure></p><p>增加新的节点<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node 127.0.0.1:7006 127.0.0.1:7000</span><br></pre></td></tr></table></figure></p><p>删除一个节点<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib del-node ip:port <span class="string">'&lt;node-id&gt;'</span></span><br></pre></td></tr></table></figure></p><p>删除master节点之前首先使用reshard移除master的全部slot，然后再删除当前节点<br>添加一个从节点<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb add-node--slave --master-id $[nodeid] 127.0.0.1:7008 127.0.0.1:7000</span><br></pre></td></tr></table></figure></p><h3 id="状态说明"><a href="#状态说明" class="headerlink" title="状态说明"></a>状态说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#redis-cli -p 7000 cluster nodes | grep master</span></span><br><span class="line">35b7fac5750c997412dc6826802bfb78d5b81abf 127.0.0.1: 7001@17001 master - 0 1548925480000 2 connected 5461 - 10922</span><br><span class="line">3c3106bd8740706bebe2341e90d08554ab2bcd52 127.0.0.1: 7000@17000 myself, master - 0 1548925480000 1 connected 0 - 5460</span><br><span class="line">e190049acbd61ecb16e82cca3d6aa06dd0927305 127.0.0.1: 7002@17002 master - 0 1548925481046 3 connected 10923 - 16383</span><br></pre></td></tr></table></figure><p>集群最近一次向节点发送PING命令之后，过去了多长时间还没接到回复。<br>节点最近一次返回PONG回复的时间。<br>节点的配置节点（configuration  epoch）。<br>本节点的网络连接情况：例如connected。<br>节点目前包含的槽：例如127.0.0.1: 7001目前包含号码为 5461  - 10922的哈希槽。</p><h3 id="使用redis-py-cluster模块操作redis集群"><a href="#使用redis-py-cluster模块操作redis集群" class="headerlink" title="使用redis-py-cluster模块操作redis集群"></a>使用redis-py-cluster模块操作redis集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --default-timeout=100 redis-py-cluster  <span class="comment">#安装redis-py-cluster扩展</span></span><br></pre></td></tr></table></figure><p>python连接redis代码：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> rediscluster <span class="keyword">import</span> StrictRedisCluster</span><br><span class="line"></span><br><span class="line">redis_nodes = [&#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">7000</span>&#125;,</span><br><span class="line">               &#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">7001</span>&#125;,</span><br><span class="line">               &#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">7002</span>&#125;,</span><br><span class="line">               &#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">7003</span>&#125;,</span><br><span class="line">               &#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">7004</span>&#125;,</span><br><span class="line">               &#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">7005</span>&#125;</span><br><span class="line">               ]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    redisconn = StrictRedisCluster(startup_nodes=redis_nodes)</span><br><span class="line">    redisconn.set(<span class="string">'name'</span>, <span class="string">'admin'</span>)</span><br><span class="line">    print(<span class="string">"name is: "</span>, redisconn.get(<span class="string">'name'</span>))</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"Connect Error!"</span>)</span><br></pre></td></tr></table></figure></p><p><a href="https://redis-py-cluster.readthedocs.io/en/master/index.html">redis-py-cluster官方文当</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis主从复制&quot;&gt;&lt;a href=&quot;#Redis主从复制&quot; class=&quot;headerlink&quot; title=&quot;Redis主从复制&quot;&gt;&lt;/a&gt;Redis主从复制&lt;/h2&gt;
&lt;h3 id=&quot;redis复制特性&quot;&gt;&lt;a href=&quot;#redis复制特性&quot; clas
      
    
    </summary>
    
      <category term="redis" scheme="https://www.kapyan.top/categories/redis/"/>
    
    
      <category term="Redis集群" scheme="https://www.kapyan.top/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>echo 0 &gt; /proc/sys/kernel/hung_task_timeout_secs disables this message故障处理</title>
    <link href="https://www.kapyan.top/posts/3397780315.html"/>
    <id>https://www.kapyan.top/posts/3397780315.html</id>
    <published>2019-02-12T07:41:15.000Z</published>
    <updated>2019-02-12T08:31:17.108Z</updated>
    
    <content type="html"><![CDATA[<p>用xshell连接服务器出错:<code>ssh_exchange_identification: Connection closed by    remote host</code><br>在阿里云控制台通过vnc连接服务器后出现如下信息：<br><img src="/posts/3397780315/erro.png" alt="error"></p><blockquote>  <p><strong>问题原因：</strong><br>默认情况下，linux会最多使用40%的可用内存作为文件系统缓存。当超过此阈值后，文件系统会将缓存中的内存全部写入磁盘，导致后续的I/O请求都是同步的。<br>将缓存写入磁盘时，有一个默认120秒的超时时间。出现上面问题的原因是I/O子系统的处理速度不够快，不能在120秒将缓存中的数据全部写入磁盘。<br>I/O系统响应缓慢，导致越来越多的请求堆积，最终系统内存全部被占用，导致系统失去响应。</p></blockquote><p><strong>解决方法</strong><br>根据应用程序情况，对<br>vm.dirty_ratio:当文件系统缓存脏页数量达到系统内存百分之多少时（如10%），系统不得不开始处理缓存脏页（因为此时脏页数量已经比较多，为了避免数据丢失需要将一定脏页刷入外存）；在此过程中很多应用进程可能会因系统转而处理文件I/O而阻塞<br>vm.dirty_background_ratio:当文件系统缓存脏页数量达到系统内存百分之多少时（5%）就会触发pdflush/flush/kdmflush等后台会写进程运行，将一定缓存的脏页异步地刷入外存<br>两个参数进行调优设置  。<br>推荐如下设置：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.dirty_ratio=10</span><br><span class="line">sysctl -w vm.dirty_background_ratio=5</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p>如果让系统永久生效<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"vm.dirty_background_ratio = 5"</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"vm.dirty_ratio = 10"</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用xshell连接服务器出错:&lt;code&gt;ssh_exchange_identification: Connection closed by
    remote host&lt;/code&gt;&lt;br&gt;在阿里云控制台通过vnc连接服务器后出现如下信息：&lt;br&gt;&lt;img src=&quot;/
      
    
    </summary>
    
      <category term="linux系统故障" scheme="https://www.kapyan.top/categories/linux%E7%B3%BB%E7%BB%9F%E6%95%85%E9%9A%9C/"/>
    
    
      <category term="hung_task_timeout_secs disables this message" scheme="https://www.kapyan.top/tags/hung-task-timeout-secs-disables-this-message/"/>
    
  </entry>
  
  <entry>
    <title>Redis管理</title>
    <link href="https://www.kapyan.top/posts/2273748276.html"/>
    <id>https://www.kapyan.top/posts/2273748276.html</id>
    <published>2019-02-12T03:49:55.000Z</published>
    <updated>2019-02-14T01:26:47.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table>  <thead>    <tr>      <th style="text-align:center">类型</th>      <th style="text-align:center">说明</th>    </tr>  </thead>  <tbody>    <tr>      <td style="text-align:center">String 字符串</td>      <td style="text-align:center">Redis字符串数据类型的相关命令用于管理redis字符串值</td>    </tr>    <tr>      <td style="text-align:center">Hash 哈希</td>      <td style="text-align:center">Redishash是一个string类型的field和value的映射表，hash特别适合由于存储对象。<br>Redis中每个hash可以存储2³²-1键值对（40多亿）。</td>    </tr>    <tr>      <td style="text-align:center">List 列表</td>      <td style="text-align:center">Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部或尾部<br>一个列表最多可以包含2³²-1个元素（4294967295,        每个列表超过40亿个元素）。</td>    </tr>    <tr>      <td style="text-align:center">Set 集合</td>      <td style="text-align:center">Redis的Set是String类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</td>    </tr>    <tr>      <td style="text-align:center">Sorted set 有序集合</td>      <td style="text-align:center">Redis有序集合和集合一样也是string类型元素的集合，且不允许重复的成员。</td>    </tr>  </tbody></table><h2 id="全局key操作"><a href="#全局key操作" class="headerlink" title="全局key操作"></a>全局key操作</h2><table>  <thead>    <tr>      <th>命令</th>      <th>含义</th>    </tr>  </thead>  <tbody>    <tr>      <td>KEYS *</td>      <td>查看KEY，支持通配符</td>    </tr>    <tr>      <td>DEL</td>      <td>删除给定的一个或多个key</td>    </tr>    <tr>      <td>EXISTS</td>      <td>检查是否存在</td>    </tr>    <tr>      <td>RENAME</td>      <td>变更key名</td>    </tr>    <tr>      <td>SORT</td>      <td>键值排序，有非数字时报错</td>    </tr>    <tr>      <td>TYPE</td>      <td>返回键所存储值的类型</td>    </tr>    <tr>      <td>DUMP\RESTORE</td>      <td>序列化与反序列化</td>    </tr>    <tr>      <td>EXPIRE\PEXPIRE</td>      <td>以秒\毫秒设定生存时间</td>    </tr>    <tr>      <td>TTL\PTTL</td>      <td>以秒\毫秒为单位返回生存时间</td>    </tr>    <tr>      <td>PERSIST</td>      <td>取消生存时间设置</td>    </tr>    <tr>      <td>RANDOMKEY</td>      <td>返回数据库中的任意键</td>    </tr>  </tbody></table><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>SET key value</td>      <td>设置指定key的值</td>    </tr>    <tr>      <td>GET key</td>      <td>获取指定key的值</td>    </tr>    <tr>      <td>GETRANGE key start end</td>      <td>返回key中字符串值的子字符</td>    </tr>    <tr>      <td>GETSET key value</td>      <td>将给定key的值设为value，并返回key的旧值（old value）</td>    </tr>    <tr>      <td>GETBIT key offset</td>      <td>对key所存储的字符串值获取指定偏移量上的位（bit）</td>    </tr>    <tr>      <td>MGET key1 [key2..]</td>      <td>获取所有（一个或多个）给定key的值</td>    </tr>    <tr>      <td>SETBIT key offset value</td>      <td>对key所存储的字符串值设置或清除指定偏移量上的位（bit）</td>    </tr>    <tr>      <td>SETEX key seconds value</td>      <td>将值value关联到key，并将key的过期时间设置为seconds（以秒为单位）</td>    </tr>    <tr>      <td>SETNX key value</td>      <td>只有在key不存在时设置key的值</td>    </tr>    <tr>      <td>SETRANGE key offset value</td>      <td>用value参数覆写给定key所存储的字符串值，从偏移量offset开始</td>    </tr>    <tr>      <td>STRLEN key</td>      <td>返回key所存储的字符串值的长度</td>    </tr>    <tr>      <td>MSET key value [key value …]</td>      <td>同时设置一个或多个key-value对</td>    </tr>    <tr>      <td>MSETNX key value [key value …]</td>      <td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在</td>    </tr>    <tr>      <td>PSETEX key milliseconds value</td>      <td>这个命令和SETEX相似，但它以毫秒为单位设置key的生存时间</td>    </tr>    <tr>      <td>INCR key</td>      <td>将key中存储的数字值增一</td>    </tr>    <tr>      <td>INCRBY key increment</td>      <td>将key所存储的值加上给定的增量值（increment）</td>    </tr>    <tr>      <td>INCRBYFLOAT key increment</td>      <td>将 key 所储存的值加上给定的浮点增量值（increment）</td>    </tr>    <tr>      <td>DECR key</td>      <td>将key中存储的数字值减一</td>    </tr>    <tr>      <td>DECRBY key decrementkey</td>      <td>所储存的值减去给定的减量值（decrement）</td>    </tr>    <tr>      <td>APPEND key value</td>      <td>如果 key 已经存在并且是一个字符串，APPEND 命令将 指定value 追加到改 key 原来的值（value）的末尾</td>    </tr>  </tbody></table><blockquote>  <p>应用场景：<br>常规计数：微博数、粉丝数等。</p></blockquote><h2 id="Hash（字典）"><a href="#Hash（字典）" class="headerlink" title="Hash（字典）"></a>Hash（字典）</h2><p>我们可以将Redis中的Hashes类型看成具有String Key和String Value的map容器。<br>该类型非常适合用于存储值对象的信息。如Username、Password和Age等。如果Hash中包含很少的字段，那么该类型的数据也将仅占用很少的磁盘空间。</p><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>HDEL key field [field2]</td>      <td>删除一个或多个哈希表字段</td>    </tr>    <tr>      <td>HEXISTS key field</td>      <td>查看哈希表key中，指定的字段是否存在</td>    </tr>    <tr>      <td>HGET key field</td>      <td>获取存储在哈希表中指定字段的值</td>    </tr>    <tr>      <td>HGETALL key</td>      <td>获取在哈希表中指定key的所有字段和值</td>    </tr>    <tr>      <td>HINCRBY key field increment</td>      <td>为哈希表key中的指定字段的整数值加上增量increment</td>    </tr>    <tr>      <td>HINCRBYFLOAT key field increment</td>      <td>为哈希表key中的指定字段的浮点数值加上增量increment</td>    </tr>    <tr>      <td>HKEYS key</td>      <td>获取所有哈希表中的字段</td>    </tr>    <tr>      <td>HLEN key</td>      <td>获取哈希表中字段的数量</td>    </tr>    <tr>      <td>HMGET key field1 [field2]</td>      <td>获取所有给定字段的值</td>    </tr>    <tr>      <td>HMSET key field1 value1 [field2 value2]</td>      <td>同时将多个field-value（域-值）对设置到哈希表key中</td>    </tr>    <tr>      <td>HSET key field value</td>      <td>将哈希表key中的字段field的值设为value</td>    </tr>    <tr>      <td>HSETNX key field value</td>      <td>只有在字段field不存在时，设置哈希表字段的值</td>    </tr>    <tr>      <td>HVALS key</td>      <td>获取哈希表中所有值</td>    </tr>    <tr>      <td>HSCAN key cursor [MATCH pattern] [COUNT count]</td>      <td>迭代哈希表中的键值对</td>    </tr>  </tbody></table><blockquote>  <p>应用场景：存储部分变更的数据，如用户信息等。</p></blockquote><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表一样，我们可以在其头部和尾部添加新的元素。在插入时，如果该键并不存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除，那么该键也将会被从数据库中删除。List中可以包含的最大元素数量是4294967295。</p><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>BLPOP key1 [key2] timeout</td>      <td>移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>    </tr>    <tr>      <td>BRPOP key1 [key2] timeout</td>      <td>移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>    </tr>    <tr>      <td>BRPOPLPUSH source destination timeout</td>      <td>从列表弹出一个值，将弹出的元素插入到另外一列表中并返回它；如果列表没有元素会阻塞列表直到等到</td>    </tr>    <tr>      <td>LINDEX key index</td>      <td>通过索引获取列表中的元素</td>    </tr>    <tr>      <td>LINSERT key BEFORE/AFTER pivot value</td>      <td>在列表的元素前/后插入元素</td>    </tr>    <tr>      <td>LLen key</td>      <td>获取列表长度</td>    </tr>    <tr>      <td>LPOP key</td>      <td>移出并获取列表的第一个元素</td>    </tr>    <tr>      <td>LPUSH key value1 [value2]</td>      <td>将一个或多个值插入到列表头部</td>    </tr>    <tr>      <td>LPUSHX key value</td>      <td>将一个值插入到已存在的列表头部</td>    </tr>    <tr>      <td>LRANGE key start stop</td>      <td>获取列表指定范围内的元素</td>    </tr>    <tr>      <td>LREM key count value</td>      <td>移出列表元素</td>    </tr>    <tr>      <td>LSET key index value</td>      <td>通过索引设置列表元素的值</td>    </tr>    <tr>      <td>LTRIM key start stop</td>      <td>对一个列表进行修剪（trim），就是说，让列表只保留指定区间内的元素，不在指定区间内的元素都将被删除</td>    </tr>    <tr>      <td>RPOP key</td>      <td>移出并获取列表最后一个元素</td>    </tr>    <tr>      <td>RPOPLPUSH source destination</td>      <td>移出列表的最后一个元素，并将该元素加到另一个列表并返回</td>    </tr>    <tr>      <td>RPUSH key value1 [value2]</td>      <td>在列表中添加一个或多个值</td>    </tr>    <tr>      <td>RPUSHX key value</td>      <td>为已存在的列表添加值</td>    </tr>  </tbody></table><blockquote>  <p>应用场景：消息队列系统，比如sina微博。<br>在Redis中我们的最新微博ID使用了常驻缓存，这是一直更新的。但是做了限制不能超过5000个ID,因此获取ID的函数会一直询问Redis。只有在start/count参数超出了这个范围的时候，才需要去访问数据库。<br>系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，而主页或第一个评论页是不会麻烦到硬盘上的数据库。</p></blockquote><h2 id="SET-集合"><a href="#SET-集合" class="headerlink" title="SET (集合)"></a>SET  (集合)</h2><p>Set类型看作为没有排序的字符集合。Set可包含的最大元素数量是4294967295。如果多次添加相同元素，Set中将仅保留该元素的一份拷贝。</p><table>  <thead>    <tr>      <th>名令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>SADD key member1 [member2]</td>      <td>向集合添加一个或多个成员</td>    </tr>    <tr>      <td>SCARD key</td>      <td>获取集合的成员数</td>    </tr>    <tr>      <td>SDIFF key1 [key2]</td>      <td>返回给定所有集合的差集</td>    </tr>    <tr>      <td>SDIFFSTORE destination key1 [key2]</td>      <td>返回给定所有集合的差集并存储在destination中</td>    </tr>    <tr>      <td>SISMEMBER key member</td>      <td>判断member元素是否是集合key的成员</td>    </tr>    <tr>      <td>SMEMBERS key</td>      <td>返回集合中的所有成员</td>    </tr>    <tr>      <td>SMOVE source destination member</td>      <td>将member元素从source集合移动到destination集合</td>    </tr>    <tr>      <td>SPOP key</td>      <td>移除并返回集合中的一个随机元素</td>    </tr>    <tr>      <td>SRANDMEMBER key [count]</td>      <td>返回集合中一个或者多个随机数</td>    </tr>    <tr>      <td>SREM key member1 [member2]</td>      <td>移除集合中一个或多个成员</td>    </tr>    <tr>      <td>SUNION key1 [key2]</td>      <td>返回所有给定集合的并集</td>    </tr>    <tr>      <td>SUNIONSTORE destination key1 [key2]</td>      <td>所有给定集合的并集存储在destination集合中</td>    </tr>    <tr>      <td>SSCAN key cursor [MATCH pattern] [COUNT count]</td>      <td>迭代集合中的元素</td>    </tr>  </tbody></table><blockquote>  <p>应用场景：<br>在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。<br>Redis还为集合提供了求交集、并集、差集等操作，可以非常方便地实现如共同关注、共同喜好、共同好友等功能，对上面的所有集合操作，还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的结合中。</p></blockquote><h2 id="SortedSet-（有序集合）"><a href="#SortedSet-（有序集合）" class="headerlink" title="SortedSet （有序集合）"></a>SortedSet  （有序集合）</h2><p>Sorted-Set中的每一个成员都会有一个分数（score）与之关联，Redis正是通过分数来为集合中的成员进行从小到大的排序。成员是唯一的，但是分数（score）却是可以重复的。<br>集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是O(1)。集合中最大的成员数为2³²-1（4294967295,  每个集合可存储40多亿个成员）。</p><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>ZADD key score1 member1 [score2 member2]</td>      <td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>    </tr>    <tr>      <td>ZCARD key</td>      <td>获取有序集合的成员数</td>    </tr>    <tr>      <td>ZCOUNT key min max</td>      <td>计算在有序集合中指定区间分数的成员数</td>    </tr>    <tr>      <td>ZINCRBY key increment member</td>      <td>有序集合中对指定成员的分数加上增量increment</td>    </tr>    <tr>      <td>ZINTERSTORE destination numkeys key [key …]</td>      <td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合key中</td>    </tr>    <tr>      <td>ZLEXCOUNT key min max</td>      <td>在有序集合中计算指定字典区间内成员数量</td>    </tr>    <tr>      <td>ZRANGE key start stop [WITHSCORES]</td>      <td>通过索引区间返回有序集合中指定区间内的成员</td>    </tr>    <tr>      <td>ZRANGEBYLEX key min max [LIMIT offset count]</td>      <td>通过字典区间返回有序集合的成员</td>    </tr>    <tr>      <td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td>      <td>通过分数返回有序集合指定区间内的成员</td>    </tr>    <tr>      <td>ZRANK key member</td>      <td>返回有序集合中指定成员的索引</td>    </tr>    <tr>      <td>ZREM key member [member …]</td>      <td>移除有序集合中的一个或多个成员</td>    </tr>    <tr>      <td>ZREMRANGEBYLEX key min max</td>      <td>移除有序集合中给定的字典区间的所有成员</td>    </tr>    <tr>      <td>ZREMRANGEBYRANK key start stop</td>      <td>移除有序集合中给定的排名区间的所有成员</td>    </tr>    <tr>      <td>ZREMRANGEBYSCORE key min max</td>      <td>移除有序集合中给定的分数区间的所成员</td>    </tr>    <tr>      <td>ZREVRANGE key start stop [WITHSCORES]</td>      <td>返回有序集合中指定区间的成员，通过索引，分数从高到低</td>    </tr>    <tr>      <td>ZREVRANGEBYSCORE key max min [WITH SCORES]</td>      <td>返回有序集合中指定分数区间内的成员，分数从高到低排序</td>    </tr>    <tr>      <td>ZREVRANK key member</td>      <td>返回有序集合中指定成员的排名，有序集合成员按分数值递减（从大到小）排序</td>    </tr>    <tr>      <td>ZSCORE key member</td>      <td>返回有序集合中，成员的分数值</td>    </tr>    <tr>      <td>ZUNIONSTORE destination nunkeys key [key …]</td>      <td>计算给定的一个或多个有序集的并集，并存储在新的key中</td>    </tr>    <tr>      <td>ZSCAN key cursor [MATCH pattern] [COUNT count]</td>      <td>迭代有序集合中的元素（包括元素成员和分数）</td>    </tr>  </tbody></table><blockquote>  <p>应用场景：<br>排行榜应用，取TOP    N操作这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的SortedSet了，将要排序的值设置成sorted    set的score,将具体的数据设置成相应的value，每次只需要执行一条ZADD命令即可。</p></blockquote><h2 id="消息模式"><a href="#消息模式" class="headerlink" title="消息模式"></a>消息模式</h2><p>Redis发布消息通常有两种模式：</p><ol>  <li>队列模式（queuing）</li>  <li>发布-订阅模式（publish-subscribe）<br>任务队列：顾名思义，就是“传递消息的队列”。与任务对列进行交互的实体有两类，一类是生产者（producer），另一类则是消费者（consumer）。生产者将需要处理的任务放入任务队列中，而消费者则不断地从任务独立中读入任务信息并执行。</li></ol><p>任务队列的好处：</p><ol>  <li>松耦合</li>  <li>生产者消费者只需按照约定的任务描述格式，进行编写代码</li>  <li>易于扩展</li>  <li>多消费者模式下，消费者可以分布在多个不同的服务器中，由次降低单台服务器的负载</li></ol><h2 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h2><p>其实从Pub/Sub的机制来看，它更像是一个广播系统，多个Subscriber可以订阅多个Channel，多个Publisher可以往多个Channel中发布消息。可以简单的理解：</p><blockquote>  <p>Subscriber：收音机，可以收到多个频道，并以队列方式显示<br>Publisher：电台，可以往不同的FM频道中发消息<br>Channel：不同频率的FM频道</p></blockquote><h3 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h3><p><strong>一个Publisher，多个Subscriber模型</strong><br>可以作为消息队列或者消息管道。<br>主要应用：通知、公告。<br><strong>多个Publisher，一个Subscriber模型</strong><br>可以将Pub/Sub做成独立的HTTP接口，各应用程序作为Publisher向Channel中发送消息，Subscriber端收到消息后执行相应的业务逻辑，比如写数据库，显示等等。<br>主要应用：排行榜、投票、计数。<br><strong>多个Publisher，多个Subscriber模型</strong><br>顾名思义，就是可以向不同的Channel中发送消息，由不同的Subscriber接收。<br>主要应用：群聊、聊天。</p><h3 id="实践发布订阅"><a href="#实践发布订阅" class="headerlink" title="实践发布订阅"></a>实践发布订阅</h3><p>发布订阅命令</p><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>PUBLISH channel msg</td>      <td>将信息message发送到指定的频道channel</td>    </tr>    <tr>      <td>SUBSCRIBE channel [channel …]</td>      <td>订阅频道，可以同时订阅多个频道</td>    </tr>    <tr>      <td>UNSUBSCRIBE [channel …]</td>      <td>取消订阅指定的频道，如果不指定频道，则会取消订阅所有频道</td>    </tr>    <tr>      <td>PSUBSCRIBE pattern [pattern …]</td>      <td>订阅一个或个符合给定模式的频道，每个模式以*作为匹配符，比如it*匹配所有以it开头的频道（it.news、it.blog、it.tweets等），new.*匹配所有以news.开头的频道</td>    </tr>    <tr>      <td>PUNSUBSCRIBE pattern [pattern…]</td>      <td>退订指定的规则，如果没有参数则会退订所有规则</td>    </tr>    <tr>      <td>PUBSUB subcommand [argument [argument …]]</td>      <td>查看订阅与发布系统状态</td>    </tr>  </tbody></table><font color="red" size="2">注意：使用发布订阅模式实现的消息队列，当有客户端订阅channel后只能收到后续发布到该频道的消息，之前发送的不会缓存，必须Provider和Consumer同时在线。</font><h3 id="消息队列系统对比"><a href="#消息队列系统对比" class="headerlink" title="消息队列系统对比"></a>消息队列系统对比</h3><p>客户端在执行订阅命令只有进入了订阅状态，只能接受SUBSCRIBE、PSUBSCRIBE、UNSUBSCRIBE、PUNSUBSCRIBE四个命令。<br>开启的订阅客户端，无法收到该频道之前的消息，因为Redis不会对发布的消息进行持久化。<br>和很多专业的消息队列系统（例如kafka、rocketMQ）相比，Redis的发布订阅略显粗糙，例如：无法实现消息堆积和回溯。但胜在足够简单，如果当前场景可以容忍这些缺点，也不失为一个不错的选择。</p><h2 id="Redis事务管理"><a href="#Redis事务管理" class="headerlink" title="Redis事务管理"></a>Redis事务管理</h2><p>redis中的事务跟关系型数据库中的事务是一个相似的概念，但是有不同之处。<br>关系型数据库事务执行失败后面的sql语句不再执行，而redis中的一条命令执行失败，其余的命令照常执行。<br>redis中开启一个事务是使用multi，相当于begin/start  transaction，exec提交事务，discard取消队列命令（非回滚操作）。<br>redis、mysql事务对比：</p><table>  <thead>    <tr>      <th></th>      <th>Mysql</th>      <th>Redis</th>    </tr>  </thead>  <tbody>    <tr>      <td>开启</td>      <td>start/begin transaction</td>      <td>multi</td>    </tr>    <tr>      <td>语句</td>      <td>普通SQL</td>      <td>普通命令</td>    </tr>    <tr>      <td>失败</td>      <td>rollback回滚</td>      <td>discard取消（是队列里面的命令不执行，队列里面的任务根本就没有执行。而不是执行了也可以撤回来）</td>    </tr>    <tr>      <td>成功</td>      <td>commit</td>      <td>exec</td>    </tr>  </tbody></table><h3 id="Redis事务命令"><a href="#Redis事务命令" class="headerlink" title="Redis事务命令"></a>Redis事务命令</h3><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>DISCARD</td>      <td>取消事务，放弃执行事务块内的所有命令</td>    </tr>    <tr>      <td>EXEC</td>      <td>执行所有事务块内的命令</td>    </tr>    <tr>      <td>MULTI</td>      <td>标记一个事务块的开始</td>    </tr>    <tr>      <td>UNWATCH</td>      <td>取消WATCH命令对所有key的监视</td>    </tr>    <tr>      <td>WATCH key [key …]</td>      <td>监视一个或多个key,如果在事务执行之前这个或这些被其他命令所改动，那么事务将被打断</td>    </tr>  </tbody></table><p>事务执行举例<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ZADD salary 2000 user1</span><br><span class="line">ZADD salary 3000 user2</span><br><span class="line">ZRANGE salary 0 -1 WITHSCORES</span><br><span class="line">MULTI</span><br><span class="line">ZINCRBY salary 1000 user1</span><br><span class="line">ZINCRBY salary -1000 user2</span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure></p><h3 id="redis中事务的锁机制"><a href="#redis中事务的锁机制" class="headerlink" title="redis中事务的锁机制"></a>redis中事务的锁机制</h3><p>举例：我正在买票 Ticket -1 ，money -100<br>而票只有1张，如果在multi之后，和exec之前，票被别人买了，即ticket变成了0。<br>我该如何观察这种情景，并不再提交：</p><blockquote>  <p>悲观的想法：<br>世界充满危险，肯定有人和我抢，给ticket上锁，只有我能操作。[悲观锁]<br>乐观的想法：<br>没有那么多人和我抢，只要注意，有没有人更改ticket的值就可以了。[乐观锁]</p></blockquote><p>Redis的事务中，启用的是乐观锁，只负责监测key有没有被改动。</p><h2 id="Redis服务管理命令"><a href="#Redis服务管理命令" class="headerlink" title="Redis服务管理命令"></a>Redis服务管理命令</h2><table>  <thead>    <tr>      <th>命令</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>BGREWRITEAOF</td>      <td>异步执行一个AOF文件重写操作</td>    </tr>    <tr>      <td>BGSAVE</td>      <td>在后台异步保存当前数据库的数据到磁盘</td>    </tr>    <tr>      <td>CLIENT KILL [ip:port] [ID client-id]</td>      <td>关闭客户端连接</td>    </tr>    <tr>      <td>CLINET LIST</td>      <td>后去连接到服务器的客户端连接列表</td>    </tr>    <tr>      <td>CLINET GETNAME</td>      <td>后去连接名称</td>    </tr>    <tr>      <td>CLINET PAUSE timeout</td>      <td>在指定时间内终止运行来自客户端的命令</td>    </tr>    <tr>      <td>CLINET SETNAME connection-name</td>      <td>设置当前连接的名称</td>    </tr>    <tr>      <td>CLUSTER SLOTS</td>      <td>获取集群节点的映射数组</td>    </tr>    <tr>      <td>COMMAND</td>      <td>获取redis命令详情数组</td>    </tr>    <tr>      <td>COMMAND COUNT</td>      <td>获取redis命令总数</td>    </tr>    <tr>      <td>COMMAND GETKEYS</td>      <td>获取给定命令的所有键</td>    </tr>    <tr>      <td>TIME</td>      <td>返回当前服务器时间</td>    </tr>    <tr>      <td>COMMAND INFO command-name [command-name…]</td>      <td>获取指定redis命令描述的数组</td>    </tr>    <tr>      <td>CONFIG GET parameter</td>      <td>获取指定配置参数的值</td>    </tr>    <tr>      <td>CONFIG REWRITE</td>      <td>对启动redis服务器时所指定的redis.conf配置文件进行改写</td>    </tr>    <tr>      <td>CONFIG SET parameter value</td>      <td>修改redis配置参数，无需重启</td>    </tr>    <tr>      <td>CONFIG RESETSTAT</td>      <td>重置INFO命令中的某些统计数据</td>    </tr>    <tr>      <td>DBSIZE</td>      <td>返回当前数据库的key的数量</td>    </tr>    <tr>      <td>DEBUG OBJECT key</td>      <td>获取key的调试信息</td>    </tr>    <tr>      <td>DEBUG SEGFAULT</td>      <td>让redis服务崩溃</td>    </tr>    <tr>      <td>FLUSHALL</td>      <td>删除所有数据库的所有key</td>    </tr>    <tr>      <td>FLUSHDB</td>      <td>删除当前数据库的所有key</td>    </tr>    <tr>      <td>INFO [section]</td>      <td>获取redis服务器的各种信息和统计数值</td>    </tr>    <tr>      <td>LASTSAVE</td>      <td>返回最近一次redis成功将数据保存到磁盘上的时间，以unix时间戳格式表示</td>    </tr>    <tr>      <td>MONITOR</td>      <td>实时打印出redis服务器接受到的命令，调试用</td>    </tr>    <tr>      <td>ROLE</td>      <td>返回主从实例所属的角色</td>    </tr>    <tr>      <td>SHUTDOWN [NOSAVE] [SAVE]</td>      <td>异步保存数据到硬盘，并关闭服务器</td>    </tr>    <tr>      <td>SLAVEOF host port</td>      <td>将当前服务器转变为指定服务器的从属服务器（slave server）</td>    </tr>    <tr>      <td>SLOWLOG subcommand [argument]</td>      <td>管理redis的慢日志</td>    </tr>    <tr>      <td>SYNC</td>      <td>用于复制功能（replication）的内部命令</td>    </tr>  </tbody></table><h2 id="Redis慢日志查询"><a href="#Redis慢日志查询" class="headerlink" title="Redis慢日志查询"></a>Redis慢日志查询</h2><p>Slow log是Redis用来记录查询执行时间的日志系统<br>slow log保存在内存里面，读写速度非常快<br>可以通过修改redis.conf文件或者用CONFIG  GET和CONFIG SET 命令对他们动态地进行修改<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis.conf修改</span></span><br><span class="line">slowlog-log-slower-than 10000 超过多少微秒</span><br><span class="line"><span class="comment">#命令行修改</span></span><br><span class="line">CONFIG SET slowlog-log-slower-than 10000</span><br><span class="line">CONFIG SET sloelog-max-len 1000保存多少条慢日志</span><br><span class="line">CONFIG GET slow*</span><br><span class="line">SLOWLOG GET</span><br><span class="line">SLOWLOG RESET</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align:c
      
    
    </summary>
    
      <category term="redis" scheme="https://www.kapyan.top/categories/redis/"/>
    
    
      <category term="redis管理" scheme="https://www.kapyan.top/tags/redis%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于Redis的一些了解</title>
    <link href="https://www.kapyan.top/posts/424997909.html"/>
    <id>https://www.kapyan.top/posts/424997909.html</id>
    <published>2019-02-11T02:06:50.000Z</published>
    <updated>2019-02-14T02:52:39.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>  Redis是一个使用ANSIC编写的开源、支持网络、基于内存、可选持久性的键值对（key-value）存储数据库。从2015年6月开始，Redis的开发由Redis  Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。在2013年5月之前，其开发由VMware赞助。根据月度排行榜网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。</p><h2 id="软件获取和帮助"><a href="#软件获取和帮助" class="headerlink" title="软件获取和帮助"></a>软件获取和帮助</h2><p>官方网站：<a href="https://redis.io">https://redis.io</a><br>官方各版本下载地址：<br><a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a><br>Redis  中文命令参考：<a href="http://redisdoc.com">http://redisdoc.com</a><br>中文网站1：<a href="http://redis.cn">http://redis.cn</a><br>中文网站2：<a href="http://www.redis.net.cn">http://www.redis.net.cn</a></p><h2 id="Redis特性"><a href="#Redis特性" class="headerlink" title="Redis特性"></a>Redis特性</h2><ul>  <li>高速读写，数据类型丰富</li>  <li>支持持久化，多种内存分配及回收策略</li>  <li>支持弱事务，消息队列、消息订阅</li>  <li>支持高可用，支持分布式分片集群</li></ul><h2 id="企业缓存数据库解决方案对比"><a href="#企业缓存数据库解决方案对比" class="headerlink" title="企业缓存数据库解决方案对比"></a>企业缓存数据库解决方案对比</h2><p><strong>Memcached</strong></p><ul>  <li>优点：高性能读写、单一数据类型、支持客户端分布式集群、一致性hash多核结构、多线程读写性能高。</li>  <li>缺点：无持久化、节点故障可能出现缓存穿透、分布式需要客户端实现、跨机房数据同步困难、架构扩容复杂度高。</li></ul><p><strong>Redis</strong></p><ul>  <li>优点：高性能读写、多数据类型支持、数据持久化、高可用架构、支持自定义虚拟内存、支持分布式分片集群、单线程读写性能极高。</li>  <li>缺点：多线程读写较Memcached慢。</li></ul><p><strong>Tair</strong></p><ul>  <li>优点：高性能读写、支持三种存储引擎（ddb、rdb、ldb）、支持高可用、支持分布式分片集群、支撑了几乎所有淘宝业务的缓存。</li>  <li>缺点：单机情况下，读写性能较其他两种产品慢。</li></ul><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><p>一键安装脚本，适用于centos7.x系统<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">version=<span class="string">"4.0.11"</span></span><br><span class="line">redis_dir=/usr/<span class="built_in">local</span>/redis-<span class="variable">$version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编译安装</span></span><br><span class="line">yum -y install gcc</span><br><span class="line">wget http://download.redis.io/releases/redis-<span class="variable">$&#123;version&#125;</span>.tar.gz || <span class="built_in">exit</span> 1</span><br><span class="line">tar xf redis-<span class="variable">$&#123;version&#125;</span>.tar.gz &amp;&amp; <span class="built_in">cd</span> redis-<span class="variable">$version</span></span><br><span class="line">make || make MALLOC=libc </span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/redis-<span class="variable">$&#123;version&#125;</span>/bin</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/redis-<span class="variable">$&#123;version&#125;</span>/etc</span><br><span class="line">cp redis.conf /usr/<span class="built_in">local</span>/redis-<span class="variable">$&#123;version&#125;</span>/etc </span><br><span class="line"><span class="built_in">cd</span> src </span><br><span class="line">cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-sentinel redis-server redis-trib.rb /usr/<span class="built_in">local</span>/redis-<span class="variable">$&#123;version&#125;</span>/bin</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/redis-<span class="variable">$&#123;version&#125;</span> /usr/<span class="built_in">local</span>/redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#后台启动redis</span></span><br><span class="line">sed -i <span class="string">'s/daemonize no/daemonize yes/g'</span> /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'redis_path=/usr/local/redis/bin'</span> &gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:$redis_path'</span>&gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改内核参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"vm.overcommit_memory = 1"</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis启动脚本</span></span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/redis/bin/redis&lt;&lt;EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># redis Startup script for Redis Server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># description: Redis is an open source, advanced key-value store.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># processname: redis-server</span></span><br><span class="line"></span><br><span class="line">BIN=<span class="string">"/usr/local/redis/bin"</span></span><br><span class="line">CONFIG=<span class="string">"/usr/local/redis/etc/redis.conf"</span></span><br><span class="line">PIDFILE=<span class="string">"/var/run/redis_6379.pid"</span></span><br><span class="line"><span class="comment">### Read configuration</span></span><br><span class="line"></span><br><span class="line">prog=<span class="string">"redis-server"</span></span><br><span class="line">desc=<span class="string">"Redis Server"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">        [ -e \<span class="variable">$PIDFILE</span> ] &amp;&amp; PID=\`cat \<span class="variable">$PIDFILE</span>\` || PID=0</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ \<span class="variable">$PID</span> -ne 0 ];<span class="keyword">then</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"\$desc already running...."</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"Starting \$desc "</span></span><br><span class="line">             \<span class="variable">$BIN</span>/\<span class="variable">$prog</span> \<span class="variable">$CONFIG</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">        [ -e \<span class="variable">$PIDFILE</span> ] &amp;&amp; PID=\`cat \<span class="variable">$PIDFILE</span>\` || PID=0</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [  \<span class="variable">$PID</span> -ne 0 ];<span class="keyword">then</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"Stopping \$desc "</span></span><br><span class="line">             <span class="built_in">kill</span> -QUIT \<span class="variable">$PID</span></span><br><span class="line">             rm -rf \<span class="variable">$PIDFILE</span> </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">"\$desc is not running.... "</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"\$1"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        restart</span><br><span class="line">        ;;</span><br><span class="line">   *)</span><br><span class="line">        <span class="built_in">echo</span> \$<span class="string">"Usage: \$0 &#123;start|stop|restart|condrestart|status&#125;"</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/redis/bin/redis</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"[Unit]\nDescription=redis\nAfter=network.target\n[Service]\nType=forking\nExecStart=/usr/local/redis/bin/redis start\nExecReload=/usr/local/redis/bin/redis restart\nExecStop=/usr/local/redis/bin/redis stop\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target"</span>&gt;/usr/lib/systemd/system/redis.service</span><br><span class="line">chmod 754 /usr/lib/systemd/system/redis.service</span><br><span class="line">systemctl <span class="built_in">enable</span> redis</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'redis安装完成，请使用"systemctl start redis"启动redis服务...'</span></span><br></pre></td></tr></table></figure></p><h2 id="redis-conf配置说明"><a href="#redis-conf配置说明" class="headerlink" title="redis.conf配置说明"></a>redis.conf配置说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">daemonize no/yes<span class="comment">#后台启动</span></span><br><span class="line">port 6379<span class="comment">#默认端口</span></span><br><span class="line">timeout60<span class="comment">#设置客户端连接时的超时时间，单位为秒，当客户端在这段时间内没有发出任何指令，将关闭该连接。默认值为0，表示不关闭</span></span><br><span class="line">tcp-keepalive 300<span class="comment">#单位是秒，表示将周期性的使用SO_KEEPALIVE检测客户端是否还处于健康状态，避免服务器一直阻塞，官方建议300s,如果设置为0，则不会周期性的检测</span></span><br><span class="line">appendonly no/yes<span class="comment">#AOF日志开关是否打开</span></span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis.log  <span class="comment">#日志文件位置</span></span><br><span class="line">loglevel notice<span class="comment">#定义日志级别。默认值为notice，可选debug(记录大量日志信息，适用于开发、测试阶段)、verbose(较多日志信息)、notice(适量日志信息，适用于生产环境)、warning(仅有部分重要，关键信息才会被记录)</span></span><br><span class="line">databases 16<span class="comment">#设置数据库的数目。默认的数据库是DB0，可以在每个连接上使用select &lt;dbid&gt;命令选择一个不同的数据库，dbid是一个介于0到databases -1之间的数值。默认值是16，也就是默认Redis有16个数据库</span></span><br><span class="line">dbfilename dump.rdb <span class="comment">#RDB持久化数据文件</span></span><br><span class="line"><span class="built_in">bind</span> 10.0.0.51 ip2 ip3 ip4 <span class="comment">#指定IP地址进行监听</span></span><br><span class="line">protected-mode yes/no <span class="comment">#禁止protected-mode（保护模式，是否只允许本地访问）</span></span><br><span class="line">requirepass root<span class="comment">#增加认证密码 &#123;password&#125;</span></span><br><span class="line">maxclients1000<span class="comment">#设置客户端最大并发连接数，默认无限制。当客户端连接数达到限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span></span><br><span class="line">maxmemory1024000000<span class="comment">#设置redis最大占用内存，单位为字节</span></span><br><span class="line">maxmemory-policynoeviction </span><br><span class="line"><span class="comment">#当内存使用达到最大值时，redis使用的清除策略：</span></span><br><span class="line">volatile-lru    利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used ) </span><br><span class="line">allkeys-lru     利用LRU算法移除任何key </span><br><span class="line">volatile-random 移除设置过过期时间的随机key </span><br><span class="line">allkeys-random  移除随机key</span><br><span class="line">volatile-ttl    移除即将过期的key(minimal TTL) </span><br><span class="line">noeviction      不移除任何key，只是返回一个写错误 ，默认选项</span><br><span class="line">maxmemory-samples 10<span class="comment">#LRU和minimal TTL算法都不是精准的算法，但是相对精确的算法（为了节省内存）。可以通过maxmemory-samples设置样本数，redis默认选择5个样本进行检测，如果增加，会提高LRU或TTL的精准度，redis作者测试的结果是当这个配置为10时已经非常接近全量LRU的精准度了，并且增加maxmemory-samples会导致在主动清理时消耗更多的CPU时间。</span></span><br></pre></td></tr></table></figure><h2 id="Redis数据持久化"><a href="#Redis数据持久化" class="headerlink" title="Redis数据持久化"></a>Redis数据持久化</h2><p>redis提供了多种不同级别的持久化方式：一种是RDB，另一种是AOF。</p><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><p>可以在指定的时间间隔内生成数据集的时间点快照（point-in-time-snapshot）。<br>在默认情况下，Redis 将数据库快照保存在名字为  dump.rdb的二进制文件中。你可以对 Redis 进行设置，让它在“ N 秒内数据集至少有 M  个改动”这一条件被满足时，自动保存一次数据集。也可以通过调用 SAVE或者 BGSAVE，手动让 Redis 进行数据集保存操作。比如说，以下设置会让  Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时，自动保存一次数据集:<code>save 60 1000</code><br>这种持久化方式被称为快照  snapshotting。<br>当 Redis 需要保存 dump.rdb 文件时，服务器执行以下操作<br>Redis 调用forks.  同时拥有父进程和子进程。<br>子进程将数据集写入到一个临时 RDB 文件中。<br>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB  文件替换原来的 RDB 文件，并删除旧的 RDB 文件。<br>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。<br>优点：</p><ul>  <li>RDB是一个非常紧凑（compact）的文件，它保存了Redis在某个时间点上的数据集。这种文件非常适合用于进行备份：比如说，可以在最近的24小时内，每小时备份一次RDB文件，并且在每个月的每一天，也备份一个RDB文件，即使遇到问题，也可以随时将数据集还原到不同的版本。</li>  <li>RDB非常适用于灾难恢复（disaster recovery）：他只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心。</li>  <li>RDB可以最大化Redis的性能：父进程在保存RDB文件时唯一要做的就是fork出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘I/O操作。</li>  <li>RDB在恢复大数据集时的速度比AOF的恢复速度要快。</li></ul><p>缺点：</p><ul>  <li>虽然Redis允许设置不同的保存点（save    point）来控制保存RDB文件的频率，但是，因为RDB文件需要保存整个数据集的状态，所以它并不是一个轻松的操作。可能至少5分钟才保存一次RDB文件。在这种情况下，一旦发生故障停机，可能会丢失好几分钟数据。</li>  <li>每次保存RDB的时候，Redis都要fork出一个子进程，并由子进程来进行实际的持久化工作。在数据集比较庞大时，fork可能会非常耗时，造成服务器在某某毫秒内停止处理客户端；如果数据集非常巨大，并且CPU时间非常紧张的话，这种停止时间甚至可能会长达整整一秒。虽然AOF重写也需要进行fork，但无论AOF重写的执行间隔有多长，数据的耐久性都不会有任何损失。</li></ul><h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><p>记录服务器执行的所有写操作命令，并在服务器启动前，通过重新执行这些命令来还原数据集。AOF文件中的命令全部以Redis协议的格式来保存，新命令会被追加到文件的末尾。<br>Redis还可以在后台对AOF文件进行重写（rewrite），使得AOF文件的体积不会超出保存数据集状态所需要的实际大小。Redis还可以同时使用AOF持久化和RDB持久化。在这种情况下，当Redis重启时，它会优先使用AOF文件来还原数据集，因为AOF文件保存的数据集通常比RDB文件所保存的数据集更完整。<br>甚至可以关闭持久化功能，让数据只在服务器运行时存在。<br>只进行追加操作的文件（append-only  file，AOF）<br>快照功能并不是非常耐久：如果Redis因为某些原因而造成故障停机，那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。尽管对于某些程序来说，数据的耐久性不是最重要的考虑因素，但是对于那些追求完全耐久能力的程序员来说，快照功能就不太适用了。<br>从1.1版本开始，Redis增加了一种完全耐久的持久化方式：AOF持久化。<br>可以通过修改配置文件来打开AOF功能：<code>appendonly    yes</code><br>每当Redis执行一个改变数据集的命令方式（比如SET），这个命令就会被追加到AOF文件的末尾，当Redis重启时，程序就可以通过重新执行AOF文件中的命令来达到重建数据集的目的。</p><p>优点：</p><ul>  <li>使用AOF会让Redis更加耐久：可以使用不同的fsync策略：无fsync，每秒fsync，每次写的时候fsync。使用默认的每秒fsync策略，Redis的性能依然很好（fsync是由后台线程进行处理的，主线程会尽力处理客户端请求），一旦出现故障，最多丢失1秒的数据。</li>  <li>Redis可以在AOF文件体积变得过大时，自动在后台对AOF进行重写：重写后的新AOF文件包含了恢复当前数据集所需要的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建新AOF文件的过程中，会继续将命令追加到现有的AOF文件里面，即使重写过程中发生停机，现有的AOF文件也不会丢失。</li>  <li>一旦新AOF文件创建完毕，Redis就会从旧AOF文件切换到新AOF文件，并开始对新AOF文件进行追加操作。</li>  <li>AOF文件有序地保存了对数据库执行的所有写入操作，这些写入操作以Redis协议的格式保存，因此AOF文件的内容非常容易被人读懂，对文件进行分析（parse）也很轻松。导出（export）AOF文件也非常简单：举个例子，如果不小心执行了FLUSHALL命令，但只要AOF文件未被重写，只要停止服务器，移除AOF文件末尾的FLUSHALL命令，并重启Redis，就可以将数据集恢复到FLUSHALL执行之前的状态。</li></ul><p>缺点：</p><ul>  <li>对于相同的数据集来说，AOF文件的体积通常要大于RDB文件的体积。根据所使用的fsync策略，AOF的速度可能会慢于RDB。</li>  <li>在一般情况下，每秒fsync的性能依然非常高，而关闭fsync可以让AOF的速度和RDB一样块，即使在高负荷之下也是如此。不过在处理巨大的写入载入时，RDB可以提供更有保证的最大延迟时间（latency）。</li>  <li>AOF在过去曾经发生过这样的bug：因为个别命令的原因，导致AOF文件在重新载入时，无法将数据集恢复成保存时的原样。（举个例子，阻塞命令BRPOPLPUSH就曾引起过这样的bug）测试套件里为这种情况添加了测试：他们会自动生成随机的、复杂的数据集，并通过重新载入这些数据来确保一切正常。虽然这种bug在AOF文件中并不常见，但是对比来说，RDB几乎是不可能出现这种bug的。</li></ul><h4 id="AOF日志重写"><a href="#AOF日志重写" class="headerlink" title="AOF日志重写"></a>AOF日志重写</h4><p>因为AOF的运作方式是不断地将命令追加到文件的末尾，所以随着写入命令的不断增加，AOF文件的体积也会变得越来越大。<br>举个例子，如果对一个计数器调用了100次INCR，那么仅仅是为了保存这个计数器的当前值，AOF文件就需要使用100条记录（entry）。然而实际上，只使用了一条SET命令已经足以保存计数器的当前值了，其余99条记录实际上都是多余的。<br>为了处理这种情况，Redis支持一种有趣的特性：可以在不打断服务客户端的情况下，对AOF文件进行重建（rebuild）。执行<code>BGREWRITEAOF</code>命令，Redis将生成一个新的AOF文件，这个文件包含重建当前数据集所需的最少命令。Redis2.2需要手动执行<code>BGREWRITEAOF</code>命令。</p><h4 id="AOF有多耐用"><a href="#AOF有多耐用" class="headerlink" title="AOF有多耐用"></a>AOF有多耐用</h4><p>可以配置Redis多久才将数据fysnc到磁盘一次。有三种方式：<br>每次有新命令追加到AOF文件时就执行一次fsync：非常慢，也非常安全。<br>每秒fsync一次：足够快（和使用RDB持久化差不多），并且在故障时只会丢失1秒钟的数据。<br>从不fsync:将数据交给操作系统来处理。更快，也更不安全的选择。<br>推荐（并且也是默认）的措施为每秒fsync一次，这种fsync策略可以兼顾速度和安全性。</p><h4 id="如果AOF文件损坏了怎么办"><a href="#如果AOF文件损坏了怎么办" class="headerlink" title="如果AOF文件损坏了怎么办"></a>如果AOF文件损坏了怎么办</h4><p>服务器可能在程序正在对AOF文件进行写入时停机，如果停机造成了AOF文件出错（corrupt），那么Redis在重启时会拒绝载入这个AOF文件，从而确保数据的一致性不会被破坏。当发生这种情况时，可以用以下方法来修复出错的AOF文件：<br>为现有的AOF文件创建一个备份。<br>使用Redis附带的redis-check-aof程序，对原来的AOF文件进行修复，<code>redis-check-aof    –fix</code><br>使用<code>diff -u</code>对比修复后的AOF文件和原始AOF文件的备份，查看两个文件之间的不同之处。（可选）<br>重启Redis服务器，等待服务器载入修复后的AOF文件，并进行数据恢复。</p><h3 id="如何选择使用哪种持久化方式"><a href="#如何选择使用哪种持久化方式" class="headerlink" title="如何选择使用哪种持久化方式"></a>如何选择使用哪种持久化方式</h3><p>一般来说，如果想达到足以媲美postgresql的数据安全性，应该同时使用两种持久化功能。<br>如果非常关心数据，但仍然可以承受数分钟以内的数据丢失，可以只使用RDB持久化。<br>很多用户都只使用AOF持久化，但并不推荐这种方式：因为定时生成RDB快照（snapshot）非常便于进行数据库备份，并且RDB恢复数据集的速度也要比AOF恢复的速度快，除此之外，使用RDB还可以避免之前提到的AOF程序的bug。</p><h3 id="AOF和RDB之间的相互作用"><a href="#AOF和RDB之间的相互作用" class="headerlink" title="AOF和RDB之间的相互作用"></a>AOF和RDB之间的相互作用</h3><p>在版本号大于等于2.4的Redis中，BGSAVE执行的过程中，不可以执行BGREWRITEAOF。<br>反过来说，在BGREWRITEAOF执行过程中，也不可执行BGSAVE。这可以防止两个Redis后台进程同时对磁盘进行大量的I/O操作。<br>如果BGSAVE正在执行，并且用户显示地调用BGREWRITEAOF命令，那么服务器将向用户回复一个OK状态，并告知用户，BGREWRITEAOF已经被预定执行：一旦BGSAVE执行完毕，BGREWRITEAOF就会正式开始。<br>当Redis启东时，如果RDB持久化和AOF持久化都被打开了，那么程序就会优先使用AOF文件来恢复数据集，因为AOF文件所保存的数据通常是最完整的。</p><h3 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h3><h4 id="RDB持久化配置"><a href="#RDB持久化配置" class="headerlink" title="RDB持久化配置"></a>RDB持久化配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RDB持久化基本配置</span></span><br><span class="line">save 900 1<span class="comment">#900秒（15分钟）内有一个更改</span></span><br><span class="line">save 300 10<span class="comment">#300秒（5分钟）内有10个更改</span></span><br><span class="line">save 6010000<span class="comment">#60秒内有10000次更改</span></span><br><span class="line"><span class="comment">#达到以上定义的配置时间时，就将内存数据持久化到磁盘</span></span><br><span class="line"><span class="comment">#RDB持久化高级配置</span></span><br><span class="line">stop-writes-on-bgsave-error yes  <span class="comment">#后台备份进程出错时，主进程是否停止写入？主进程不停止容易造成数据不一致</span></span><br><span class="line">rdbcompression yes<span class="comment">#导出的rdb文件是否压缩，如果rdb的大小很大的话，建议这么做</span></span><br><span class="line">rdbchecksum yes<span class="comment">#导入rdb恢复数据时，是否检验rdb的完整性 验证版本是否一致</span></span><br><span class="line">dbfilename dump.rdb  <span class="comment">#导出来的rdb文件名</span></span><br><span class="line">dir /data/redis/rdb   <span class="comment">#rdb的放置路径</span></span><br></pre></td></tr></table></figure><h4 id="AOF持久化配置"><a href="#AOF持久化配置" class="headerlink" title="AOF持久化配置"></a>AOF持久化配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#AOF持久化基本配置</span></span><br><span class="line">appendonly yes/no <span class="comment">#是否打开aof日志功能</span></span><br><span class="line">appendfsync always<span class="comment">#每1个命令，都立即同步到aof</span></span><br><span class="line">appendfsync everysec<span class="comment">#每秒写一次</span></span><br><span class="line">appendfsync no  <span class="comment">#写入工作交给操作系统，由操作系统判断缓冲区大小，统一写到aof</span></span><br><span class="line"><span class="comment">#AOF持久化高级配置</span></span><br><span class="line">no-appendfsync-on-rewrite yes/no <span class="comment">#正在导出rdb快照的过程中，是否停止同步AOF</span></span><br><span class="line">auto-aof-rewrite-percentage 100 <span class="comment">#aof文件大小比起上次重写时的大小，增长率100%时重写，缺点：业务开始的时候，会重复重写多次。</span></span><br><span class="line">auto-aof-rewrite-min-size 64mbo<span class="comment">#aof文件，至少超过64M时重写</span></span><br></pre></td></tr></table></figure><h3 id="RDB到AOF切换"><a href="#RDB到AOF切换" class="headerlink" title="RDB到AOF切换"></a>RDB到AOF切换</h3><p>在Redis2.2或以上版本，可以在不重启的情况下，从RDB切换到AOF：</p><ol>  <li>为最新的dump.rdb文件创建一个备份；</li>  <li>将备份放到一个安全的地方；</li>  <li>    <p>执行以下两条命令：</p>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli config <span class="built_in">set</span> appendonly yes</span><br><span class="line">redis-cli config <span class="built_in">set</span> save <span class="string">""</span></span><br></pre></td></tr></table></figure>  </li>  <li>    <p>确保写命令会被正确地追加到AOF文件的末尾</p>    <blockquote>      <p>执行说明：<br>执行的第一条命令开启了AOF功能：Redis会阻塞直到初始AOF文件创建完成为止，之后Redis会继续处理命令请求，并开始将写入命令追加到AOF文件末尾。<br>执行的第二条命令用于关闭RDB功能。这一步是可选的，也可以同时使用RDB和AOF这两种持久化功能。</p>    </blockquote>  </li></ol><h2 id="备份redis数据"><a href="#备份redis数据" class="headerlink" title="备份redis数据"></a>备份redis数据</h2><p>Redis对于数据备份是非常友好的，因为可以在服务器运行的时候对RDB文件进行复制：<br>RDB文件一旦被创建，就不会进行任何修改。当服务器要创建一个新的RDB文件时，它先将文件的内容保存在一个临时文件里面，当临时文件写入完毕时，程序才使用rename(2)原子地用临时文件替换原来的RDB文件。<br>这也就是说，无论何时，复制RDB文件都是绝对安全的。<br>创建一个定期任务（cron  job），每小时将一个RDB文件备份到一个文件夹，并且每天将一个RDB文件备份到另一个文件夹。<br>确保快照的备份都带有相应的日期和时间信息，每次执行定期任务脚本时，使用find命令来删除过期的快照：可以保留最近48小时内的快照，还可以保留最近一两个月的每日快照。<br>至少每天一次，将RDB备份到数据中心之外，或者至少备份到运行Redis服务器的物理机器之外。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;
&lt;p&gt;
  Redis是一个使用ANSIC编写的开源、支持网络、基于内存、可选持久性的键值对（key-value）存储数据库。从2015年6月开
      
    
    </summary>
    
      <category term="redis" scheme="https://www.kapyan.top/categories/redis/"/>
    
    
      <category term="redis" scheme="https://www.kapyan.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>zabbix添加nginx监控</title>
    <link href="https://www.kapyan.top/posts/4255676476.html"/>
    <id>https://www.kapyan.top/posts/4255676476.html</id>
    <published>2019-01-21T08:17:35.000Z</published>
    <updated>2019-02-14T02:59:23.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx开启监控模块"><a href="#nginx开启监控模块" class="headerlink" title="nginx开启监控模块"></a>nginx开启监控模块</h2><p>修改nginx的配置，在nginx配置的server域加入以下配置，然后重启nginx<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /nginx_status &#123;</span><br><span class="line">             stub_status on;</span><br><span class="line">             access_log off;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>执行命令:<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1/nginx_status</span><br></pre></td></tr></table></figure></p><p>可看到输出：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 3144 3144 3144 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure></p><h2 id="编辑nginx监控脚本"><a href="#编辑nginx监控脚本" class="headerlink" title="编辑nginx监控脚本"></a>编辑nginx监控脚本</h2><p>在需要监控的nginx服务器上新建文件”/etc/zabbix/scripts/nginx_monitor.sh”(scripts目录需创建)，加入以下內容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">status_url=<span class="string">"http://127.0.0.1/nginx_status"</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">status)</span><br><span class="line">countor=$(ps -C nginx --no-heading|wc -l)</span><br><span class="line">      <span class="keyword">if</span> [ <span class="variable">$&#123;countor&#125;</span> -eq <span class="string">"0"</span> ];<span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">"stop"</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">"running"</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">                ;;</span><br><span class="line"></span><br><span class="line">active_conn)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk -F <span class="string">":"</span> <span class="string">'NR==1&#123;print $2&#125;'</span></span><br><span class="line">;;</span><br><span class="line">accepts)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk <span class="string">'NR==3&#123;print $1&#125;'</span></span><br><span class="line">;;</span><br><span class="line">handled)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk <span class="string">'NR==3&#123;print $2&#125;'</span></span><br><span class="line">;;</span><br><span class="line">requests)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk <span class="string">'NR==3&#123;print $3&#125;'</span></span><br><span class="line">;;</span><br><span class="line">reading)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk <span class="string">'NR==4&#123;print $2&#125;'</span></span><br><span class="line">;;</span><br><span class="line">writing)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk <span class="string">'NR==4&#123;print $4&#125;'</span></span><br><span class="line">;;</span><br><span class="line">waiting)</span><br><span class="line">curl <span class="variable">$status_url</span> 2&gt;/dev/null|awk <span class="string">'NR==4&#123;print $6&#125;'</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(basename $0)</span> (status|active_conn|accepts|handled|requests|reading|writing|waiting)"</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p><p>给予脚本执行权限：<code>chmod +x /etc/zabbix/scripts/nginx_monitor.sh</code></p><h2 id="修改zabbix-agent配置"><a href="#修改zabbix-agent配置" class="headerlink" title="修改zabbix-agent配置"></a>修改zabbix-agent配置</h2><p>在需要监控的nginx服务器上新建”/etc/zabbix/zabbix_agentd.d/userparameter_nginx.conf”文件，添加如下配置：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=nginx.status[*],/etc/zabbix/scripts/nginx_monitor.sh <span class="variable">$1</span></span><br></pre></td></tr></table></figure></p><p>重启zabbix-agent：<code>systemctl restart zabbix-agent</code></p><h2 id="导入nginx监控模板"><a href="#导入nginx监控模板" class="headerlink" title="导入nginx监控模板"></a>导入nginx监控模板</h2><p><img src="/posts/4255676476/import1.png" alt="导入模板1"><br><a href="4255676476/zabbix_nginx.zip">nginx监控模板及脚本下载</a><br>下载模板文件并解压<br><img src="/posts/4255676476/import2.png" alt="导入模板2"><br>导入成功会在模板中显示“Template  Nginx”模板，绑定到相应主机，nginx监控完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nginx开启监控模块&quot;&gt;&lt;a href=&quot;#nginx开启监控模块&quot; class=&quot;headerlink&quot; title=&quot;nginx开启监控模块&quot;&gt;&lt;/a&gt;nginx开启监控模块&lt;/h2&gt;
&lt;p&gt;修改nginx的配置，在nginx配置的server域加入以下配置
      
    
    </summary>
    
      <category term="zabbix" scheme="https://www.kapyan.top/categories/zabbix/"/>
    
    
      <category term="nginx监控" scheme="https://www.kapyan.top/tags/nginx%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>zabbix添加mysql监控</title>
    <link href="https://www.kapyan.top/posts/1388969176.html"/>
    <id>https://www.kapyan.top/posts/1388969176.html</id>
    <published>2019-01-19T07:31:34.000Z</published>
    <updated>2019-02-14T02:59:17.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编辑mysql监控脚本"><a href="#编辑mysql监控脚本" class="headerlink" title="编辑mysql监控脚本"></a>编辑mysql监控脚本</h2><p>在需要监控的mysql服务器上新建文件”/etc/zabbix/zabbix_agentd.d/mysql_monitor.sh”<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.d/mysql_monitor.sh</span><br></pre></td></tr></table></figure></p><p>加入以下內容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mysqladmin_dir=<span class="string">"/usr/local/mysql/bin/mysqladmin_dir"</span>   <span class="comment">#mysqladmin的路径</span></span><br><span class="line">MYSQL_PWD=<span class="string">'mysqlpassword'</span><span class="comment">#mysql的root密碼</span></span><br><span class="line">ARGS=1</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne <span class="string">"<span class="variable">$ARGS</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Please input onearguement:"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        Uptime)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> status 2&gt;/dev/null |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Questions)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> status 2&gt;/dev/null|awk <span class="string">'&#123;print $6&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_update)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_update"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Slow_queries)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Slow_queries"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_select)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_select"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_rollback)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_rollback"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_insert)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_insert"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_delete)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_delete"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_commit)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_commit"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Bytes_sent)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Bytes_sent"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Bytes_received)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Bytes_received"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">        Com_begin)</span><br><span class="line">                result=`<span class="variable">$mysqladmin_dir</span>  -uroot -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> extended-status 2&gt;/dev/null|grep -w <span class="string">"Com_begin"</span>|awk <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">                ;;</span><br><span class="line">                *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> (Uptime|Questions|Com_update|Slow_queries|Com_select|Com_rollback|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)"</span></span><br><span class="line">                ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 /etc/zabbix/zabbix_agentd.d/mysql_monitor.sh          <span class="comment">#授予mysql监控脚本执行权限</span></span><br><span class="line">chown zabbix:root /etc/zabbix/zabbix_agentd.d/mysql_monitor.sh          <span class="comment">#更改脚本属主为zabbix</span></span><br></pre></td></tr></table></figure><h2 id="编辑zabbix-agent配置"><a href="#编辑zabbix-agent配置" class="headerlink" title="编辑zabbix-agent配置"></a>编辑zabbix-agent配置</h2><p>在需要监控的mysql服务器上修改”/etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf”文件<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf</span><br></pre></td></tr></table></figure></p><p>添加如下配置：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=mysql.status[*],/etc/zabbix/zabbix_agentd.d/mysql_monitor.sh <span class="variable">$1</span></span><br></pre></td></tr></table></figure></p><p><img src="/posts/1388969176/conf.png" alt="配置"><br>重启zabbix-agent<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure></p><p>在zabbix服务端测试<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zabbix_get -s 192.168.1.46 -k mysql.status[Uptime]      <span class="comment">#获取到数据说明监控脚本正常</span></span><br></pre></td></tr></table></figure></p><h2 id="绑定mysql监控模板"><a href="#绑定mysql监控模板" class="headerlink" title="绑定mysql监控模板"></a>绑定mysql监控模板</h2><p>zabbix自带了mysql监控模板，在zabbix web界面的相应主机上绑定“Template DB MySQL”模板</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编辑mysql监控脚本&quot;&gt;&lt;a href=&quot;#编辑mysql监控脚本&quot; class=&quot;headerlink&quot; title=&quot;编辑mysql监控脚本&quot;&gt;&lt;/a&gt;编辑mysql监控脚本&lt;/h2&gt;
&lt;p&gt;在需要监控的mysql服务器上新建文件”/etc/zabbix/z
      
    
    </summary>
    
      <category term="zabbix" scheme="https://www.kapyan.top/categories/zabbix/"/>
    
    
      <category term="mysql监控" scheme="https://www.kapyan.top/tags/mysql%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>mysql主主互备模式架构</title>
    <link href="https://www.kapyan.top/posts/1683246444.html"/>
    <id>https://www.kapyan.top/posts/1683246444.html</id>
    <published>2019-01-18T07:14:43.000Z</published>
    <updated>2019-02-14T02:58:22.061Z</updated>
    
    <content type="html"><![CDATA[<p>DB1和DB2互为主从，保证两台数据库始终是同步的，同时在DB1和DB2上还需要安装高可用软件Keepalived。正常情况下，web  server主机仅从BD1进行数据的读、写操作，DB2只负责从DB1同步数据。而Keepalived维护着一个VIP,此ip用来对外提供连接服务，同时，Keepalived还负责监控DB1和DB2上mysql数据库的运行状态，当DB1主机出现故障或mysql运行异常时，自动将VIP地址和mysql服务切换到DB2上，此时web  server主机继续从DB2进行数据的读、写操作。通过Keepalived保持了数据库服务的连续性，整个切换过程非常快，并且对前端web  server主机是透明的。这种方式可以实现95.000%的SLA（服务水平协定）。<br><img src="/posts/1683246444/jiagou.png" alt="双主"></p><h2 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h2><p> 修改DB1主机的配置文件，在/etc/my.cnf文件中的”[mysqld]”段加如下内容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server-id = 1</span><br><span class="line"><span class="built_in">log</span>-bin = mysql-bin</span><br><span class="line">replicate-wild-ignore-table = mysql.%</span><br><span class="line">replicate-wild-ignore-table = <span class="built_in">test</span>.%</span><br><span class="line">replicate-wild-ignore-table = information_schema.%</span><br></pre></td></tr></table></figure></p><p> 修改DB2主机的配置文件，在/etc/my.cnf文件中的”[mysqld]”段加如下内容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line"><span class="built_in">log</span>-bin = mysql-bin</span><br><span class="line">relay-log = mysql-relay-bin</span><br><span class="line">replicate-wild-ignore-table = mysql.%</span><br><span class="line">replicate-wild-ignore-table = <span class="built_in">test</span>.%</span><br><span class="line">replicate-wild-ignore-table = information_schema.%</span><br></pre></td></tr></table></figure></p><p>重启DB1和DB2的mysql服务</p><h2 id="手动同步数据库："><a href="#手动同步数据库：" class="headerlink" title="手动同步数据库："></a>手动同步数据库：</h2><p>如果DB1上已经有mysql数据，在执行主主互备之前，需要将DB1和DB2上两个mysql数据保持一致</p><h2 id="创建复制用户并授权："><a href="#创建复制用户并授权：" class="headerlink" title="创建复制用户并授权："></a>创建复制用户并授权：</h2><p>在DB1中创建复制用户<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to <span class="string">'repl_user'</span>@<span class="string">'192.168.88.12'</span> identified by <span class="string">'password'</span>;</span><br><span class="line">flush privileges;</span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure></p><p><img src="/posts/1683246444/masterstatus.png" alt="主库状态"><br>在DB2的mysql库中将DB1设为自己主服务器<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">'192.168.88.11'</span>,master_port=3306,master_user=<span class="string">'repl_user'</span>, master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000028'</span>,master_log_pos=4264031;  <span class="comment">#将master_log_file的值替换为在DB1中执行"show master status"显示的File的值，将master_log_pos的值替换为Position的值</span></span><br></pre></td></tr></table></figure></p><p>在DB2上启动slave服务<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure></p><p>配置从DB2到DB1的mysql主从复制，这个配置过程与上面完全一样</p><p>在DB2上创建复制用户<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to <span class="string">'repl_user'</span>@<span class="string">'192.168.88.11'</span> identified by <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure></p><p>在DB1的mysql库中将DB2设为自己的主服务器<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">'192.168.88.12'</span>,master_port=3306,master_user=<span class="string">'repl_user'</span>, master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000028'</span>,master_log_pos=480; <span class="comment">#将master_log_file的值替换为在DB2中执行"show master status"显示的File的值，将master_log_pos的值替换为Position的值</span></span><br></pre></td></tr></table></figure></p><p>在DB1上启动slave服务<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line">show slave status\G <span class="comment">#在DB1和DB2执行</span></span><br></pre></td></tr></table></figure></p><p><img src="/posts/1683246444/slave.png" alt="从库状态"></p><h2 id="配置Keepalived实现mysql双主高可用"><a href="#配置Keepalived实现mysql双主高可用" class="headerlink" title="配置Keepalived实现mysql双主高可用"></a>配置Keepalived实现mysql双主高可用</h2><p>在进行高可用配置之前，需要在DB1和DB2服务器上安装Keepalived软件。DB1服务器上/etc/keepalived/keepalived.conf文件内容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">global_defs&#123;</span><br><span class="line">notification_email&#123;</span><br><span class="line">acassen@firewall.loc</span><br><span class="line">failover@firewall.loc</span><br><span class="line">sysadmin@firewall.loc</span><br><span class="line">&#125;</span><br><span class="line">notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">smtp_server192.168.200.1</span><br><span class="line">smtp_connect_timeout 30</span><br><span class="line">router_id MySQLHA_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_mysqld &#123;</span><br><span class="line">script <span class="string">"/etc/keepalived/mysqlcheck/check_slave.pl 127.0.0.1"</span><span class="comment">#检测mysql复制状态的脚本</span></span><br><span class="line">interval 2</span><br><span class="line">weight 21</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instanceHA_1&#123;</span><br><span class="line">stateBACKUP<span class="comment">#在DB1和DB2上均配置为BACKUP</span></span><br><span class="line">interface eth0</span><br><span class="line">virtual_router_id80</span><br><span class="line">priority100</span><br><span class="line">advert_int2</span><br><span class="line">nopreempt<span class="comment">#不抢占模式，只在优先级高的机器上设置，优先级低的机器不可设置</span></span><br><span class="line"></span><br><span class="line">authentication&#123;</span><br><span class="line">auth_typePASS</span><br><span class="line">auth_passqweasdzxc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">track_script&#123;</span><br><span class="line">check_mysqld</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_ipaddress&#123;</span><br><span class="line">192.168.88.10/24dev eth0<span class="comment">#mysql的对外服务ip,即VIP</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，check_slave.pl文件内容为<br>  <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line"><span class="keyword">use</span> DBI;</span><br><span class="line"><span class="keyword">use</span> DBD::mysql;</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONFIG VARIABLES</span></span><br><span class="line">$SBM = <span class="number">120</span>;</span><br><span class="line">$db = <span class="string">"aaa"</span>;</span><br><span class="line">$host = $ARGV[<span class="number">0</span>];</span><br><span class="line">$port = <span class="number">3306</span>;</span><br><span class="line">$user = <span class="string">'root'</span>;</span><br><span class="line">$pw = <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQL query</span></span><br><span class="line">$query = <span class="string">"show slave status"</span>;</span><br><span class="line"></span><br><span class="line">$dbh = DBI-&gt;<span class="keyword">connect</span>(<span class="string">"DBI:mysql:$db:$host:$port"</span>, $user, $pw, &#123; <span class="string">RaiseError =&gt;</span> <span class="number">0</span>,<span class="string">PrintError =&gt;</span> <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">defined</span>($dbh))     &#123;</span><br><span class="line">        <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sqlQuery = $dbh-&gt;prepare($query);</span><br><span class="line">$sqlQuery-&gt;execute;</span><br><span class="line">$Slave_IO_Running = <span class="string">""</span>;</span><br><span class="line">$Slave_SQL_Running = <span class="string">""</span>;</span><br><span class="line">$Seconds_Behind_Master = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">my</span> $ref = $sqlQuery-&gt;fetchrow_hashref()) &#123;</span><br><span class="line">        $Slave_IO_Running = $ref-&gt;&#123;<span class="string">'Slave_IO_Running'</span>&#125;;</span><br><span class="line">        $Slave_SQL_Running = $ref-&gt;&#123;<span class="string">'Slave_SQL_Running'</span>&#125;;</span><br><span class="line">        $Seconds_Behind_Master = $ref-&gt;&#123;<span class="string">'Seconds_Behind_Master'</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sqlQuery-&gt;finish;</span><br><span class="line">$dbh-&gt;disconnect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $Slave_IO_Running eq <span class="string">"No"</span>  || $Slave_SQL_Running eq <span class="string">"No"</span> ) &#123;</span><br><span class="line">        <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( $Seconds_Behind_Master &gt; $SBM ) &#123;</span><br><span class="line">                <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">        &#125;       <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">exit</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="安装per连接数据库驱动"><a href="#安装per连接数据库驱动" class="headerlink" title="安装per连接数据库驱动"></a>安装per连接数据库驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl-DBD-MySQL <span class="comment">#安装per连接数据库驱动</span></span><br></pre></td></tr></table></figure><p>这是用perl写的检测mysql复制状态的脚本，只需修改文件中mysql数据库的数据库、端口，用户名密码即可直接使用，但在使用前要保证此脚本有可执行权限。<br>接着将Keepalived.conf文件和check_slave.pl文件复制到DB2服务器上的对应位置，将Keepalived.conf文件中priority值修改为90，由于配置的不是抢占模式，因此，还需要去掉nopreempt选项。在完成所有配置后，分别在DB1和DB2上启动Keepalived服务，在正常情况下VIP地址应该运行在DB1服务器上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DB1和DB2互为主从，保证两台数据库始终是同步的，同时在DB1和DB2上还需要安装高可用软件Keepalived。正常情况下，web
  server主机仅从BD1进行数据的读、写操作，DB2只负责从DB1同步数据。而Keepalived维护着一个VIP,此ip用来对外提
      
    
    </summary>
    
      <category term="mysql" scheme="https://www.kapyan.top/categories/mysql/"/>
    
    
      <category term="mysql主主互备" scheme="https://www.kapyan.top/tags/mysql%E4%B8%BB%E4%B8%BB%E4%BA%92%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>centos7通过阿里源安装zabbix</title>
    <link href="https://www.kapyan.top/posts/1314989757.html"/>
    <id>https://www.kapyan.top/posts/1314989757.html</id>
    <published>2019-01-17T06:53:08.000Z</published>
    <updated>2019-02-14T02:59:27.781Z</updated>
    
    <content type="html"><![CDATA[<p>此安装方法适用于centos7.x系统，安装版本为zabbix4.2</p><h2 id="安装zabbix环境"><a href="#安装zabbix环境" class="headerlink" title="安装zabbix环境"></a>安装zabbix环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  -e <span class="string">"[zabbix]\nname=Zabbix Repository\nbaseurl=https://mirrors.aliyun.com/zabbix/zabbix/4.1/rhel/7/x86_64/\ngpgcheck=0\nenabled=1"</span> &gt;&gt;/etc/yum.repos.d/zabbix.repo  <span class="comment">#添加阿里镜像仓库zabbix的yum源</span></span><br><span class="line">yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-get zabbix-agent php-fpm</span><br></pre></td></tr></table></figure><p>可能会报错：Error: Package: zabbix-server-mysql-4.2.0-0.2alpha2.el7.x86_64  (zabbix)<br> Requires: libiksemel.so.3()(64bit)<br><img src="/posts/1314989757/install_erro.png" alt="安装错误"><br>出现此错误则需要安装以下依赖：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y iksemel fping libiksemel</span><br><span class="line"><span class="comment">#如果以上命令不能安装iksemel，可使用如下命令</span></span><br><span class="line">yum install -y gnutls</span><br><span class="line">rpm -ivh http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64//iksemel-1.4-6.sdl7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><h2 id="安装mysql并导入zabbix数据库"><a href="#安装mysql并导入zabbix数据库" class="headerlink" title="安装mysql并导入zabbix数据库"></a>安装mysql并导入zabbix数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm <span class="comment">#添加mysql源</span></span><br><span class="line">yum install -y  mysql-server<span class="comment">#安装后mysql的root密码为空，可自行设置</span></span><br><span class="line">systemctl start mysqld  <span class="comment">#启动mysql</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld <span class="comment">#加入开启自启动</span></span><br><span class="line">mysql -uroot  -e <span class="string">"create database zabbix character set utf8 collate utf8_bin;"</span><span class="comment">#创建zabbix数据库</span></span><br><span class="line">mysql -uroot  -e <span class="string">"grant all privileges on zabbix.* to zabbix@localhost identified by 'password';"</span><span class="comment">#将password改为自己的密码</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -ppassword zabbix  <span class="comment">#将password改为自己的密码</span></span><br><span class="line">sed -i <span class="string">'s#\# DBPassword=#DBPassword=password#g'</span> /etc/zabbix/zabbix_server.conf <span class="comment">#将password改为自己的密码</span></span><br></pre></td></tr></table></figure><h2 id="更改时区"><a href="#更改时区" class="headerlink" title="更改时区"></a>更改时区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s#\# php_value date.timezone Europe/Riga#php_value date.timezone Asia/Shanghai#g'</span> /etc/httpd/conf.d/zabbix.conf</span><br></pre></td></tr></table></figure><h2 id="启动zabbix"><a href="#启动zabbix" class="headerlink" title="启动zabbix"></a>启动zabbix</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd php-fpm</span><br><span class="line"> systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent httpd php-fpm  <span class="comment">#加入开机自启动</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://your_ip/zabbix">http://your_ip/zabbix</a><br><img src="/posts/1314989757/setup1.png" alt="安装1"><br><img src="/posts/1314989757/setup2.png" alt="安装2"><br><img src="/posts/1314989757/setup3.png" alt="安装3"><br>接着点击“Next  step”和“Finish”,默认用户名:Admin，密码:zabbix</p><h2 id="更改中文并解决中文乱码"><a href="#更改中文并解决中文乱码" class="headerlink" title="更改中文并解决中文乱码"></a>更改中文并解决中文乱码</h2><p>修改语言为中文<br><img src="/posts/1314989757/zhongwen.png" alt="中文"><br><img src="/posts/1314989757/luanma.png" alt="乱码"><br>zabbix默认的字体会出现中文乱码，在windows系统中的C:\Windows\Fonts目录下选择支持中文的字体（如:’宋体’），上传至“/usr/share/zabbix/fonts”目录下，并将字体名称的大写改为小写，否则不识别，执行如下命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s#graphfont#fontname#g&apos; /usr/share/zabbix/include/defines.inc.php  #fontname为替换字体的名称，不需要后缀</span><br></pre></td></tr></table></figure></p><p>刷新zabbix页面,中文字体显示正常</p><h2 id="为zabbix设置域名和路径"><a href="#为zabbix设置域名和路径" class="headerlink" title="为zabbix设置域名和路径"></a>为zabbix设置域名和路径</h2><p>设置域名，编辑/etc/httpd/conf/httpd.conf<br><img src="/posts/1314989757/domain.png" alt="域名"><br>自定义路径，编辑/etc/httpd/conf.d/zabbix.conf<br><img src="/posts/1314989757/lujing.png" alt="路径"><br>重启httpd服务<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure></p><h2 id="zabbix4-2自动安装脚本"><a href="#zabbix4-2自动安装脚本" class="headerlink" title="zabbix4.2自动安装脚本"></a>zabbix4.2自动安装脚本</h2><h3 id="服务端安装脚本"><a href="#服务端安装脚本" class="headerlink" title="服务端安装脚本"></a>服务端安装脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始安装zabbix服务端..."</span></span><br><span class="line"><span class="comment">#添加zabbix安装源</span></span><br><span class="line"><span class="built_in">echo</span>  -e <span class="string">"[zabbix]\nname=Zabbix Repository\nbaseurl=https://mirrors.aliyun.com/zabbix/zabbix/4.1/rhel/7/x86_64/\ngpgcheck=0\nenabled=1"</span> &gt;&gt;/etc/yum.repos.d/zabbix.repo</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum install -y epel-release &amp;&amp; yum install -y fping</span><br><span class="line">yum install -y gnutls &amp;&amp; rpm -ivh http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64//iksemel-1.4-6.sdl7.x86_64.rpm || <span class="built_in">exit</span> 1 </span><br><span class="line"><span class="comment">#安装zabbix相关服务</span></span><br><span class="line">yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-get zabbix-agent php-fpm || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="comment">#安装mysql数据库</span></span><br><span class="line">rpm -ivh http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm &amp;&amp; yum install -y  mysql-server || <span class="built_in">exit</span> 1</span><br><span class="line">systemctl start mysqld &amp;&amp; systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"><span class="comment">#创建zabbix数据库</span></span><br><span class="line">mysql -uroot  -e <span class="string">"create database zabbix character set utf8 collate utf8_bin;"</span> || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="comment">#设置zabbix数据库密码，密码由时间戳MD5加密取前15个字符组成</span></span><br><span class="line">zabbixdb_pw=$(date +%s|md5sum|cut -c 1-15)</span><br><span class="line"><span class="comment">#创建zabbix数据库账号</span></span><br><span class="line">mysql -uroot  -e <span class="string">"grant all privileges on zabbix.* to zabbix@localhost identified by \"<span class="variable">$&#123;zabbixdb_pw&#125;</span>\";"</span> || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="comment">#导入zabbix数据库</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p<span class="variable">$&#123;zabbixdb_pw&#125;</span> zabbix || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="comment">#设置zabbix_server数据库密码</span></span><br><span class="line">sed -i <span class="string">"s#\# DBPassword=#DBPassword=<span class="variable">$&#123;zabbixdb_pw&#125;</span>#g"</span> /etc/zabbix/zabbix_server.conf</span><br><span class="line"><span class="comment">#设置时区为亚洲上海</span></span><br><span class="line">sed -i <span class="string">'s#\# php_value date.timezone Europe/Riga#php_value date.timezone Asia/Shanghai#g'</span> /etc/httpd/conf.d/zabbix.conf</span><br><span class="line"><span class="comment">#重启zabbix-server、agent、httpd、php服务并加入开机自启动</span></span><br><span class="line">systemctl restart zabbix-server zabbix-agent httpd php-fpm &amp;&amp; systemctl <span class="built_in">enable</span> zabbix-server zabbix-agent httpd php-fpm</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"zabbix安装完成...\n请访问http://your_ip/zabbix并继续\nzabbix数据库密码：<span class="variable">$&#123;zabbixdb_pw&#125;</span> 请保存\nmysql的root密码为空，请自行设置"</span></span><br></pre></td></tr></table></figure><h3 id="客户端安装脚本"><a href="#客户端安装脚本" class="headerlink" title="客户端安装脚本"></a>客户端安装脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">server_ip=<span class="string">"your_server_ip"</span><span class="comment">#your_server_ip更改为自己的zabbix服务器地址</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始安装zabbix客户端..."</span></span><br><span class="line">rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/4.1/rhel/7/x86_64/zabbix-agent-4.2.0-0.1alpha1.el7.x86_64.rpm</span><br><span class="line">sed -i <span class="string">"s#Server=127.0.0.1#Server=<span class="variable">$&#123;server_ip&#125;</span>#g"</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">systemctl start zabbix-agent &amp;&amp; systemctl <span class="built_in">enable</span> zabbix-agent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此安装方法适用于centos7.x系统，安装版本为zabbix4.2&lt;/p&gt;
&lt;h2 id=&quot;安装zabbix环境&quot;&gt;&lt;a href=&quot;#安装zabbix环境&quot; class=&quot;headerlink&quot; title=&quot;安装zabbix环境&quot;&gt;&lt;/a&gt;安装zabbix环境&lt;/h2
      
    
    </summary>
    
      <category term="zabbix" scheme="https://www.kapyan.top/categories/zabbix/"/>
    
    
      <category term="zabbix安装" scheme="https://www.kapyan.top/tags/zabbix%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>gitlab数据备份、还原、迁移</title>
    <link href="https://www.kapyan.top/posts/1095624551.html"/>
    <id>https://www.kapyan.top/posts/1095624551.html</id>
    <published>2019-01-14T03:23:20.000Z</published>
    <updated>2019-02-14T02:57:41.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gitlab备份"><a href="#gitlab备份" class="headerlink" title="gitlab备份"></a>gitlab备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create </span><br><span class="line">docker <span class="built_in">exec</span> -i gitlab  gitlab-rake gitlab:backup:create<span class="comment">#docker环境中</span></span><br></pre></td></tr></table></figure><p>备份文件在/var/opt/gitlab/backups/目录下，文件格式为“时间戳_年_月_日_版本号_gitlab_backup.tar”<br>编辑/etc/gitlab/gitlab.rb文件中的“gitlab_rails[‘backup_path’]  = ”参数可修改备份文件目录，需重新加载gitlab配置并重启</p><h2 id="gitlab还原"><a href="#gitlab还原" class="headerlink" title="gitlab还原"></a>gitlab还原</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止相关数据连接服务</span></span><br><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line"><span class="comment">#还原</span></span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1547406063   <span class="comment">#还原1547406063_2019_01_13_11.5.4_gitlab_backup.tar文件，“BACKUP=”后跟还原文件的时间戳</span></span><br><span class="line">gitlab-ctl start  <span class="comment">#启动gitlab服务</span></span><br></pre></td></tr></table></figure><font color="red">注：不能直接在终端执行gitlab-ctl  stop停止所有服务，因为gitlab删除和还原操作还需要使用到redis和postgresql连接。</font><h2 id="gitlab迁移"><a href="#gitlab迁移" class="headerlink" title="gitlab迁移"></a>gitlab迁移</h2><p>将备份的文件拷贝至新的gitlab对应的备份目录下，执行还原的步骤。</p><font color="red"> 新gitlab版本需要和原有版本一致，否则可能迁移失败！<br>复制备份过程可能导致属组和属主发生变化，需要修改所有者为git</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;gitlab备份&quot;&gt;&lt;a href=&quot;#gitlab备份&quot; class=&quot;headerlink&quot; title=&quot;gitlab备份&quot;&gt;&lt;/a&gt;gitlab备份&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="gitlab" scheme="https://www.kapyan.top/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="https://www.kapyan.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>gitlab安装</title>
    <link href="https://www.kapyan.top/posts/4024240644.html"/>
    <id>https://www.kapyan.top/posts/4024240644.html</id>
    <published>2019-01-09T05:13:29.000Z</published>
    <updated>2019-02-14T02:57:23.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="脚本快速安装"><a href="#脚本快速安装" class="headerlink" title="脚本快速安装"></a>脚本快速安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash<span class="comment">#deb</span></span><br><span class="line">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<span class="comment">#rpm</span></span><br><span class="line">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.node.sh | bash<span class="comment">#node</span></span><br><span class="line">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.python.sh | bash <span class="comment">#python</span></span><br><span class="line">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.gem.sh | bash <span class="comment">#gem(ruby)</span></span><br></pre></td></tr></table></figure><p>访问gitlab地址：<a href="http://your_host_ip">http://your_host_ip</a></p><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-zhangjiakou.aliyuncs.com/kapyan/gitlab:11.5.4</span><br><span class="line">docker run --detach \</span><br><span class="line">    --hostname 192.168.1.208:8000 \</span><br><span class="line">    --publish 10000:443 --publish 8000:8000 --publish 20000:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /home/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /home/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    --volume /home/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab <span class="comment">#运行容器</span></span><br></pre></td></tr></table></figure><p>docker exec -it gitlab /bin/bash #进入容器<br>vim /etc/gitlab/gitlab.rb<br><img src="/posts/4024240644/sshport.png" alt="修改ssh端口号"><br>gitlab-ctl  reconfigure #重新加载gitlab配置<br>gitlab-ctl restart #重启gitlab<br>访问gitlab地址：<a href="http://your_host_ip:8000">http://your_host_ip:8000</a><br><a href="https://packages.gitlab.com/gitlab/gitlab-ce">官方安装包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;脚本快速安装&quot;&gt;&lt;a href=&quot;#脚本快速安装&quot; class=&quot;headerlink&quot; title=&quot;脚本快速安装&quot;&gt;&lt;/a&gt;脚本快速安装&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="gitlab" scheme="https://www.kapyan.top/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="https://www.kapyan.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>nginx安装</title>
    <link href="https://www.kapyan.top/posts/385762059.html"/>
    <id>https://www.kapyan.top/posts/385762059.html</id>
    <published>2019-01-05T07:16:53.000Z</published>
    <updated>2019-02-14T02:58:30.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过存储库安装nginx"><a href="#通过存储库安装nginx" class="headerlink" title="通过存储库安装nginx"></a>通过存储库安装nginx</h2><p>CentOS 6.x系统：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/6/<span class="variable">$(uname -m)</span>/\ngpgcheck=0\nenabled=1"</span>&gt;&gt;/etc/yum.repos.d/nginx.repo</span><br><span class="line">yum install -y nginx</span><br><span class="line">chkconfig nginx on <span class="comment">#设置开机自启动</span></span><br></pre></td></tr></table></figure></p><p>CentOS 7.x系统：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/<span class="variable">$(uname -m)</span>/\ngpgcheck=0\nenabled=1"</span>&gt;&gt;/etc/yum.repos.d/nginx.repo</span><br><span class="line">yum install -y nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx  <span class="comment">#设置开机自启动</span></span><br></pre></td></tr></table></figure></p><p>ubuntu系统：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> -e <span class="string">"deb http://nginx.org/packages/ubuntu/ codename nginx\ndeb-src http://nginx.org/packages/ubuntu/ codename nginx"</span>&gt;&gt;/etc/apt/sources.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx  <span class="comment">#设置开机自启动</span></span><br></pre></td></tr></table></figure></p><h2 id="源码编译安装nginx"><a href="#源码编译安装nginx" class="headerlink" title="源码编译安装nginx"></a>源码编译安装nginx</h2><p><a href="http://nginx.org/en/download.html">nginx各版本源码包下载</a><br>以nginx-1.14.2为例：<br>Centos系统：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin www<span class="comment">#创建nginx运行用户</span></span><br><span class="line">yum -y install gcc pcre pcre-devel openssl openssl-devel zlib-devel gd gd-devel perl perl-ExtUtils-Embed <span class="comment">#安装依赖</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.2.tar.gz<span class="comment">#下载nginx-1.14.2</span></span><br><span class="line">tar xf nginx-1.14.2.tar.gz <span class="comment">#解压nginx压缩包</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx-1.14.2 --user=www --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-http_perl_module --with-mail --with-mail_ssl_module --with-http_stub_status_module <span class="comment">#设置编译参数</span></span><br><span class="line">make &amp;&amp; make install<span class="comment">#编译安装</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx-1.14.2 /usr/<span class="built_in">local</span>/nginx  <span class="comment">#给nginx添加软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/bin/nginx</span><br></pre></td></tr></table></figure></p><p>Ubuntu系统：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin www<span class="comment">#创建nginx运行用户</span></span><br><span class="line">apt-get install -y gcc libpcre3 libpcre3-dev zlib1g-dev libssl-dev libperl-dev build-essential openssl <span class="comment">#安装依赖</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.2.tar.gz<span class="comment">#下载nginx-1.14.2</span></span><br><span class="line">tar xf nginx-1.14.2.tar.gz <span class="comment">#解压nginx压缩包</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx-1.14.2 --user=www --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-http_perl_module --with-mail --with-mail_ssl_module --with-http_stub_status_module <span class="comment">#设置编译参数</span></span><br><span class="line">make &amp;&amp; make install<span class="comment">#编译安装</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx-1.14.2 /usr/<span class="built_in">local</span>/nginx  <span class="comment">#给nginx添加软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/bin/nginx</span><br></pre></td></tr></table></figure></p><div>  <div class="fold_hider">    <div class="close hider_title">nginx官方启动脚本☞点击显/隐内容</div>  </div>  <div class="fold">    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15</span></span><br><span class="line"><span class="comment"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="comment"># pidfile:     /var/run/nginx.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/sbin/nginx"</span></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/etc/nginx/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">make_dirs</span></span>() &#123;</span><br><span class="line">   <span class="comment"># make required directories</span></span><br><span class="line">   user=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">"configure arguments:.*--user="</span> | sed <span class="string">'s/[^*]*--user=\([^ ]*\).*/\1/g'</span> -`</span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$user</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">"`grep <span class="variable">$user</span> /etc/passwd`"</span> ]; <span class="keyword">then</span></span><br><span class="line">         useradd -M -s /bin/nologin <span class="variable">$user</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      options=`<span class="variable">$nginx</span> -V 2&gt;&amp;1 | grep <span class="string">'configure arguments:'</span>`</span><br><span class="line">      <span class="keyword">for</span> opt <span class="keyword">in</span> <span class="variable">$options</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [ `<span class="built_in">echo</span> <span class="variable">$opt</span> | grep <span class="string">'.*-temp-path'</span>` ]; <span class="keyword">then</span></span><br><span class="line">              value=`<span class="built_in">echo</span> <span class="variable">$opt</span> | cut -d <span class="string">"="</span> -f 2`</span><br><span class="line">              <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$value</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                  <span class="comment"># echo "creating" $value</span></span><br><span class="line">                  mkdir -p <span class="variable">$value</span> &amp;&amp; chown -R <span class="variable">$user</span> <span class="variable">$value</span></span><br><span class="line">              <span class="keyword">fi</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    make_dirs</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>  </div></div><p><a href="https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/">官方启动脚本示例</a></p><h2 id="nginx编译参数详解"><a href="#nginx编译参数详解" class="headerlink" title="nginx编译参数详解"></a>nginx编译参数详解</h2><div>  <div class="fold_hider">    <div class="close hider_title">nginx编译参数☞点击显/隐内容</div>  </div>  <div class="fold">    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">--prefix=path  <span class="comment">#指定nginx安装路径，默认是/usr/local/nginx</span></span><br><span class="line">--sbin-path=path  <span class="comment">#指定二进制可执行文件路径，默认是prefix/sbin/nginx</span></span><br><span class="line">--modules-path=path <span class="comment">#指定modules路径，默认是prefix/modules</span></span><br><span class="line">--conf-path=path <span class="comment">#指定nginx配置文件路径，默认是prefix/conf/nginx.conf</span></span><br><span class="line">--error-log-path=path <span class="comment">#指定错误日志文件路径，默认是prefix/logs/error.log</span></span><br><span class="line">--pid-path=path <span class="comment">#设置nginx的pid文件路径，默认是prefix/logs/nginx.pid</span></span><br><span class="line">--lock-path=path  <span class="comment">#设置nginx的lock文件路径，默认是prefix/logs/nginx.lock，在nginx启动是创建，保证只有一个nginx服务运行</span></span><br><span class="line">--user=name <span class="comment">#设置nginx运行的用户，默认是nobody</span></span><br><span class="line">--group=name <span class="comment">#设置nginx运行的组</span></span><br><span class="line">--build=name <span class="comment">#设置nginx的编译的名字，建议忽略该选项</span></span><br><span class="line">--builddir=path <span class="comment">#设置nginx的编译目录，建议忽略该选项</span></span><br><span class="line">--with-select_module </span><br><span class="line">--without-select_module </span><br><span class="line"><span class="comment">#配置服务器的是否使用select轮询接口（该接口低效且有限制），如果系统不支持如kqueue, epoll, 或/dev/poll等机制，则会构建该模块，保持默认即可</span></span><br><span class="line">--with-poll_module</span><br><span class="line">--without-poll_module</span><br><span class="line"><span class="comment">#poll接口比select接口更加高效，但是同样有一定的socket数量的限制，推荐使用默认</span></span><br><span class="line">--with-threads<span class="comment">#允许使用线程池，默认开启</span></span><br><span class="line">--with-file-aio <span class="comment">#在FreeBSD和Linux系统中开启异步文件I/O，默认开启</span></span><br><span class="line">--with-http_ssl_module <span class="comment">#开启https协议支持，默认不构建，要求安装openssl openssl-devel依赖</span></span><br><span class="line">--with-http_v2_module <span class="comment">#开启http/2协议支持，默认不构建</span></span><br><span class="line">--with-http_realip_module<span class="comment">#该模块可将客户端地址更改为在指定的头字段中发送的地址，默认不构建</span></span><br><span class="line">--with-http_addition_module <span class="comment">#该模块在响应之前和之后添加文本，默认不构建</span></span><br><span class="line">--with-http_xslt_module  <span class="comment">#</span></span><br><span class="line">--with-http_xslt_module=dynamic</span><br><span class="line"><span class="comment">#允许构建使用一个或多个XSLT样式表转换XML响应，默认不构建，需要安装libxml2和libxslt库</span></span><br><span class="line">--with-http_image_filter_module</span><br><span class="line">--with-http_image_filter_module=dynamic</span><br><span class="line"><span class="comment">#图像过滤器模块，可以转换JPEG、GIF、PNG和WebP格式的图像，默认不构建模块，该模块依赖libgd库，建议使用最新版本的库</span></span><br><span class="line">--with-http_geoip_module</span><br><span class="line">--with-http_geoip_module=dynamic</span><br><span class="line"><span class="comment">#使用预编译的MaxMind数据库创建具有取决于客户端IP地址的值得变量，该模块依赖MaxMind GeoIP 库，默认不构建</span></span><br><span class="line">--with-http_sub_module</span><br><span class="line"><span class="comment">#该模块通过一个指定的字符串替换为另一个字符串来修改响应，默认不构建</span></span><br><span class="line">--with-http_dav_module <span class="comment">#通过WebDAV协议进行文件管理自动化，默认不构建</span></span><br><span class="line">--with-http_flv_module <span class="comment">#为Flash Video(flv)文件提供伪流服务器端支持，默认不构建</span></span><br><span class="line">--with-http_mp4_module <span class="comment">#为MP4文件提供伪流服务器端支持，默认不构建</span></span><br><span class="line">--with-http_gunzip_module <span class="comment">#用于不支持gzip编码方法的客户端，默认不构建</span></span><br><span class="line">--with-http_gzip_static_module<span class="comment">#允许使用.gz文件扩展名发送预压缩文件，默认不构建</span></span><br><span class="line">--with-http_auth_request_module <span class="comment">#基于子请求的结果实现客户端授权，默认不构建</span></span><br><span class="line">--with-http_random_index_module <span class="comment">#处理以斜杠（“/”）结尾的请求，并选择目录中的随机文件作为索引文件，默认不构建</span></span><br><span class="line">--with-http_secure_link_module<span class="comment">#用于检查请求链路的真实性，保护资源免受未经授权的访问，并限制链路生存期，默认不构建</span></span><br><span class="line">--with-http_degradation_module  <span class="comment">#开启ngx_http_degradation_module，默认不构建</span></span><br><span class="line">--with-http_slice_module <span class="comment">#此模块可将请求拆分为子请求，每个子请求都返回一定范围的响应，默认不构建</span></span><br><span class="line">--with-http_stub_status_module <span class="comment">#此模块提供对基本状态信息的访问，默认不构建</span></span><br><span class="line">--without-http_charset_module  <span class="comment">#该模块将指定的字符集添加到“Content-Type”响应头字段，还可以将数据从一个字符集转换为另一个字符集，此参数将取消该模块</span></span><br><span class="line">--without-http_gzip_module<span class="comment">#禁用文件压缩模块</span></span><br><span class="line">--without-http_ssi_module <span class="comment">#禁用该模块，该模块在通过它的响应中处理SSI(服务器端包含)命令</span></span><br><span class="line">--without-http_userid_module <span class="comment">#禁用该模块，该模块设置适合客户端识别的cookie</span></span><br><span class="line">--without-http_access_module <span class="comment">#禁用该模块，该模块允许限制对某些客户端地址的访问</span></span><br><span class="line">--without-http_auth_basic_module <span class="comment">#禁用该模块，该模块允许通过使用“HTTP基本身份验证”协议验证用户名和密码来限制对资源的访问</span></span><br><span class="line">--without-http_mirror_module <span class="comment">#禁用该模块，该模块通过创建后台镜像子请求来实现原始请求的镜像</span></span><br><span class="line">--without-http_autoindex_module  <span class="comment">#禁用该模块，该模块处理以斜杠（“/”）结尾的请求，并在ngx_http_index_module模块找不到索引文件的情况下生成目录列表</span></span><br><span class="line">--without-http_geo_module <span class="comment">#禁用该模块，该模块使用取决于客户端IP地址的值创建变量</span></span><br><span class="line">--without-http_map_module  <span class="comment">#禁用该模块，该模块创建的变量值取决于其他变量的值</span></span><br><span class="line">--without-http_split_clients_module <span class="comment">#禁用该模块，该模块适用于A/B测试的变量，也称为拆分测试</span></span><br><span class="line">--without-http_referer_module <span class="comment">#禁用该模块，该模块用于阻止对“referer”头字段中具有无效值的请求访问站点</span></span><br><span class="line">--without-http_rewrite_module  <span class="comment">#禁用该模块，该模块用于请求重定向，依赖PCRE库</span></span><br><span class="line">--without-http_proxy_module   <span class="comment">#禁用该模块，该模块用于http代理服务</span></span><br><span class="line">--without-http_fastcgi_module<span class="comment">#禁用将请求传给FastCGI服务器的模块</span></span><br><span class="line">--without-http_uwsgi_module <span class="comment">#禁用将请求传给uwsgi服务器的模块</span></span><br><span class="line">--without-http_scgi_module <span class="comment">#禁用将请求传给SCGI服务器的模块</span></span><br><span class="line">--without-http_grpc_module <span class="comment">#禁用将请求传给GRPC服务器的模块</span></span><br><span class="line">--without-http_memcached_module <span class="comment">#禁止该模块，该模块从memcached服务器获取响应</span></span><br><span class="line">--without-http_limit_conn_module <span class="comment">#禁止该模块，该模块用于限制每个定义密钥的连接数，例如来自单个ip地址的连接数</span></span><br><span class="line">--without-http_limit_req_module <span class="comment">#禁止该模块，该模块用于限制每个定义密钥的请求处理数速率，例如来自单个ip地址的请求处理速率</span></span><br><span class="line">--without-http_empty_gif_module  <span class="comment">#禁止该模块，该模块用于发出单像素透明的GIF</span></span><br><span class="line">--without-http_browser_module  <span class="comment">#禁用该模块，该模块创建的变量的值取决于User-Agent请求标头字段的值</span></span><br><span class="line">--without-http_upstream_hash_module  <span class="comment">#禁用该模块，该模块用于负载均衡的hash算法</span></span><br><span class="line">--without-http_upstream_ip_hash_module <span class="comment">#禁用该模块，该模块用于负载均衡的ip_hash算法</span></span><br><span class="line">--without-http_upstream_keepalive_module <span class="comment">#禁用该模块，该模块提供上游服务器的连接缓存</span></span><br><span class="line">--without-http_upstream_zone_module <span class="comment">#禁用该模块，该模块可以将上游组的运行时状态存储在共享内存区域中</span></span><br><span class="line">--with-http_perl_module</span><br><span class="line">--with-http_perl_module=dynamic</span><br><span class="line"><span class="comment">#用于在perl中实现位置和变量处理程序，并将perl调用插入到SSI中，依赖perl5.6.1或更高版本，默认不构建</span></span><br><span class="line">--with-perl_modules_path=path <span class="comment">#设置perl_modules模块保存目录</span></span><br><span class="line">--with-perl=path <span class="comment">#设置perl所在路径</span></span><br><span class="line">--http-log-path=path <span class="comment">#设置访问日志路径，默认是 prefix/logs/access.log</span></span><br><span class="line">--http-client-body-temp-path=path <span class="comment">#设置存储客户端请求主体的临时文件目录，默认是prefix/client_body_temp</span></span><br><span class="line">--http-proxy-temp-path=path <span class="comment">#设置存储临时文件和从代理服务器接收的数据目录，默认是prefix/proxy_temp.</span></span><br><span class="line">--http-fastcgi-temp-path=path <span class="comment">#设置存储从FastCGI服务器接收的数据的临时文件目录，默认prefix/fastcgi_temp</span></span><br><span class="line">--http-uwsgi-temp-path=path <span class="comment">#设置存储从uwsgi服务器接收的数据的临时文件目录，默认prefix/uwsgi_temp</span></span><br><span class="line">--http-scgi-temp-path=path <span class="comment">##设置存储从scgi服务器接收的数据的临时文件目录，默认prefix/scgi_temp.</span></span><br><span class="line">--without-http <span class="comment">#禁用http服务</span></span><br><span class="line">--without-http-cache <span class="comment">#禁用http缓存</span></span><br><span class="line">--with-mail</span><br><span class="line">--with-mail=dynamic</span><br><span class="line"><span class="comment">#启用POP3/IMAP4/SMTP邮件代理服务器，默认不构建</span></span><br><span class="line">--with-mail_ssl_module <span class="comment">#为邮件代理服务器提供SSL/TLS协议支持，依赖OpenSSL库，默认不构建</span></span><br><span class="line">--without-mail_pop3_module <span class="comment">#禁止POP3邮件代理服务</span></span><br><span class="line">--without-mail_imap_module <span class="comment">#禁止IMAP邮件代理服务</span></span><br><span class="line">--without-mail_smtp_module <span class="comment">#禁止SMTP邮件代理服务</span></span><br><span class="line">--with-stream</span><br><span class="line">--with-stream=dynamic <span class="comment">#允许构建流模块以进行通用的TCP/UDP代理和负载均衡，默认不构建</span></span><br><span class="line">--with-stream_ssl_module <span class="comment">#为流模块提供SSL/TLS协议支持，依赖OpenSSL库，默认不构建</span></span><br><span class="line">--with-stream_realip_module <span class="comment">#该模块将客户端地址更改为proxy协议头中发送的地址，默认不构建</span></span><br><span class="line">--with-stream_geoip_module </span><br><span class="line">--with-stream_geoip_module=dynamic</span><br><span class="line"><span class="comment">#该模块根据客户端IP地址和预编译的MaxMind数据库创建变量，依赖MaxMind GeoIP库，默认不构建</span></span><br><span class="line">--with-stream_ssl_preread_module <span class="comment">#该模块允许从ClientHello消息中提取信息而不终止SSL/TLS，默认不构建</span></span><br><span class="line">--without-stream_limit_conn_module <span class="comment">#禁止该模块，该模块用于限制每个定义密钥的连接数，例如来自单个ip地址的连接数</span></span><br><span class="line">--without-stream_access_module <span class="comment">#禁止该模块，该模块用于限制对某些客户端地址的访问</span></span><br><span class="line">--without-stream_geo_module <span class="comment">#</span></span><br><span class="line">--without-stream_map_module</span><br><span class="line">--without-stream_split_clients_module</span><br><span class="line">--without-stream_return_module <span class="comment">#禁止该模块，该模块允许向客户端发送指定值，然后关闭连接</span></span><br><span class="line">--without-stream_upstream_hash_module</span><br><span class="line">--without-stream_upstream_least_conn_module</span><br><span class="line">--without-stream_upstream_zone_module</span><br><span class="line">--with-google_perftools_module <span class="comment">#该模块支持使用Google Performance Tools分析nginx工作进程，适用于nginx开发人员，依赖gperftools库默认不构建</span></span><br><span class="line">--with-cpp_test_module <span class="comment">#</span></span><br><span class="line">--add-module=path   <span class="comment">#加入第三方模块，path为 第三方模块路径</span></span><br><span class="line">--add-dynamic-module=path  <span class="comment">#动态加载第三方模块</span></span><br><span class="line">--with-compat<span class="comment">#启动动态模块兼容性</span></span><br><span class="line">--with-cc=path <span class="comment">#指定C编译器路径</span></span><br><span class="line">--with-cpp=path <span class="comment">#指定C预处理器路径</span></span><br><span class="line">--with-cc-opt=parameters <span class="comment">#设置将添加到CFLAGS变量的其他参数，在FreeBSD下使用系统PCRE库时，应指定--with-cc-opt="-I /usr/local/include"</span></span><br><span class="line">--with-ld-opt=parameters <span class="comment">#设置将在链接期间使用的其他参数，在FreeBSD下使用系统PCRE库时，应指定--with-ld-opt="-L /usr/local/lib"</span></span><br><span class="line">--with-cpu-opt=cpu <span class="comment">#设置cpu类型，如: pentium, pentiumpro, pentium3, pentium4, athlon, opteron, sparc32, sparc64, ppc64</span></span><br><span class="line">--without-pcre <span class="comment">#禁止使用PCRE库</span></span><br><span class="line">--with-pcre  <span class="comment">#强制使用PCRE库，PCRE库用于支持url重写和正则模块</span></span><br><span class="line">--with-pcre=path <span class="comment">#指定PCRE库的源码路径，nginx会自动编译</span></span><br><span class="line">--with-pcre-opt=parameters <span class="comment">#为PCRE设置其他参数</span></span><br><span class="line">--with-pcre-jit <span class="comment">#使用“即时编译”支持（1.1.12，pcre_jit指令）构建PCRE</span></span><br><span class="line">--with-zlib=path  <span class="comment">#指定zlib库的源码路径，nginx会自动编译，用于文件压缩</span></span><br><span class="line">--with-zlib-opt=parameters <span class="comment">#为zlib设置其他参数</span></span><br><span class="line">--with-zlib-asm=cpu <span class="comment">#允许使用针对其中一个指定CPU优化的zlib，例如：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, sparc32, sparc64, ppc64</span></span><br><span class="line">--with-libatomic<span class="comment">#强制使用libatomic库</span></span><br><span class="line">--with-libatomic=path <span class="comment">#指定libatomic库的源码路径，nginx会自动编译</span></span><br><span class="line">--with-openssl=path <span class="comment">#指定openssl库的源码路径，nginx会自动编译</span></span><br><span class="line">--with-openssl-opt=parameters <span class="comment">#为openssl设置其他参数</span></span><br><span class="line">--with-debug <span class="comment">#启用调试日志</span></span><br></pre></td></tr></table></figure>  </div></div><h2 id="nginx配置详解"><a href="#nginx配置详解" class="headerlink" title="nginx配置详解"></a>nginx配置详解</h2><div>  <div class="fold_hider">    <div class="close hider_title">nginx配置详解☞点击显/隐内容</div>  </div>  <div class="fold">    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line">user www www;<span class="comment">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line">worker_processes 8;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log error;<span class="comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line">pid /var/run/nginx.pid;<span class="comment">#进程文件</span></span><br><span class="line"><span class="comment">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span></span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">use epoll;</span><br><span class="line"><span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">include mime.types; <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">default_type application/octet-stream; <span class="comment">#默认文件类型</span></span><br><span class="line">charset utf-8; <span class="comment">#默认编码</span></span><br><span class="line">server_names_hash_bucket_size 128; <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">client_header_buffer_size 32k; <span class="comment">#上传文件大小限制</span></span><br><span class="line">large_client_header_buffers 4 64k; <span class="comment">#设定请求缓存</span></span><br><span class="line">client_max_body_size 8m; <span class="comment">#设定客户端请求缓存</span></span><br><span class="line">sendfile on; <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">autoindex on; <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">tcp_nopush on; <span class="comment">#防止网络阻塞</span></span><br><span class="line">tcp_nodelay on; <span class="comment">#防止网络阻塞</span></span><br><span class="line">keepalive_timeout 120; <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。</span></span><br><span class="line">fastcgi_connect_timeout 300;</span><br><span class="line">fastcgi_send_timeout 300;</span><br><span class="line">fastcgi_read_timeout 300;</span><br><span class="line">fastcgi_buffer_size 64k;</span><br><span class="line">fastcgi_buffers 4 64k;</span><br><span class="line">fastcgi_busy_buffers_size 128k;</span><br><span class="line">fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line"><span class="comment">#gzip模块设置</span></span><br><span class="line">gzip on; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">gzip_min_length 1k; <span class="comment">#最小压缩文件大小</span></span><br><span class="line">gzip_buffers 4 16k; <span class="comment">#压缩缓冲区</span></span><br><span class="line">gzip_http_version 1.0; <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">gzip_comp_level 2; <span class="comment">#压缩等级</span></span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line"><span class="comment">#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">gzip_vary on;</span><br><span class="line">limit_zone crawler <span class="variable">$binary_remote_addr</span> 10m; <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line"></span><br><span class="line">upstream blog.ha97.com &#123;</span><br><span class="line"><span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">server 192.168.80.121:80 weight=3;</span><br><span class="line">server 192.168.80.122:80 weight=2;</span><br><span class="line">server 192.168.80.123:80 weight=3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#虚拟主机的配置</span></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#监听端口</span></span><br><span class="line">    listen 80;</span><br><span class="line">    <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">    server_name www.aaa.com wwww.bbb.com;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root html;<span class="comment">#站点根目录</span></span><br><span class="line">    location ~ .*\.(php|php5)?$</span><br><span class="line">    &#123;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#图片缓存时间设置</span></span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">    expires 10d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">    expires 1h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#日志格式设定</span></span><br><span class="line">    log_format access <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="string">'"$http_user_agent" $http_x_forwarded_for'</span>;</span><br><span class="line">    <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/access.log access;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对 "/" 启用反向代理</span></span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:88;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    client_max_body_size 10m; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">    client_body_buffer_size 128k; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">    proxy_connect_timeout 90; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">    proxy_send_timeout 90; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">    proxy_read_timeout 90; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">    proxy_buffer_size 4k; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">    proxy_buffers 4 32k; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">    proxy_busy_buffers_size 64k; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    proxy_temp_file_write_size 64k;</span><br><span class="line">    <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">    location /NginxStatus &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log on;</span><br><span class="line">    auth_basic <span class="string">"NginxStatus"</span>;</span><br><span class="line">    auth_basic_user_file conf/htpasswd;</span><br><span class="line">    <span class="comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">    <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">    location ~ .(jsp|jspx|<span class="keyword">do</span>)?$ &#123;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class="line">    &#123; expires 15d; &#125;</span><br><span class="line">    location ~ .*.(js|css)?$</span><br><span class="line">    &#123; expires 1h; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过存储库安装nginx&quot;&gt;&lt;a href=&quot;#通过存储库安装nginx&quot; class=&quot;headerlink&quot; title=&quot;通过存储库安装nginx&quot;&gt;&lt;/a&gt;通过存储库安装nginx&lt;/h2&gt;
&lt;p&gt;CentOS 6.x系统：&lt;br&gt;
  &lt;figure c
      
    
    </summary>
    
      <category term="nginx" scheme="https://www.kapyan.top/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://www.kapyan.top/tags/nginx/"/>
    
  </entry>
  
</feed>
