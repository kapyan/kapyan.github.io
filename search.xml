<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[nginx安装]]></title>
    <url>%2Fnginx%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[通过存储库安装nginxCentOS 6.x系统：12echo -e "[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/6/$(uname -m)/\ngpgcheck=0\nenabled=1"&gt;&gt;/etc/yum.repos.d/nginx.repoyum install -y nginx CentOS 7.x系统：12echo -e "[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$(uname -m)/\ngpgcheck=0\nenabled=1"&gt;&gt;/etc/yum.repos.d/nginx.repoyum install -y nginx ubuntu系统：123sudo echo -e "deb http://nginx.org/packages/ubuntu/ codename nginx\ndeb-src http://nginx.org/packages/ubuntu/ codename nginx"&gt;&gt;/etc/apt/sources.listsudo apt-get updatesudo apt-get install -y nginx 源码编译安装nginxnginx各版本源码包下载以nginx-1.142为例centos系统：1234567useradd -M -s /sbin/nologin www #创建nginx运行用户yum -y install gcc pcre pcre-devel openssl openssl-devel zlib-devel gd gd-devel perl perl-ExtUtils-Embed #安装依赖wget http://nginx.org/download/nginx-1.14.2.tar.gz #下载nginx-1.14.2tar xf nginx-1.14.2.tar.gz #解压nginx压缩包cd nginx-1.14.2./configure --prefix=/usr/local/nginx-1.14.2 --user=www --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-http_perl_module --with-mail --with-mail_ssl_module --with-http_stub_status_module #设置编译参数make &amp;&amp; make install #编译安装 nginx编译参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236./configure --help --prefix=path #指定nginx安装路径，默认是/usr/local/nginx --sbin-path=path #指定二进制可执行文件路径，默认是prefix/sbin/nginx. --modules-path=path #指定modules路径，默认是prefix/modules --conf-path=path #指定nginx配置文件路径，默认是prefix/conf/nginx.conf. --error-log-path=path #指定错误日志文件路径，默认是prefix/logs/error.log. --pid-path=path sets the name of an nginx.pid file that will store the process ID of the main process. After installation, the file name can always be changed in the nginx.conf configuration file using the pid directive. By default the file is named prefix/logs/nginx.pid. --lock-path=path sets a prefix for the names of lock files. After installation, the value can always be changed in the nginx.conf configuration file using the lock_file directive. By default the value is prefix/logs/nginx.lock. --user=name sets the name of an unprivileged user whose credentials will be used by worker processes. After installation, the name can always be changed in the nginx.conf configuration file using the user directive. The default user name is nobody. --group=name sets the name of a group whose credentials will be used by worker processes. After installation, the name can always be changed in the nginx.conf configuration file using the user directive. By default, a group name is set to the name of an unprivileged user. --build=name sets an optional nginx build name. --builddir=path sets a build directory. --with-select_module --without-select_module enables or disables building a module that allows the server to work with the select() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll. --with-poll_module --without-poll_module enables or disables building a module that allows the server to work with the poll() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll. --with-threads enables the use of thread pools. --with-file-aio enables the use of asynchronous file I/O (AIO) on FreeBSD and Linux. --with-http_ssl_module enables building a module that adds the HTTPS protocol support to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module. --with-http_v2_module enables building a module that provides support for HTTP/2. This module is not built by default. --with-http_realip_module enables building the ngx_http_realip_module module that changes the client address to the address sent in the specified header field. This module is not built by default. --with-http_addition_module enables building the ngx_http_addition_module module that adds text before and after a response. This module is not built by default. --with-http_xslt_module --with-http_xslt_module=dynamic enables building the ngx_http_xslt_module module that transforms XML responses using one or more XSLT stylesheets. This module is not built by default. The libxml2 and libxslt libraries are required to build and run this module. --with-http_image_filter_module --with-http_image_filter_module=dynamic enables building the ngx_http_image_filter_module module that transforms images in JPEG, GIF, PNG, and WebP formats. This module is not built by default. --with-http_geoip_module --with-http_geoip_module=dynamic enables building the ngx_http_geoip_module module that creates variables depending on the client IP address and the precompiled MaxMind databases. This module is not built by default. --with-http_sub_module enables building the ngx_http_sub_module module that modifies a response by replacing one specified string by another. This module is not built by default. --with-http_dav_module enables building the ngx_http_dav_module module that provides file management automation via the WebDAV protocol. This module is not built by default. --with-http_flv_module enables building the ngx_http_flv_module module that provides pseudo-streaming server-side support for Flash Video (FLV) files. This module is not built by default. --with-http_mp4_module enables building the ngx_http_mp4_module module that provides pseudo-streaming server-side support for MP4 files. This module is not built by default. --with-http_gunzip_module enables building the ngx_http_gunzip_module module that decompresses responses with “Content-Encoding: gzip” for clients that do not support “gzip” encoding method. This module is not built by default. --with-http_gzip_static_module enables building the ngx_http_gzip_static_module module that enables sending precompressed files with the “.gz” filename extension instead of regular files. This module is not built by default. --with-http_auth_request_module enables building the ngx_http_auth_request_module module that implements client authorization based on the result of a subrequest. This module is not built by default. --with-http_random_index_module enables building the ngx_http_random_index_module module that processes requests ending with the slash character (‘/’) and picks a random file in a directory to serve as an index file. This module is not built by default. --with-http_secure_link_module enables building the ngx_http_secure_link_module module. This module is not built by default. --with-http_degradation_module enables building the ngx_http_degradation_module module. This module is not built by default. --with-http_slice_module enables building the ngx_http_slice_module module that splits a request into subrequests, each returning a certain range of response. The module provides more effective caching of big responses. This module is not built by default. --with-http_stub_status_module enables building the ngx_http_stub_status_module module that provides access to basic status information. This module is not built by default. --without-http_charset_module disables building the ngx_http_charset_module module that adds the specified charset to the “Content-Type” response header field and can additionally convert data from one charset to another. --without-http_gzip_module disables building a module that compresses responses of an HTTP server. The zlib library is required to build and run this module. --without-http_ssi_module disables building the ngx_http_ssi_module module that processes SSI (Server Side Includes) commands in responses passing through it. --without-http_userid_module disables building the ngx_http_userid_module module that sets cookies suitable for client identification. --without-http_access_module disables building the ngx_http_access_module module that allows limiting access to certain client addresses. --without-http_auth_basic_module disables building the ngx_http_auth_basic_module module that allows limiting access to resources by validating the user name and password using the “HTTP Basic Authentication” protocol. --without-http_mirror_module disables building the ngx_http_mirror_module module that implements mirroring of an original request by creating background mirror subrequests. --without-http_autoindex_module disables building the ngx_http_autoindex_module module that processes requests ending with the slash character (‘/’) and produces a directory listing in case the ngx_http_index_module module cannot find an index file. --without-http_geo_module disables building the ngx_http_geo_module module that creates variables with values depending on the client IP address. --without-http_map_module disables building the ngx_http_map_module module that creates variables with values depending on values of other variables. --without-http_split_clients_module disables building the ngx_http_split_clients_module module that creates variables for A/B testing. --without-http_referer_module disables building the ngx_http_referer_module module that can block access to a site for requests with invalid values in the “Referer” header field. --without-http_rewrite_module disables building a module that allows an HTTP server to redirect requests and change URI of requests. The PCRE library is required to build and run this module. --without-http_proxy_module disables building an HTTP server proxying module. --without-http_fastcgi_module disables building the ngx_http_fastcgi_module module that passes requests to a FastCGI server. --without-http_uwsgi_module disables building the ngx_http_uwsgi_module module that passes requests to a uwsgi server. --without-http_scgi_module disables building the ngx_http_scgi_module module that passes requests to an SCGI server. --without-http_grpc_module disables building the ngx_http_grpc_module module that passes requests to a gRPC server. --without-http_memcached_module disables building the ngx_http_memcached_module module that obtains responses from a memcached server. --without-http_limit_conn_module disables building the ngx_http_limit_conn_module module that limits the number of connections per key, for example, the number of connections from a single IP address. --without-http_limit_req_module disables building the ngx_http_limit_req_module module that limits the request processing rate per key, for example, the processing rate of requests coming from a single IP address. --without-http_empty_gif_module disables building a module that emits single-pixel transparent GIF. --without-http_browser_module disables building the ngx_http_browser_module module that creates variables whose values depend on the value of the “User-Agent” request header field. --without-http_upstream_hash_module disables building a module that implements the hash load balancing method. --without-http_upstream_ip_hash_module disables building a module that implements the ip_hash load balancing method. --without-http_upstream_least_conn_module disables building a module that implements the least_conn load balancing method. --without-http_upstream_keepalive_module disables building a module that provides caching of connections to upstream servers. --without-http_upstream_zone_module disables building a module that makes it possible to store run-time state of an upstream group in a shared memory zone. --with-http_perl_module --with-http_perl_module=dynamic enables building the embedded Perl module. This module is not built by default. --with-perl_modules_path=path defines a directory that will keep Perl modules. --with-perl=path sets the name of the Perl binary. --http-log-path=path sets the name of the primary request log file of the HTTP server. After installation, the file name can always be changed in the nginx.conf configuration file using the access_log directive. By default the file is named prefix/logs/access.log. --http-client-body-temp-path=path defines a directory for storing temporary files that hold client request bodies. After installation, the directory can always be changed in the nginx.conf configuration file using the client_body_temp_path directive. By default the directory is named prefix/ client_body_temp. --http-proxy-temp-path=path defines a directory for storing temporary files with data received from proxied servers. After installation, the directory can always be changed in the nginx.conf configuration file using the proxy_temp_path directive. By default the directory is named prefix/proxy_temp. --http-fastcgi-temp-path=path defines a directory for storing temporary files with data received from FastCGI servers. After installation, the directory can always be changed in the nginx.conf configuration file using the fastcgi_temp_path directive. By default the directory is named prefix/fastcgi_temp. --http-uwsgi-temp-path=path defines a directory for storing temporary files with data received from uwsgi servers. After installation, the directory can always be changed in the nginx.conf configuration file using the uwsgi_temp_path directive. By default the directory is named prefix/uwsgi_temp. --http-scgi-temp-path=path defines a directory for storing temporary files with data received from SCGI servers. After installation, the directory can always be changed in the nginx.conf configuration file using the scgi_temp_path directive. By default the directory is named prefix/scgi_temp. --without-http disables the HTTP server. --without-http-cache disables HTTP cache. --with-mail --with-mail=dynamic enables POP3/IMAP4/SMTP mail proxy server. --with-mail_ssl_module enables building a module that adds the SSL/TLS protocol support to the mail proxy server. This module is not built by default. The OpenSSL library is required to build and run this module. --without-mail_pop3_module disables the POP3 protocol in mail proxy server. --without-mail_imap_module disables the IMAP protocol in mail proxy server. --without-mail_smtp_module disables the SMTP protocol in mail proxy server. --with-stream --with-stream=dynamic enables building the stream module for generic TCP/UDP proxying and load balancing. This module is not built by default. --with-stream_ssl_module enables building a module that adds the SSL/TLS protocol support to the stream module. This module is not built by default. The OpenSSL library is required to build and run this module. --with-stream_realip_module enables building the ngx_stream_realip_module module that changes the client address to the address sent in the PROXY protocol header. This module is not built by default. --with-stream_geoip_module --with-stream_geoip_module=dynamic enables building the ngx_stream_geoip_module module that creates variables depending on the client IP address and the precompiled MaxMind databases. This module is not built by default. --with-stream_ssl_preread_module enables building the ngx_stream_ssl_preread_module module that allows extracting information from the ClientHello message without terminating SSL/TLS. This module is not built by default. --without-stream_limit_conn_module disables building the ngx_stream_limit_conn_module module that limits the number of connections per key, for example, the number of connections from a single IP address. --without-stream_access_module disables building the ngx_stream_access_module module that allows limiting access to certain client addresses. --without-stream_geo_module disables building the ngx_stream_geo_module module that creates variables with values depending on the client IP address. --without-stream_map_module disables building the ngx_stream_map_module module that creates variables with values depending on values of other variables. --without-stream_split_clients_module disables building the ngx_stream_split_clients_module module that creates variables for A/B testing. --without-stream_return_module disables building the ngx_stream_return_module module that sends some specified value to the client and then closes the connection. --without-stream_upstream_hash_module disables building a module that implements the hash load balancing method. --without-stream_upstream_least_conn_module disables building a module that implements the least_conn load balancing method. --without-stream_upstream_zone_module disables building a module that makes it possible to store run-time state of an upstream group in a shared memory zone. --with-google_perftools_module enables building the ngx_google_perftools_module module that enables profiling of nginx worker processes using Google Performance Tools. The module is intended for nginx developers and is not built by default. --with-cpp_test_module enables building the ngx_cpp_test_module module. --add-module=path enables an external module. --add-dynamic-module=path enables an external dynamic module. --with-compat enables dynamic modules compatibility. --with-cc=path sets the name of the C compiler. --with-cpp=path sets the name of the C preprocessor. --with-cc-opt=parameters sets additional parameters that will be added to the CFLAGS variable. When using the system PCRE library under FreeBSD, --with-cc-opt="-I /usr/local/include" should be specified. If the number of files supported by select() needs to be increased it can also be specified here such as this: --with-cc-opt="-D FD_SETSIZE=2048". --with-ld-opt=parameters sets additional parameters that will be used during linking. When using the system PCRE library under FreeBSD, --with-ld-opt="-L /usr/local/lib" should be specified. --with-cpu-opt=cpu enables building per specified CPU: pentium, pentiumpro, pentium3, pentium4, athlon, opteron, sparc32, sparc64, ppc64. --without-pcre disables the usage of the PCRE library. --with-pcre forces the usage of the PCRE library. --with-pcre=path sets the path to the sources of the PCRE library. The library distribution (version 4.4 — 8.42) needs to be downloaded from the PCRE site and extracted. The rest is done by nginx’s ./configure and make. The library is required for regular expressions support in the location directive and for the ngx_http_rewrite_module module. --with-pcre-opt=parameters sets additional build options for PCRE. --with-pcre-jit builds the PCRE library with “just-in-time compilation” support (1.1.12, the pcre_jit directive). --with-zlib=path sets the path to the sources of the zlib library. The library distribution (version 1.1.3 — 1.2.11 ) needs to be downloaded from the zlib site and extracted. The rest is done by nginx’s ./configure and make. The library is required for the ngx_http_gzip_module module. --with-zlib-opt=parameters sets additional build options for zlib. --with-zlib-asm=cpu enables the use of the zlib assembler sources optimized for one of the specified CPUs: pentium, pentiumpro. --with-libatomic forces the libatomic_ops library usage. --with-libatomic=path sets the path to the libatomic_ops library sources. --with-openssl=path sets the path to the OpenSSL library sources. --with-openssl-opt=parameters sets additional build options for OpenSSL. --with-debug enables the debugging log.]]></content>
      <categories>
        <category>nginx</category>
        <category>nginx安装</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab个人的简单使用]]></title>
    <url>%2Fgitlab%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[个人设置 头像、语言设置 修改密码 免密设置添加公钥后可在操作git仓库时免去输入用户名、密码的步骤。公钥获取：windows系统：打开C:\用户\username\\.ssh\id_rsa.pub文件，将内容复制到填写公钥的位置，其中username为当前用户名，一般是administratorlinux系统：输入cat ~/.ssh/id_rsa.pub命令，将内容复制到填写公钥的位置。如果没有id_rsa.pub文件，则需要创建秘钥，创建方法如下：windows系统：按“win+R”键，输入“cmd”并回车打开cmd窗口，输入“ssh-keygen”，按三次回车键，创建完成linux系统：在终端里输入“ssh-keygen”，按三次回车键，创建完成 创建项目 获取项目地址、下载项目 项目权限设置、添加项目成员]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geoserver+postgresql搭建]]></title>
    <url>%2Fgeoserver-postgresql%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[geoserver简介:&ensp;&ensp;&ensp;&ensp;Geoserver是一个功能齐全,遵循OGC开放标准的开源WFS-T和WMS服务器。利用Geoserver可以把数据作为maps/images来发布(利用WMS来实现)也可以直接发布实际的数据(利用WFS来实现),同时也提供了修改,删除和新增的功能(利用WFS-T)。它是开源的 ,允许用户查看和编辑地理数据。GeoServer 是符合OGC 规范的一个全功能的WFS-T 和WMS server。 geoserver+postgresql环境搭建：实验环境 系统及版本：Ubuntu16.0.4 jdk版本：1.8.0 tomcat版本：8.5 geoserver版本：2.14.1 postgresql版本：9.6 postgis版本：2.5 开始搭建：1. 安装jdk1.81sudo apt-get install -y openjdk-8-jdk 2. 安装tomcat8.512sudo wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz #下载Tomcattar xf apache-tomcat-8.5.37.tar.gz -C /usr/local/ &amp;&amp; mv /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat #解压Tomcat至/usr/local/tomcat目录 3. 安装geoserver12sudo wget https://nchc.dl.sourceforge.net/project/geoserver/GeoServer/2.14.1/geoserver-2.14.1-war.zip #下载geoserver2.14.1sudo unzip geoserver-2.14.1-war.zip &amp;&amp; sudo unzip -d /usr/local/tomcat/webapps/geoserver geoserver.war #解压geoserver压缩包至/usr/local/tomcat/webapps/geoserver目录 注：提示”unzip: command not found”，请使用sudo apt-get install -y zip 安装zip1/usr/local/tomcat/bin/startup.sh #启动tomcat tomcat启动成功后，在浏览器打开http://host_ip:8080/geoserver 访问geoserver服务将host_ip替换为server的ip地址，默认用户名：admin 密码：geoserver 4. 安装postgresql-9.6和postgis-2.5123456sudo echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main'&gt;&gt;/etc/apt/sources.list.d/pgdg.list #添加postgresql安装源sudo wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - #导入存储库签名秘钥sudo apt-get update #更新包列表sudo apt-get install -y postgresql-9.6 #安装postgresql9.6sudo apt-get install -y postgresql-9.6-postgis-2.5 #安装postgresql9.6对应的postgis扩展sudo service postgresql start #启动postgresql服务 至此geoserver+postgresql搭建完成！参考资料：postgresql官方安装文档 FAQ添加nginx反向代理在nginx添加以下host文件配置，并重启12345678910111213141516server &#123; server_name domain_name; #你的域名 listen 80; location / &#123; add_header 'Access-Control-Allow-Origin' *; add_header 'Access-Control-Allow-Credentials' 'true'; add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With'; add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS'; #配置跨域允许，防止程序调用geoserver被跨域拦截 proxy_pass http://localhost:8080; proxy_set_header Host $host:$server_port; &#125;&#125; geoserver添加JDBC Image Mosaic扩展下载JDBC Image Mosaic扩展并解压至geoserver所在目录的WEB-INF/lib/目录下geoserver2.14.1及扩展下载地址12wget https://jaist.dl.sourceforge.net/project/geoserver/GeoServer/2.14.1/extensions/geoserver-2.14.1-imagemosaic-jdbc-plugin.zip #下载JDBC Image Mosaic扩展unzip -d /usr/local/tomcat/webapps/geoserver/WEB-INF/lib/ geoserver-2.14.1-imagemosaic-jdbc-plugin.zip #解压至geoserver所在目录的WEB-INF/lib/目录下 postgresql开启远程连接1.修改/etc/postgresql/9.6/main/postgresql.conf第59行： #listen_addresses = &apos;localhost&apos; 为 listen_addresses = &apos;*&apos; 2.在/etc/postgresql/9.6/main/pg_hba.conf的 # IPv4 local connections: host all all 127.0.0.1/32 md5 后添加一行： host all all 0.0.0.0/0 md5 注：0.0.0.0/0代码允许所有网段访问，也可指定特定网段，如192.168.1.0/24 postgresql创建超级用户1234su postgres #切换至postgres用户psql #进入postgresqlCREATE ROLE test superuser PASSWORD '123456' login; #创建名为test，密码为123456的超级用户\du #查看所有用户 为数据库添加postgis空间数据库扩展12345678su postgres #切换至postgres用户psql -d yourdatabase -c "CREATE EXTENSION postgis;"psql -d yourdatabase -c "CREATE EXTENSION postgis_topology;"psql -d yourdatabase -c "CREATE EXTENSION postgis_sfcgal;"psql -d yourdatabase -c "CREATE EXTENSION fuzzystrmatch;"psql -d yourdatabase -c "CREATE EXTENSION address_standardizer;"psql -d yourdatabase -c "CREATE EXTENSION address_standardizer_data_us;"psql -d yourdatabase -c "CREATE EXTENSION postgis_tiger_geocoder;" GDAL PostGIS Raster driver未找到从postgis2.1.3开始，默认禁用out-of-db rasters和所有raster驱动，启用他们需要在系统中设置环境变量12echo "POSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALL"&gt;&gt; /etc/postgresql/9.6/main/environment #添加环境变量service postgresql restart #重启postgresql 参考资料：postgis官方安装文档 Geoserver发布shapfile，中文字段乱码问题如果预览视图显示中文为“□□□□”，是因为系统中没有相应的字体，需要安装字体，可以在windows系统的C:\Windows\fonts目录下找到需要的字体，并上传至/usr/share/fonts/custom目录下（没有则新建custom目录），并在/usr/share/fonts/custom目录执行以下命令1234sudo apt-get install -y font-manager #安装字体管理工具sudo mkfontscalesudo mkfontdirsudo fc-cache -fv 如果xml的中文显示为’???’，是因为系统的默认编码可能不支持中文，如“POSIX”123sudo locale #查看当前系统编码sudo locale -a #查看系统支持的所有编码export LANG="en_US.UTF-8" #修改系统编码（临时修改）]]></content>
      <categories>
        <category>geoserver</category>
      </categories>
      <tags>
        <tag>geoserver</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
