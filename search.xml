<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[gitlab数据备份、还原、迁移]]></title>
    <url>%2Fgitlab%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E3%80%81%E8%BF%98%E5%8E%9F%E3%80%81%E8%BF%81%E7%A7%BB.html</url>
    <content type="text"><![CDATA[gitlab备份12gitlab-rake gitlab:backup:create docker exec -i gitlab gitlab-rake gitlab:backup:create #docker环境中 备份文件在/var/opt/gitlab/backups/目录下，文件格式为“时间戳_年_月_日_版本号_gitlab_backup.tar”编辑/etc/gitlab/gitlab.rb文件中的“gitlab_rails[‘backup_path’] = ”参数可修改备份文件目录，需重新加载gitlab配置并重启 gitlab还原123456#停止相关数据连接服务gitlab-ctl stop unicorn gitlab-ctl stop sidekiq#还原gitlab-rake gitlab:backup:restore BACKUP=1547406063 #还原1547406063_2019_01_13_11.5.4_gitlab_backup.tar文件，“BACKUP=”后跟还原文件的时间戳gitlab-ctl start #启动gitlab服务 注：不能直接在终端执行gitlab-ctl stop停止所有服务，因为gitlab删除和还原操作还需要使用到redis和postgresql连接。 gitlab迁移将备份的文件拷贝至新的gitlab对应的备份目录下，执行还原的步骤。 新gitlab版本需要和原有版本一致，否则可能迁移失败！复制备份过程可能导致属组和属主发生变化，需要修改所有者为git]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab安装]]></title>
    <url>%2Fgitlab%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[脚本快速安装12345curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash #debcurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash #rpmcurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.node.sh | bash #nodecurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.python.sh | bash #pythoncurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.gem.sh | bash #gem(ruby) 访问gitlab地址：http://your_host_ip docker安装12345678910docker pull registry.cn-zhangjiakou.aliyuncs.com/kapyan/gitlab:11.5.4docker run --detach \ --hostname 192.168.1.208:8000 \ --publish 10000:443 --publish 8000:8000 --publish 20000:22 \ --name gitlab \ --restart always \ --volume /home/gitlab/config:/etc/gitlab \ --volume /home/gitlab/logs:/var/log/gitlab \ --volume /home/gitlab/data:/var/opt/gitlab \ gitlab #运行容器 docker exec -it gitlab /bin/bash #进入容器vim /etc/gitlab/gitlab.rbgitlab-ctl reconfigure #重新加载gitlab配置gitlab-ctl restart #重启gitlab访问gitlab地址：http://your_host_ip:8000官方安装包]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx安装]]></title>
    <url>%2Fnginx%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[通过存储库安装nginxCentOS 6.x系统：123echo -e "[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/6/$(uname -m)/\ngpgcheck=0\nenabled=1"&gt;&gt;/etc/yum.repos.d/nginx.repoyum install -y nginxchkconfig nginx on #设置开机自启动 CentOS 7.x系统：123echo -e "[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$(uname -m)/\ngpgcheck=0\nenabled=1"&gt;&gt;/etc/yum.repos.d/nginx.repoyum install -y nginxsystemctl enable nginx #设置开机自启动 ubuntu系统：1234sudo echo -e "deb http://nginx.org/packages/ubuntu/ codename nginx\ndeb-src http://nginx.org/packages/ubuntu/ codename nginx"&gt;&gt;/etc/apt/sources.listsudo apt-get updatesudo apt-get install -y nginxsystemctl enable nginx #设置开机自启动 源码编译安装nginxnginx各版本源码包下载以nginx-1.14.2为例：Centos系统：123456789useradd -M -s /sbin/nologin www #创建nginx运行用户yum -y install gcc pcre pcre-devel openssl openssl-devel zlib-devel gd gd-devel perl perl-ExtUtils-Embed #安装依赖wget http://nginx.org/download/nginx-1.14.2.tar.gz #下载nginx-1.14.2tar xf nginx-1.14.2.tar.gz #解压nginx压缩包cd nginx-1.14.2./configure --prefix=/usr/local/nginx-1.14.2 --user=www --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-http_perl_module --with-mail --with-mail_ssl_module --with-http_stub_status_module #设置编译参数make &amp;&amp; make install #编译安装ln -s /usr/local/nginx-1.14.2 /usr/local/nginx #给nginx添加软连接ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx Ubuntu系统：123456789useradd -M -s /sbin/nologin www #创建nginx运行用户apt-get install -y gcc libpcre3 libpcre3-dev zlib1g-dev libssl-dev libperl-dev build-essential openssl #安装依赖wget http://nginx.org/download/nginx-1.14.2.tar.gz #下载nginx-1.14.2tar xf nginx-1.14.2.tar.gz #解压nginx压缩包cd nginx-1.14.2./configure --prefix=/usr/local/nginx-1.14.2 --user=www --group=www --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-http_perl_module --with-mail --with-mail_ssl_module --with-http_stub_status_module #设置编译参数make &amp;&amp; make install #编译安装ln -s /usr/local/nginx-1.14.2 /usr/local/nginx #给nginx添加软连接ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx nginx官方启动脚本☞点击显/隐内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#!/bin/sh## nginx - this script starts and stops the nginx daemon## chkconfig: - 85 15# description: NGINX is an HTTP(S) server, HTTP(S) reverse \# proxy and IMAP/POP3 proxy server# processname: nginx# config: /etc/nginx/nginx.conf# config: /etc/sysconfig/nginx# pidfile: /var/run/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/usr/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/etc/nginx/nginx.conf"[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginxmake_dirs() &#123; # make required directories user=`$nginx -V 2&gt;&amp;1 | grep "configure arguments:.*--user=" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -` if [ -n "$user" ]; then if [ -z "`grep $user /etc/passwd`" ]; then useradd -M -s /bin/nologin $user fi options=`$nginx -V 2&gt;&amp;1 | grep 'configure arguments:'` for opt in $options; do if [ `echo $opt | grep '.*-temp-path'` ]; then value=`echo $opt | cut -d "=" -f 2` if [ ! -d "$value" ]; then # echo "creating" $value mkdir -p $value &amp;&amp; chown -R $user $value fi fi done fi&#125;start() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 make_dirs echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop sleep 1 start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac 官方启动脚本示例 nginx编译参数详解nginx编译参数☞点击显/隐内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134./configure --help --prefix=path #指定nginx安装路径，默认是/usr/local/nginx --sbin-path=path #指定二进制可执行文件路径，默认是prefix/sbin/nginx --modules-path=path #指定modules路径，默认是prefix/modules --conf-path=path #指定nginx配置文件路径，默认是prefix/conf/nginx.conf --error-log-path=path #指定错误日志文件路径，默认是prefix/logs/error.log --pid-path=path #设置nginx的pid文件路径，默认是prefix/logs/nginx.pid --lock-path=path #设置nginx的lock文件路径，默认是prefix/logs/nginx.lock，在nginx启动是创建，保证只有一个nginx服务运行 --user=name #设置nginx运行的用户，默认是nobody --group=name #设置nginx运行的组 --build=name #设置nginx的编译的名字，建议忽略该选项 --builddir=path #设置nginx的编译目录，建议忽略该选项 --with-select_module --without-select_module #配置服务器的是否使用select轮询接口（该接口低效且有限制），如果系统不支持如kqueue, epoll, 或/dev/poll等机制，则会构建该模块，保持默认即可 --with-poll_module --without-poll_module #poll接口比select接口更加高效，但是同样有一定的socket数量的限制，推荐使用默认 --with-threads #允许使用线程池，默认开启 --with-file-aio #在FreeBSD和Linux系统中开启异步文件I/O，默认开启 --with-http_ssl_module #开启https协议支持，默认不构建，要求安装openssl openssl-devel依赖 --with-http_v2_module #开启http/2协议支持，默认不构建 --with-http_realip_module #该模块可将客户端地址更改为在指定的头字段中发送的地址，默认不构建 --with-http_addition_module #该模块在响应之前和之后添加文本，默认不构建 --with-http_xslt_module # --with-http_xslt_module=dynamic #允许构建使用一个或多个XSLT样式表转换XML响应，默认不构建，需要安装libxml2和libxslt库 --with-http_image_filter_module --with-http_image_filter_module=dynamic #图像过滤器模块，可以转换JPEG、GIF、PNG和WebP格式的图像，默认不构建模块，该模块依赖libgd库，建议使用最新版本的库 --with-http_geoip_module --with-http_geoip_module=dynamic #使用预编译的MaxMind数据库创建具有取决于客户端IP地址的值得变量，该模块依赖MaxMind GeoIP 库，默认不构建 --with-http_sub_module #该模块通过一个指定的字符串替换为另一个字符串来修改响应，默认不构建 --with-http_dav_module #通过WebDAV协议进行文件管理自动化，默认不构建 --with-http_flv_module #为Flash Video(flv)文件提供伪流服务器端支持，默认不构建 --with-http_mp4_module #为MP4文件提供伪流服务器端支持，默认不构建 --with-http_gunzip_module #用于不支持gzip编码方法的客户端，默认不构建 --with-http_gzip_static_module #允许使用.gz文件扩展名发送预压缩文件，默认不构建 --with-http_auth_request_module #基于子请求的结果实现客户端授权，默认不构建 --with-http_random_index_module #处理以斜杠（“/”）结尾的请求，并选择目录中的随机文件作为索引文件，默认不构建 --with-http_secure_link_module #用于检查请求链路的真实性，保护资源免受未经授权的访问，并限制链路生存期，默认不构建 --with-http_degradation_module #开启ngx_http_degradation_module，默认不构建 --with-http_slice_module #此模块可将请求拆分为子请求，每个子请求都返回一定范围的响应，默认不构建 --with-http_stub_status_module #此模块提供对基本状态信息的访问，默认不构建 --without-http_charset_module #该模块将指定的字符集添加到“Content-Type”响应头字段，还可以将数据从一个字符集转换为另一个字符集，此参数将取消该模块 --without-http_gzip_module #禁用文件压缩模块 --without-http_ssi_module #禁用该模块，该模块在通过它的响应中处理SSI(服务器端包含)命令 --without-http_userid_module #禁用该模块，该模块设置适合客户端识别的cookie --without-http_access_module #禁用该模块，该模块允许限制对某些客户端地址的访问 --without-http_auth_basic_module #禁用该模块，该模块允许通过使用“HTTP基本身份验证”协议验证用户名和密码来限制对资源的访问 --without-http_mirror_module #禁用该模块，该模块通过创建后台镜像子请求来实现原始请求的镜像 --without-http_autoindex_module #禁用该模块，该模块处理以斜杠（“/”）结尾的请求，并在ngx_http_index_module模块找不到索引文件的情况下生成目录列表 --without-http_geo_module #禁用该模块，该模块使用取决于客户端IP地址的值创建变量 --without-http_map_module #禁用该模块，该模块创建的变量值取决于其他变量的值 --without-http_split_clients_module #禁用该模块，该模块适用于A/B测试的变量，也称为拆分测试 --without-http_referer_module #禁用该模块，该模块用于阻止对“referer”头字段中具有无效值的请求访问站点 --without-http_rewrite_module #禁用该模块，该模块用于请求重定向，依赖PCRE库 --without-http_proxy_module #禁用该模块，该模块用于http代理服务 --without-http_fastcgi_module #禁用将请求传给FastCGI服务器的模块 --without-http_uwsgi_module #禁用将请求传给uwsgi服务器的模块 --without-http_scgi_module #禁用将请求传给SCGI服务器的模块 --without-http_grpc_module #禁用将请求传给GRPC服务器的模块 --without-http_memcached_module #禁止该模块，该模块从memcached服务器获取响应 --without-http_limit_conn_module #禁止该模块，该模块用于限制每个定义密钥的连接数，例如来自单个ip地址的连接数 --without-http_limit_req_module #禁止该模块，该模块用于限制每个定义密钥的请求处理数速率，例如来自单个ip地址的请求处理速率 --without-http_empty_gif_module #禁止该模块，该模块用于发出单像素透明的GIF --without-http_browser_module #禁用该模块，该模块创建的变量的值取决于User-Agent请求标头字段的值 --without-http_upstream_hash_module #禁用该模块，该模块用于负载均衡的hash算法 --without-http_upstream_ip_hash_module #禁用该模块，该模块用于负载均衡的ip_hash算法 --without-http_upstream_keepalive_module #禁用该模块，该模块提供上游服务器的连接缓存 --without-http_upstream_zone_module #禁用该模块，该模块可以将上游组的运行时状态存储在共享内存区域中 --with-http_perl_module --with-http_perl_module=dynamic #用于在perl中实现位置和变量处理程序，并将perl调用插入到SSI中，依赖perl5.6.1或更高版本，默认不构建 --with-perl_modules_path=path #设置perl_modules模块保存目录 --with-perl=path #设置perl所在路径 --http-log-path=path #设置访问日志路径，默认是 prefix/logs/access.log --http-client-body-temp-path=path #设置存储客户端请求主体的临时文件目录，默认是prefix/ client_body_temp --http-proxy-temp-path=path #设置存储临时文件和从代理服务器接收的数据目录，默认是prefix/proxy_temp. --http-fastcgi-temp-path=path #设置存储从FastCGI服务器接收的数据的临时文件目录，默认prefix/fastcgi_temp --http-uwsgi-temp-path=path #设置存储从uwsgi服务器接收的数据的临时文件目录，默认prefix/uwsgi_temp --http-scgi-temp-path=path ##设置存储从scgi服务器接收的数据的临时文件目录，默认prefix/scgi_temp. --without-http #禁用http服务 --without-http-cache #禁用http缓存 --with-mail --with-mail=dynamic #启用POP3/IMAP4/SMTP邮件代理服务器，默认不构建 --with-mail_ssl_module #为邮件代理服务器提供SSL/TLS协议支持，依赖OpenSSL库，默认不构建 --without-mail_pop3_module #禁止POP3邮件代理服务 --without-mail_imap_module #禁止IMAP邮件代理服务 --without-mail_smtp_module #禁止SMTP邮件代理服务 --with-stream --with-stream=dynamic #允许构建流模块以进行通用的TCP/UDP代理和负载均衡，默认不构建 --with-stream_ssl_module #为流模块提供SSL/TLS协议支持，依赖OpenSSL库，默认不构建 --with-stream_realip_module #该模块将客户端地址更改为proxy协议头中发送的地址，默认不构建 --with-stream_geoip_module --with-stream_geoip_module=dynamic #该模块根据客户端IP地址和预编译的MaxMind数据库创建变量，依赖MaxMind GeoIP库，默认不构建 --with-stream_ssl_preread_module #该模块允许从ClientHello消息中提取信息而不终止SSL/TLS，默认不构建 --without-stream_limit_conn_module #禁止该模块，该模块用于限制每个定义密钥的连接数，例如来自单个ip地址的连接数 --without-stream_access_module #禁止该模块，该模块用于限制对某些客户端地址的访问 --without-stream_geo_module # --without-stream_map_module --without-stream_split_clients_module --without-stream_return_module #禁止该模块，该模块允许向客户端发送指定值，然后关闭连接 --without-stream_upstream_hash_module --without-stream_upstream_least_conn_module --without-stream_upstream_zone_module --with-google_perftools_module #该模块支持使用Google Performance Tools分析nginx工作进程，适用于nginx开发人员，依赖gperftools库默认不构建 --with-cpp_test_module # --add-module=path #加入第三方模块，path为 第三方模块路径 --add-dynamic-module=path #动态加载第三方模块 --with-compat #启动动态模块兼容性 --with-cc=path #指定C编译器路径 --with-cpp=path #指定C预处理器路径 --with-cc-opt=parameters #设置将添加到CFLAGS变量的其他参数，在FreeBSD下使用系统PCRE库时，应指定--with-cc-opt="-I /usr/local/include" --with-ld-opt=parameters #设置将在链接期间使用的其他参数，在FreeBSD下使用系统PCRE库时，应指定--with-ld-opt="-L /usr/local/lib" --with-cpu-opt=cpu #设置cpu类型，如: pentium, pentiumpro, pentium3, pentium4, athlon, opteron, sparc32, sparc64, ppc64 --without-pcre #禁止使用PCRE库 --with-pcre #强制使用PCRE库，PCRE库用于支持url重写和正则模块 --with-pcre=path #指定PCRE库的源码路径，nginx会自动编译 --with-pcre-opt=parameters #为PCRE设置其他参数 --with-pcre-jit #使用“即时编译”支持（1.1.12，pcre_jit指令）构建PCRE --with-zlib=path #指定zlib库的源码路径，nginx会自动编译，用于文件压缩 --with-zlib-opt=parameters #为zlib设置其他参数 --with-zlib-asm=cpu #允许使用针对其中一个指定CPU优化的zlib，例如：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, sparc32, sparc64, ppc64 --with-libatomic #强制使用libatomic库 --with-libatomic=path #指定libatomic库的源码路径，nginx会自动编译 --with-openssl=path #指定openssl库的源码路径，nginx会自动编译 --with-openssl-opt=parameters #为openssl设置其他参数 --with-debug #启用调试日志 nginx配置详解nginx配置详解☞点击显/隐内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137#定义Nginx运行的用户和用户组user www www; #nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;error_log /var/log/nginx/error.log error; #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]pid /var/run/nginx.pid; #进程文件#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。worker_rlimit_nofile 65535;#工作模式与连接数上限events&#123;#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。use epoll;#单个进程最大连接数（最大连接数=连接数*进程数）worker_connections 65535;&#125;#设定http服务器http&#123;include mime.types; #文件扩展名与文件类型映射表default_type application/octet-stream; #默认文件类型charset utf-8; #默认编码server_names_hash_bucket_size 128; #服务器名字的hash表大小client_header_buffer_size 32k; #上传文件大小限制large_client_header_buffers 4 64k; #设定请求缓存client_max_body_size 8m; #设定客户端请求缓存sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。tcp_nopush on; #防止网络阻塞tcp_nodelay on; #防止网络阻塞keepalive_timeout 120; #长连接超时时间，单位是秒#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。fastcgi_connect_timeout 300;fastcgi_send_timeout 300;fastcgi_read_timeout 300;fastcgi_buffer_size 64k;fastcgi_buffers 4 64k;fastcgi_busy_buffers_size 128k;fastcgi_temp_file_write_size 128k;#gzip模块设置gzip on; #开启gzip压缩输出gzip_min_length 1k; #最小压缩文件大小gzip_buffers 4 16k; #压缩缓冲区gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）gzip_comp_level 2; #压缩等级gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。gzip_vary on;limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用upstream blog.ha97.com &#123;#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。server 192.168.80.121:80 weight=3;server 192.168.80.122:80 weight=2;server 192.168.80.123:80 weight=3;&#125;#虚拟主机的配置server&#123; #监听端口 listen 80; #域名可以有多个，用空格隔开 server_name www.aaa.com wwww.bbb.com; index index.html index.htm index.php; root html; #站点根目录 location ~ .*\.(php|php5)?$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125; #图片缓存时间设置 location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 10d; &#125; #JS和CSS缓存时间设置 location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; #日志格式设定 log_format access '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" $http_x_forwarded_for'; #定义本虚拟主机的访问日志 access_log /var/log/nginx/access.log access; #对 "/" 启用反向代理 location / &#123; proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 &#125; #设定查看Nginx状态的地址 location /NginxStatus &#123; stub_status on; access_log on; auth_basic "NginxStatus"; auth_basic_user_file conf/htpasswd; #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。 &#125; #本地动静分离反向代理配置 #所有jsp的页面均交由tomcat或resin处理 location ~ .(jsp|jspx|do)?$ &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; &#125; #所有静态文件由nginx直接读取不经过tomcat或resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ &#123; expires 15d; &#125; location ~ .*.(js|css)?$ &#123; expires 1h; &#125;&#125;&#125;]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab个人的简单使用]]></title>
    <url>%2Fgitlab%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[个人设置 头像、语言设置 修改密码 免密设置添加公钥后可在操作git仓库时免去输入用户名、密码的步骤。公钥获取：windows系统：打开C:\用户\username\\.ssh\id_rsa.pub文件，将内容复制到填写公钥的位置，其中username为当前用户名，一般是administratorlinux系统：输入cat ~/.ssh/id_rsa.pub命令，将内容复制到填写公钥的位置。如果没有id_rsa.pub文件，则需要创建秘钥，创建方法如下：windows系统：按“win+R”键，输入“cmd”并回车打开cmd窗口，输入“ssh-keygen”，按三次回车键，创建完成linux系统：在终端里输入“ssh-keygen”，按三次回车键，创建完成 创建项目 获取项目地址、下载项目 项目权限设置、添加项目成员]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[geoserver+postgresql搭建]]></title>
    <url>%2Fgeoserver-postgresql%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[geoserver简介:&ensp;&ensp;&ensp;&ensp;Geoserver是一个功能齐全,遵循OGC开放标准的开源WFS-T和WMS服务器。利用Geoserver可以把数据作为maps/images来发布(利用WMS来实现)也可以直接发布实际的数据(利用WFS来实现),同时也提供了修改,删除和新增的功能(利用WFS-T)。它是开源的 ,允许用户查看和编辑地理数据。GeoServer 是符合OGC 规范的一个全功能的WFS-T 和WMS server。 geoserver+postgresql环境搭建：实验环境 系统及版本：Ubuntu16.0.4 jdk版本：1.8.0 tomcat版本：8.5 geoserver版本：2.14.1 postgresql版本：9.6 postgis版本：2.5 开始搭建：1. 安装jdk1.81sudo apt-get install -y openjdk-8-jdk 2. 安装tomcat8.512sudo wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz #下载Tomcattar xf apache-tomcat-8.5.37.tar.gz -C /usr/local/ &amp;&amp; mv /usr/local/apache-tomcat-8.5.37 /usr/local/tomcat #解压Tomcat至/usr/local/tomcat目录 3. 安装geoserver12sudo wget https://nchc.dl.sourceforge.net/project/geoserver/GeoServer/2.14.1/geoserver-2.14.1-war.zip #下载geoserver2.14.1sudo unzip geoserver-2.14.1-war.zip &amp;&amp; sudo unzip -d /usr/local/tomcat/webapps/geoserver geoserver.war #解压geoserver压缩包至/usr/local/tomcat/webapps/geoserver目录 注：提示”unzip: command not found”，请使用sudo apt-get install -y zip 安装zip1/usr/local/tomcat/bin/startup.sh #启动tomcat tomcat启动成功后，在浏览器打开http://host_ip:8080/geoserver 访问geoserver服务将host_ip替换为server的ip地址，默认用户名：admin 密码：geoserver 4. 安装postgresql-9.6和postgis-2.5123456sudo echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main'&gt;&gt;/etc/apt/sources.list.d/pgdg.list #添加postgresql安装源sudo wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - #导入存储库签名秘钥sudo apt-get update #更新包列表sudo apt-get install -y postgresql-9.6 #安装postgresql9.6sudo apt-get install -y postgresql-9.6-postgis-2.5 #安装postgresql9.6对应的postgis扩展sudo service postgresql start #启动postgresql服务 至此geoserver+postgresql搭建完成！参考资料：postgresql官方安装文档 通过docker安装docker镜像地址：registry.cn-zhangjiakou.aliyuncs.com/kapyan/geoserver:2.14.1 说明： 容器已集成geoserver的JDBC Image Mosaic、Vector Tiles扩展 GEOWEBCACHE_CACHE_DIR目录在/var/app/tomcat/webapps/ROOT/geo_web_cache_dir目录 postgresql远程连接已开启，用户名：wanshan 密码：wanshan@2018 可用中文字体：楷体、宋体、新宋体 安装：12docker pull registry.cn-zhangjiakou.aliyuncs.com/kapyan/geoserver:2.14.1docker run -it -d -p 80:8080 -p 5432:5432 --restart always --name geoserver -v /home/geoserver/data:/var/app/tomcat/webapps/ROOT/data/mydata -v /home/geoserver/geo_web_cache_dir:/var/app/tomcat/webapps/ROOT/geo_web_cache_dir geoserver FAQ添加nginx反向代理在nginx添加以下host文件配置，并重启12345678910111213141516server &#123; server_name domain_name; #你的域名 listen 80; location / &#123; add_header 'Access-Control-Allow-Origin' *; add_header 'Access-Control-Allow-Credentials' 'true'; add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With'; add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS'; #配置跨域允许，防止程序调用geoserver被跨域拦截 proxy_pass http://localhost:8080; proxy_set_header Host $host:$server_port; &#125;&#125; geoserver添加JDBC Image Mosaic扩展下载相应版本的JDBC Image Mosaic扩展并解压至geoserver所在目录的WEB-INF/lib/目录下geoserver2.14.1及扩展下载地址12wget https://jaist.dl.sourceforge.net/project/geoserver/GeoServer/2.14.1/extensions/geoserver-2.14.1-imagemosaic-jdbc-plugin.zip #下载JDBC Image Mosaic扩展unzip -d /usr/local/tomcat/webapps/geoserver/WEB-INF/lib/ geoserver-2.14.1-imagemosaic-jdbc-plugin.zip #解压至geoserver所在目录的WEB-INF/lib/目录下 geoserver添加Vector Tiles扩展下载相应版本的Vector Tiles扩展并解压至geoserver所在目录的WEB-INF/lib/目录下12wget https://jaist.dl.sourceforge.net/project/geoserver/GeoServer/2.14.1/extensions/geoserver-2.14.1-vectortiles-plugin.zip #下载Vector Tiles扩展unzip -d /usr/local/tomcat/webapps/geoserver/WEB-INF/lib/ geoserver-2.14.1-vectortiles-plugin.zip #解压至geoserver所在目录的WEB-INF/lib/目录下 编辑geoserver所在目录的/WEB-INF/web.xml文件，在第4行下添加如下内容：12345&lt;!--切片缓存目录--&gt;&lt;context-param&gt; &lt;param-name&gt;GEOWEBCACHE_CACHE_DIR&lt;/param-name&gt; &lt;param-value&gt;/usr/local/tomcat/webapps/geoserver/geo_web_cache_dir&lt;/param-value&gt;&lt;/context-param&gt; 然后重启tomcat 注：“/usr/local/tomcat/webapps/geoserver/geo_web_cache_dir”替换为自定义目录 geoserver开启jsonp编辑geoserver所在目录的/WEB-INF/web.xml文件，去掉以下注释：123443 &lt;!--&lt;context-param&gt;44 &lt;param-name&gt;ENABLE_JSONP&lt;/param-name&gt;45 &lt;param-value&gt;true&lt;/param-value&gt;46 &lt;/context-param&gt;--&gt; 改为123443 &lt;context-param&gt;44 &lt;param-name&gt;ENABLE_JSONP&lt;/param-name&gt;45 &lt;param-value&gt;true&lt;/param-value&gt;46 &lt;/context-param&gt; postgresql开启远程连接1.修改/etc/postgresql/9.6/main/postgresql.conf第59行： #listen_addresses = &apos;localhost&apos; 为 listen_addresses = &apos;*&apos; 2.在/etc/postgresql/9.6/main/pg_hba.conf的 # IPv4 local connections: host all all 127.0.0.1/32 md5 后添加一行： host all all 0.0.0.0/0 md5 注：0.0.0.0/0代码允许所有网段访问，也可指定特定网段，如192.168.1.0/24 postgresql创建超级用户1234su postgres #切换至postgres用户psql #进入postgresqlCREATE ROLE test superuser PASSWORD '123456' login; #创建名为test，密码为123456的超级用户\du #查看所有用户 为数据库添加postgis空间数据库扩展12345678su postgres #切换至postgres用户psql -d yourdatabase -c "CREATE EXTENSION postgis;"psql -d yourdatabase -c "CREATE EXTENSION postgis_topology;"psql -d yourdatabase -c "CREATE EXTENSION postgis_sfcgal;"psql -d yourdatabase -c "CREATE EXTENSION fuzzystrmatch;"psql -d yourdatabase -c "CREATE EXTENSION address_standardizer;"psql -d yourdatabase -c "CREATE EXTENSION address_standardizer_data_us;"psql -d yourdatabase -c "CREATE EXTENSION postgis_tiger_geocoder;" GDAL PostGIS Raster driver未找到从postgis2.1.3开始，默认禁用out-of-db rasters和所有raster驱动，启用他们需要在系统中设置环境变量12echo "POSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALL"&gt;&gt; /etc/postgresql/9.6/main/environment #添加环境变量service postgresql restart #重启postgresql 参考资料：postgis官方安装文档 中文字段乱码问题 如果预览视图显示中文为“□□□□”，是因为系统中没有相应的字体，需要安装字体，可以在windows系统的C:\Windows\fonts目录下找到需要的字体，并上传至/usr/share/fonts/custom目录下（没有则新建custom目录），并在/usr/share/fonts/custom目录执行以下命令123456sudo apt-get install -y font-manager #安装字体管理工具sudo mkfontscalesudo mkfontdirsudo fc-cache -fv sudo fc-list #查看已安装字体注：高版本系统可能没有mkfontscale命令，将字体所在路径加入/etc/fonts/fonts.conf文件的"&lt;dir&gt;your_fonts_path&lt;/dir&gt;"即可 如果xml的中文显示为’???’，是因为系统的默认编码可能不支持中文，如“POSIX”1234sudo locale #查看当前系统编码sudo locale -a #查看系统支持的所有编码export LANG="en_US.UTF-8" #修改系统编码（临时修改，重启失效）echo 'export LANG="en_US.UTF-8"' &gt;&gt; /etc/profile #修改系统编码（永久修改）]]></content>
      <categories>
        <category>geoserver</category>
      </categories>
      <tags>
        <tag>geoserver</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
</search>
