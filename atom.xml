<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运维之窗</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kapyan.top/"/>
  <updated>2019-05-17T02:12:08.476Z</updated>
  <id>https://www.kapyan.top/</id>
  
  <author>
    <name>没有风的晴天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装jenkins遇到的错误</title>
    <link href="https://www.kapyan.top/posts/4149858732.html"/>
    <id>https://www.kapyan.top/posts/4149858732.html</id>
    <published>2019-05-17T01:45:26.000Z</published>
    <updated>2019-05-17T02:12:08.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="No-such-plugin-cloudbees-folder"><a href="#No-such-plugin-cloudbees-folder" class="headerlink" title="No such plugin:cloudbees-folder"></a>No  such plugin:cloudbees-folder</h2><p>用Jenkins的war包部署时,报错如下图:<br><img src="/posts/4149858732/erro1.png" alt="error1"><br>是因为war包中缺少cloudbees-folder.hpi插件，下载该插件放在jenkins程序的WEB-INF/detached-plugins/目录下，重启Jenkins即可<br>cloudbees-folder.hpi下载地址：<a href="http://ftp.icm.edu.pl/packages/jenkins/plugins/cloudbees-folder/">http://ftp.icm.edu.pl/packages/jenkins/plugins/cloudbees-folder/</a></p><h2 id="Jenkins实例离线"><a href="#Jenkins实例离线" class="headerlink" title="Jenkins实例离线"></a>Jenkins实例离线</h2><p>在安装插件时出现该错误，报错如下图:<br><img src="/posts/4149858732/erro2.png" alt="error2"><br>Jenkins在下载插件之前会先检查网络连接，读取.jenkins/updates/default.json(默认在用户家目录下)中的connectionCheckUrl地址，默认是<a href="http://www.google.com/,所以会导致网络检测不通过，出现这个错误。将http://www.google.com/替换为http://www.baidu.com/,重启jenkins即可。">http://www.google.com/,所以会导致网络检测不通过，出现这个错误。将http://www.google.com/替换为http://www.baidu.com/,重启jenkins即可。</a></p><h2 id="修改Jenkins插件下载地址为国内地址"><a href="#修改Jenkins插件下载地址为国内地址" class="headerlink" title="修改Jenkins插件下载地址为国内地址"></a>修改Jenkins插件下载地址为国内地址</h2><p>修改文件.jenkins/hudson.model.UpdateCenter.xml，将地址替换为以下两个中的一个：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a><br><a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;No-such-plugin-cloudbees-folder&quot;&gt;&lt;a href=&quot;#No-such-plugin-cloudbees-folder&quot; class=&quot;headerlink&quot; title=&quot;No such plugin:cloudbees-folde
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.kapyan.top/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="jenkins" scheme="https://www.kapyan.top/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Centos7防火墙firewalld</title>
    <link href="https://www.kapyan.top/posts/450409287.html"/>
    <id>https://www.kapyan.top/posts/450409287.html</id>
    <published>2019-05-16T09:32:59.000Z</published>
    <updated>2019-05-17T02:31:09.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="firewalld服务命令"><a href="#firewalld服务命令" class="headerlink" title="firewalld服务命令"></a>firewalld服务命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld<span class="comment">#启动</span></span><br><span class="line">systemctl status firewalld <span class="comment">#查看状态</span></span><br><span class="line">systemctl stop firewalld<span class="comment">#停止</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld <span class="comment">#开机禁止启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld  <span class="comment">#开机自启</span></span><br><span class="line">firewall-cmd --version<span class="comment">#查看版本</span></span><br><span class="line">firewall-cmd --<span class="built_in">help</span><span class="comment">#查看帮助</span></span><br></pre></td></tr></table></figure><h2 id="firewalld操作"><a href="#firewalld操作" class="headerlink" title="firewalld操作"></a>firewalld操作</h2><h3 id="查看操作"><a href="#查看操作" class="headerlink" title="查看操作"></a>查看操作</h3><h4 id="查看已开放的服务"><a href="#查看已开放的服务" class="headerlink" title="查看已开放的服务"></a>查看已开放的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-services <span class="comment">#查看已开放的服务</span></span><br></pre></td></tr></table></figure><h4 id="查看可开放的服务"><a href="#查看可开放的服务" class="headerlink" title="查看可开放的服务"></a>查看可开放的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-services <span class="comment">#查看可开放的服务</span></span><br></pre></td></tr></table></figure><h4 id="查看开放的所有端口"><a href="#查看开放的所有端口" class="headerlink" title="查看开放的所有端口"></a>查看开放的所有端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports<span class="comment">#查看开放的所有端口</span></span><br></pre></td></tr></table></figure><h4 id="查看一个端口是否开放"><a href="#查看一个端口是否开放" class="headerlink" title="查看一个端口是否开放"></a>查看一个端口是否开放</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br></pre></td></tr></table></figure><h4 id="查看区域信息"><a href="#查看区域信息" class="headerlink" title="查看区域信息"></a>查看区域信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-active-zones<span class="comment">#查看区域信息</span></span><br></pre></td></tr></table></figure><h4 id="查看指定接口所属区域"><a href="#查看指定接口所属区域" class="headerlink" title="查看指定接口所属区域"></a>查看指定接口所属区域</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-zone-of-interface=eth0<span class="comment">#查看指定接口所属区域</span></span><br></pre></td></tr></table></figure><h3 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h3><h4 id="添加开放服务"><a href="#添加开放服务" class="headerlink" title="添加开放服务"></a>添加开放服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=http  --permanent <span class="comment">#http改为要开放的服务，--permanent参数表示永久生效，不加重启后失效</span></span><br></pre></td></tr></table></figure><blockquote>  <p>注意：<br>如果要添加的端口没有对应的服务，需新建一个服务，在/usr/lib/firewalld/services目录下新建一个xml文件，如：my.xml,添加以下内容（重启firewalld）：<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;service&gt;</span><br><span class="line">&lt;short&gt;服务名&lt;/short&gt;</span><br><span class="line">&lt;description&gt;描述&lt;/description&gt;</span><br><span class="line">&lt;port protocol=<span class="string">"协议"</span> port=<span class="string">"端口号"</span>/&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure>  </p></blockquote><h4 id="开放一个端口"><a href="#开放一个端口" class="headerlink" title="开放一个端口"></a>开放一个端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="拒绝操作"><a href="#拒绝操作" class="headerlink" title="拒绝操作"></a>拒绝操作</h3><h4 id="拒绝所有数据包"><a href="#拒绝所有数据包" class="headerlink" title="拒绝所有数据包"></a>拒绝所有数据包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-on<span class="comment">#拒绝所有数据包</span></span><br></pre></td></tr></table></figure><h4 id="取消拒绝状态"><a href="#取消拒绝状态" class="headerlink" title="取消拒绝状态"></a>取消拒绝状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-off<span class="comment">#取消拒绝状态</span></span><br></pre></td></tr></table></figure><h4 id="查看是否拒绝"><a href="#查看是否拒绝" class="headerlink" title="查看是否拒绝"></a>查看是否拒绝</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-panic<span class="comment">#查看是否拒绝</span></span><br></pre></td></tr></table></figure><h4 id="删除一个已开放的操作"><a href="#删除一个已开放的操作" class="headerlink" title="删除一个已开放的操作"></a>删除一个已开放的操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="更新防火墙规则"><a href="#更新防火墙规则" class="headerlink" title="更新防火墙规则"></a>更新防火墙规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload<span class="comment">#重新加载防火墙</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;firewalld服务命令&quot;&gt;&lt;a href=&quot;#firewalld服务命令&quot; class=&quot;headerlink&quot; title=&quot;firewalld服务命令&quot;&gt;&lt;/a&gt;firewalld服务命令&lt;/h2&gt;
&lt;figure class=&quot;highlight bas
      
    
    </summary>
    
      <category term="防火墙" scheme="https://www.kapyan.top/categories/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7系统安装maven环境</title>
    <link href="https://www.kapyan.top/posts/3483075867.html"/>
    <id>https://www.kapyan.top/posts/3483075867.html</id>
    <published>2019-05-16T03:43:28.000Z</published>
    <updated>2019-05-16T09:33:34.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="yum源安装maven"><a href="#yum源安装maven" class="headerlink" title="yum源安装maven"></a>yum源安装maven</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo</span><br><span class="line">sed -i s/\<span class="variable">$releasever</span>/7/g /etc/yum.repos.d/epel-apache-maven.repo</span><br><span class="line">yum install -y maven</span><br><span class="line">mvn -version<span class="comment">#查看maven版本</span></span><br></pre></td></tr></table></figure><h2 id="修改maven默认仓库为阿里云仓库"><a href="#修改maven默认仓库为阿里云仓库" class="headerlink" title="修改maven默认仓库为阿里云仓库"></a>修改maven默认仓库为阿里云仓库</h2><p>编辑/etc/maven/settings.xml，在mirros节点添加以下内容<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;       </span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure></p><h2 id="mvn命令打包"><a href="#mvn命令打包" class="headerlink" title="mvn命令打包"></a>mvn命令打包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clen install -Dmaven.test.skip=<span class="literal">true</span><span class="comment">#-Dmaven.test.skip跳过测试，</span></span><br></pre></td></tr></table></figure><blockquote>  <p>注：<br>mvn clean    package依次执行clean、resources、compile、testResources、testCompile、test、jar(打包)等７个阶段。<br>mvn    clean    install依次执行clean、resources、compile、testResources、testCompile、test、jar(打包)、install等8个阶段。<br>mvn    clean    deploy依次执行clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;yum源安装maven&quot;&gt;&lt;a href=&quot;#yum源安装maven&quot; class=&quot;headerlink&quot; title=&quot;yum源安装maven&quot;&gt;&lt;/a&gt;yum源安装maven&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.kapyan.top/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="jenkins" scheme="https://www.kapyan.top/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/jenkins/"/>
    
    
      <category term="maven" scheme="https://www.kapyan.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>gitlab配置发送邮箱</title>
    <link href="https://www.kapyan.top/posts/2918495377.html"/>
    <id>https://www.kapyan.top/posts/2918495377.html</id>
    <published>2019-05-06T07:33:18.000Z</published>
    <updated>2019-05-06T08:03:43.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>编辑/etc/gitlab/gitlab.rb文件，在文件结尾添加以下内容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.exmail.qq.com"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_port'</span>] = 465</span><br><span class="line">gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"1066818026@qq.com"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"mail_password"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_tls'</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">'1066818026@qq.com'</span></span><br></pre></td></tr></table></figure></p><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure<span class="comment">#重新加载配置</span></span><br></pre></td></tr></table></figure><h2 id="验证邮件发送"><a href="#验证邮件发送" class="headerlink" title="验证邮件发送"></a>验证邮件发送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console<span class="comment">#进入gitlab控制台</span></span><br><span class="line"><span class="comment">#发送测试邮件</span></span><br><span class="line">Notify.test_email(<span class="string">'1066818026@qq.com'</span>, <span class="string">'gitlab'</span>, <span class="string">'gitlab test'</span>).deliver_now</span><br></pre></td></tr></table></figure><h2 id="重启gitlab"><a href="#重启gitlab" class="headerlink" title="重启gitlab"></a>重启gitlab</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件&quot;&gt;&lt;/a&gt;修改配置文件&lt;/h2&gt;
&lt;p&gt;编辑/etc/gitlab/gitlab.rb文件，在文件结尾添加以下内容：&lt;br&gt;
  &lt;figure 
      
    
    </summary>
    
      <category term="gitlab" scheme="https://www.kapyan.top/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="https://www.kapyan.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>docker中遇到的坑</title>
    <link href="https://www.kapyan.top/posts/243756207.html"/>
    <id>https://www.kapyan.top/posts/243756207.html</id>
    <published>2019-05-05T08:32:22.000Z</published>
    <updated>2019-05-05T09:09:15.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="error-creating-overlay-mount-to-…-merged-invalid-argument"><a href="#error-creating-overlay-mount-to-…-merged-invalid-argument" class="headerlink" title="error creating overlay mount to …/merged: invalid argument"></a>error  creating overlay mount to …/merged: invalid argument</h2><p>在使用阿里云的Centos镜像重启docker容器时遇到该问题，这个问题是由于selinux造成的。系统中关闭了selinux，而docker上的selinux却是开启的，因此会产生该错误。<br>解决方法：将/etc/selinux/config中的SELINUX=disabled改成SELINUX=permissive。<br>参考链接：<a href="https://github.com/coreos/bugs/issues/2340">https://github.com/coreos/bugs/issues/2340</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;error-creating-overlay-mount-to-…-merged-invalid-argument&quot;&gt;&lt;a href=&quot;#error-creating-overlay-mount-to-…-merged-invalid-argument&quot; clas
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://www.kapyan.top/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="docker" scheme="https://www.kapyan.top/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/docker/"/>
    
    
      <category term="docker" scheme="https://www.kapyan.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>linux上挂载windows目录</title>
    <link href="https://www.kapyan.top/posts/2483896817.html"/>
    <id>https://www.kapyan.top/posts/2483896817.html</id>
    <published>2019-04-19T09:36:43.000Z</published>
    <updated>2019-04-19T10:06:07.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="共享需要挂载的windows目录"><a href="#共享需要挂载的windows目录" class="headerlink" title="共享需要挂载的windows目录"></a>共享需要挂载的windows目录</h2><p>在需要挂载的目录上右击鼠标，一次点击“属性”-&gt;“共享”-&gt;“共享(S…)”<br><img src="/posts/2483896817/fileshare.png" alt="share"></p><h2 id="挂载在linux系统上"><a href="#挂载在linux系统上" class="headerlink" title="挂载在linux系统上"></a>挂载在linux系统上</h2><p>格式为:mount -t cifs //ip/共享目录 /linux挂载目录 -o  username=用户名,password=密码,vers=2.0,uid=linux用户,gid=linux用户组<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /sharedata<span class="comment">#创建挂载目录</span></span><br><span class="line">mount -t cifs //192.168.1.10/go /sharedata -o username=administrator,password=123456.vers=2.0,uid=<span class="built_in">test</span>,gid=<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>注：此方式为临时挂载，重启系统后失效</p><h3 id="永久挂载"><a href="#永久挂载" class="headerlink" title="永久挂载"></a>永久挂载</h3><p>编辑/etc/fstab文件<br>在末行加入以下内容<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//192.168.1.10/go/sharedata cifsusername=administrator,password=123456.vers=2.0,uid=<span class="built_in">test</span>,gid=<span class="built_in">test</span>00</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;共享需要挂载的windows目录&quot;&gt;&lt;a href=&quot;#共享需要挂载的windows目录&quot; class=&quot;headerlink&quot; title=&quot;共享需要挂载的windows目录&quot;&gt;&lt;/a&gt;共享需要挂载的windows目录&lt;/h2&gt;
&lt;p&gt;在需要挂载的目录上右击鼠标
      
    
    </summary>
    
      <category term="文件共享" scheme="https://www.kapyan.top/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    
      <category term="文件共享" scheme="https://www.kapyan.top/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装配置Shadowsocks客户端</title>
    <link href="https://www.kapyan.top/posts/946277536.html"/>
    <id>https://www.kapyan.top/posts/946277536.html</id>
    <published>2019-04-18T09:03:56.000Z</published>
    <updated>2019-04-18T09:35:28.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Shadowsocks客户端"><a href="#安装Shadowsocks客户端" class="headerlink" title="安装Shadowsocks客户端"></a>安装Shadowsocks客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="配置Shadowsocks客户端"><a href="#配置Shadowsocks客户端" class="headerlink" title="配置Shadowsocks客户端"></a>配置Shadowsocks客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">vi /etc/shadowsocks/shadowsocks.json</span><br></pre></td></tr></table></figure><p>添加以下配置：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"server ip/server name"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:11211,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"password"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"workers"</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：将server、server_port、password、method替换为自己的账号信息<br>参数说明：</p><ul>  <li>server：Shadowsocks服务器地址</li>  <li>server_port：Shadowsocks服务器端口</li>  <li>local_address：本地IP</li>  <li>local_port：本地端口</li>  <li>password：Shadowsocks连接密码</li>  <li>timeout：等待超时时间</li>  <li>method：加密方式</li>  <li>workers:工作线程数</li>  <li>fast_open：true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+,<br>开启方法：<code>echo      3 &gt; /proc/sys/net/ipv4/tcp_fastopen</code></li></ul><h3 id="配置自启动脚本"><a href="#配置自启动脚本" class="headerlink" title="配置自启动脚本"></a>配置自启动脚本</h3><p>新建启动脚本文件/etc/systemd/system/shadowsocks.service<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>启动Shadowsocks客户端<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> shadowsocks.service</span><br><span class="line">systemctl start shadowsocks.service</span><br><span class="line">systemctl status shadowsocks.services</span><br></pre></td></tr></table></figure></p><p>验证Shadowsocks客户端是否正常运行：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure></p><h2 id="安装配置Privoxy"><a href="#安装配置Privoxy" class="headerlink" title="安装配置Privoxy"></a>安装配置Privoxy</h2><p>Shadowsocks是一个socket5服务，需要使用 Privoxy 把流量转到 http/https 上。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install privoxy</span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy</span><br><span class="line">systemctl start privoxy</span><br><span class="line">systemctl status privoxy</span><br></pre></td></tr></table></figure></p><h3 id="配置Privoxy"><a href="#配置Privoxy" class="headerlink" title="配置Privoxy"></a>配置Privoxy</h3><p>修改配置文件/etc/privoxy/config,取消下面两行注释<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address 127.0.0.1:8118 </span><br><span class="line">forward-socks5t / 127.0.0.1:1080 .</span><br></pre></td></tr></table></figure></p><h3 id="设置http-https代理"><a href="#设置http-https代理" class="headerlink" title="设置http/https代理"></a>设置http/https代理</h3><p>修改配置文件/etc/profile<br>添加如下信息：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Shadowsocks客户端&quot;&gt;&lt;a href=&quot;#安装Shadowsocks客户端&quot; class=&quot;headerlink&quot; title=&quot;安装Shadowsocks客户端&quot;&gt;&lt;/a&gt;安装Shadowsocks客户端&lt;/h2&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="代理" scheme="https://www.kapyan.top/categories/%E4%BB%A3%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>在CentOS7 安装selenium+chrome+chromedriver</title>
    <link href="https://www.kapyan.top/posts/2537485430.html"/>
    <id>https://www.kapyan.top/posts/2537485430.html</id>
    <published>2019-04-18T08:28:44.000Z</published>
    <updated>2019-04-18T08:57:23.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Chrome浏览器"><a href="#安装Chrome浏览器" class="headerlink" title="安装Chrome浏览器"></a>安装Chrome浏览器</h2><h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/yum.repos.d/google-chrome.repo&lt;&lt;EOF</span><br><span class="line">[google-chrome]</span><br><span class="line">name=google-chrome</span><br><span class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="安装google-chrome"><a href="#安装google-chrome" class="headerlink" title="安装google-chrome"></a>安装google-chrome</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install google-chrome-stable--nogpgcheck</span><br><span class="line">google-chrome --version<span class="comment">#查看版本</span></span><br></pre></td></tr></table></figure><p><a href="http://npm.taobao.org/mirrors/chromedriver/">chromedriver下载地址</a><br>根据google-chrome版本下载对应的chromedriver，解压至/usr/bin/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/xvfb-chrome<span class="comment">#添加以下内容</span></span><br><span class="line"><span class="function"><span class="title">_kill_procs</span></span>() &#123;  </span><br><span class="line">  <span class="built_in">kill</span> -TERM <span class="variable">$chrome</span>  </span><br><span class="line">  <span class="built_in">wait</span> <span class="variable">$chrome</span>  </span><br><span class="line">  <span class="built_in">kill</span> -TERM <span class="variable">$xvfb</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Setup a trap to catch SIGTERM and relay it to child processes  </span></span><br><span class="line"><span class="built_in">trap</span> _kill_procs SIGTERM  </span><br><span class="line">  </span><br><span class="line">XVFB_WHD=<span class="variable">$&#123;XVFB_WHD:-1280x720x16&#125;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># Start Xvfb  </span></span><br><span class="line">Xvfb :99 -ac -screen 0 <span class="variable">$XVFB_WHD</span> -nolisten tcp &amp;  </span><br><span class="line">xvfb=$!  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">export</span> DISPLAY=:99  </span><br><span class="line">  </span><br><span class="line">chrome --no-sandbox --<span class="built_in">disable</span>-gpu<span class="variable">$@</span> &amp;  </span><br><span class="line">chrome=$!  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$chrome</span>  </span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$xvfb</span></span><br></pre></td></tr></table></figure><p>更改Chrome启动软连接<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/bin/xvfb-chrome<span class="comment">#添加执行权限</span></span><br><span class="line">ln -s /etc/alternatives/google-chrome /usr/bin/chrome </span><br><span class="line">rm -rf /usr/bin/google-chrome </span><br><span class="line">ln -s /usr/bin/xvfb-chrome /usr/bin/google-chrome</span><br></pre></td></tr></table></figure></p><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建Python脚本test.py,添加以下内容<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">driver = webdriver.Chrome(executable_path=<span class="string">"/usr/bin/chromedriver"</span>, chrome_options=options)</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>运行<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 test.py <span class="comment">#无报错则正常</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Chrome浏览器&quot;&gt;&lt;a href=&quot;#安装Chrome浏览器&quot; class=&quot;headerlink&quot; title=&quot;安装Chrome浏览器&quot;&gt;&lt;/a&gt;安装Chrome浏览器&lt;/h2&gt;
&lt;h3 id=&quot;配置yum源&quot;&gt;&lt;a href=&quot;#配置yum源&quot; cl
      
    
    </summary>
    
      <category term="python" scheme="https://www.kapyan.top/categories/python/"/>
    
    
      <category term="Selenium" scheme="https://www.kapyan.top/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack各服务组件及架构</title>
    <link href="https://www.kapyan.top/posts/2462062835.html"/>
    <id>https://www.kapyan.top/posts/2462062835.html</id>
    <published>2019-04-16T00:50:11.000Z</published>
    <updated>2019-04-16T02:30:37.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openstack各组件说明"><a href="#openstack各组件说明" class="headerlink" title="openstack各组件说明"></a>openstack各组件说明</h2><table>  <thead>    <tr>      <th></th>      <th>项目名称</th>      <th>描述</th>    </tr>  </thead>  <tbody>    <tr>      <td>服务</td>      <td></td>      <td></td>    </tr>    <tr>      <td>Dashboard</td>      <td>Horizon</td>      <td>提供了一个基于web的自服务门户，与openstack底层服务交互，如：启动实例、分配IP及配置访问控制</td>    </tr>    <tr>      <td>Compute</td>      <td>Nova</td>      <td>在openstack环境中计算实例的生命周期管理。按需响应包括生成、调度、回收虚拟机等操作</td>    </tr>    <tr>      <td>Networking</td>      <td>Neutron</td>      <td>确保为其他openstack服务提供网络连接即服务，如openstack计算。为用户提供api定义网络和使用。基于插件的架构支持众多的网络提供商和技术</td>    </tr>    <tr>      <td>存储</td>      <td></td>      <td></td>    </tr>    <tr>      <td>Object Storage</td>      <td>Swift</td>      <td>通过一个restful,基于http的应用程序接口存储和任意检索的非结构化数据对象。它拥有高容错机制，基于数据复制和可扩展架构。它的实现像是一个文件服务器需要挂载目录。在此种方式下，它写入对象和文件到多个硬盘中，以确保数据是在集群内跨服务器的多份复制</td>    </tr>    <tr>      <td>Block storage</td>      <td>Cinder</td>      <td>为运行实例而提供的持久性块存储。它的可插拔驱动架构功能有助于创建和管理块存储设备</td>    </tr>    <tr>      <td>共享服务</td>      <td></td>      <td></td>    </tr>    <tr>      <td>Identity service</td>      <td>Keystone</td>      <td>为其他openstack服务提供认证和授权服务，为所有openstack服务提供一个端点目录</td>    </tr>    <tr>      <td>Image service</td>      <td>Glance</td>      <td>存储和检索虚拟机磁盘镜像，openstack计算会实例部署时使用此服务</td>    </tr>    <tr>      <td>Telemetry</td>      <td>Ceilometer</td>      <td>为openstack云的计费、基准、扩展性及统计等目的提供检测和计量</td>    </tr>    <tr>      <td>高层次服务</td>      <td></td>      <td></td>    </tr>    <tr>      <td>Orchestration</td>      <td>Heat</td>      <td>orchestration服务支持多样化的综合的云应用，通过调用openstack-native rest        api和cloudformation-compatible query api，支持：term:`HOT &lt;Heat        Orchestration Template (HOT)&gt;`格式模板或者AWS CloudFormation格式模板</td>    </tr>  </tbody></table><style>  table th:nth-of-type(1) {    width: 15%;  }  table th:nth-of-type(2) {    width: 15%;  }  table th:nth-of-type(3) {    width: 70%;  }</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;openstack各组件说明&quot;&gt;&lt;a href=&quot;#openstack各组件说明&quot; class=&quot;headerlink&quot; title=&quot;openstack各组件说明&quot;&gt;&lt;/a&gt;openstack各组件说明&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;t
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://www.kapyan.top/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="OpenStack" scheme="https://www.kapyan.top/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/OpenStack/"/>
    
    
      <category term="OpenStack" scheme="https://www.kapyan.top/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack部署</title>
    <link href="https://www.kapyan.top/posts/1681399788.html"/>
    <id>https://www.kapyan.top/posts/1681399788.html</id>
    <published>2019-03-29T05:42:07.000Z</published>
    <updated>2019-04-19T02:25:27.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过packstack安装OpenStack"><a href="#通过packstack安装OpenStack" class="headerlink" title="通过packstack安装OpenStack"></a>通过packstack安装OpenStack</h2><p>操作系统：Centos7+<br>配置:</p><ul>  <li>2+ vCPU</li>  <li>4G+ 内存</li>  <li>50G+ 磁盘</li>  <li>双网卡（单网卡也可）</li></ul><h3 id="非英文环境下设置"><a href="#非英文环境下设置" class="headerlink" title="非英文环境下设置"></a>非英文环境下设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/environment&lt;&lt;EOF</span><br><span class="line">LANG=en_US.utf-8</span><br><span class="line">LC_ALL=en_US.utf-8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙、网络管理服务、selinux"><a href="#关闭防火墙、网络管理服务、selinux" class="headerlink" title="关闭防火墙、网络管理服务、selinux"></a>关闭防火墙、网络管理服务、selinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop NetworkManager.service</span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager.service</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h3 id="添加安装源为阿里云的OpenStack-YUM源"><a href="#添加安装源为阿里云的OpenStack-YUM源" class="headerlink" title="添加安装源为阿里云的OpenStack YUM源"></a>添加安装源为阿里云的OpenStack  YUM源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/yum.repos.d/openstack-ocata.repo&lt;&lt;EOF</span><br><span class="line">[OpenStack-ocata]</span><br><span class="line">name=openstack-ocata</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7.6.1810/cloud/x86_64/openstack-ocata/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>添加kvm源<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/yum.repos.d/kvm.repo&lt;&lt;EOF</span><br><span class="line">[KVM]</span><br><span class="line">name=KVM</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/7.6.1810/virt/x86_64/kvm-common/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h3 id="安装epel源"><a href="#安装epel源" class="headerlink" title="安装epel源"></a>安装epel源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure><h3 id="安装packstack工具"><a href="#安装packstack工具" class="headerlink" title="安装packstack工具"></a>安装packstack工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openstack-packstack</span><br></pre></td></tr></table></figure><h3 id="单机部署OpenStack"><a href="#单机部署OpenStack" class="headerlink" title="单机部署OpenStack"></a>单机部署OpenStack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">packstack --allinone</span><br></pre></td></tr></table></figure><p>安装过程大概一个小时左右，用户名、密码在执行安装命令的当前目录的keystonerc_admin中<br><img src="/posts/1681399788/namepasswd.png" alt="password"></p><h3 id="登录dashboard"><a href="#登录dashboard" class="headerlink" title="登录dashboard"></a>登录dashboard</h3><p>访问<a href="http://host_ip/dashboard">http://host_ip/dashboard</a><br><img src="/posts/1681399788/dashboard.png" alt="dashboard"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过packstack安装OpenStack&quot;&gt;&lt;a href=&quot;#通过packstack安装OpenStack&quot; class=&quot;headerlink&quot; title=&quot;通过packstack安装OpenStack&quot;&gt;&lt;/a&gt;通过packstack安装OpenSta
      
    
    </summary>
    
      <category term="虚拟化" scheme="https://www.kapyan.top/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="OpenStack" scheme="https://www.kapyan.top/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/OpenStack/"/>
    
    
      <category term="openstack" scheme="https://www.kapyan.top/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下安装kettle</title>
    <link href="https://www.kapyan.top/posts/2220227672.html"/>
    <id>https://www.kapyan.top/posts/2220227672.html</id>
    <published>2019-03-20T09:18:40.000Z</published>
    <updated>2019-03-22T01:10:54.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kettle简单介绍"><a href="#kettle简单介绍" class="headerlink" title="kettle简单介绍"></a>kettle简单介绍</h2><p>Kettle是一种开源的 ETL 解决方案，书中介绍了如何使用PDI来实现数据的剖析、清洗、校验、抽取、转换、加载等各类常见的ETL类工作。<br>除了ODS/DW类比较大型的应用外，Kettle实际还可以为中小企业提供灵活的数据抽取和数据处理的功能。<br>Kettle除了支持各种关系型数据库、HBase、MongoDB这样的NoSQL数据源外，它还支持Excel、Access这类小型的数据源。<br>并且通过插件扩展，Kettle  可以支持各类数据源。本书详细介绍了Kettle可以处理的数据源，<br>而且详细介绍了如何使用Kettle抽取增量数据。Kettle的数据处理功能也很强大，除了选择、过滤、分组、连接、排序这些常用的功能外，<br>Kettle  里的Java表达式、正则表达式、Java脚本、Java类等功能都非常灵活而强大，都非常适合于各种数据处理功能</p><h2 id="在centos7下安装kettle"><a href="#在centos7下安装kettle" class="headerlink" title="在centos7下安装kettle"></a>在centos7下安装kettle</h2><p>kettle依赖java，在linux环境下需要安装webkitgtk。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk -y</span><br></pre></td></tr></table></figure></p><p>安装webkitgtk时提示包找不到，很多文章中说<code>yum install epel-release</code>后可以安装webkitgtk，但尝试并无效。根据以下方法亲测有效。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.coreix.net/li.nux.ro/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br><span class="line">rpm -ivh nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br><span class="line">yum install -y webkitgtk</span><br></pre></td></tr></table></figure></p><p><a href="2220227672/nux-dextop-release-0-5.el7.nux.noarch.rpm">nux-dextop-release-0-5.el7.nux.noarch.rpm下载</a><br>运行spoon.sh是提示java包存在异常无法启动kettle，将spoon.sh中的<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$OS</span> = <span class="string">"linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ((((<span class="string">"<span class="variable">$_PENTAHO_JAVA</span>"</span> <span class="variable">$OPT</span> -jar <span class="string">"<span class="variable">$STARTUP</span>"</span> -lib <span class="variable">$LIBPATH</span> <span class="string">"<span class="variable">$&#123;1+$@&#125;</span>"</span>  2&gt;&amp;1; <span class="built_in">echo</span> $? &gt;&amp;3 ) | grep -viE <span class="string">"Gtk-WARNING|GLib-GObject|GLib-CRITICAL|^$"</span> &gt;&amp;4 ) 3&gt;&amp;1)| inputtoexitstatus ) 4&gt;&amp;1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="string">"<span class="variable">$_PENTAHO_JAVA</span>"</span> <span class="variable">$OPT</span> -jar <span class="string">"<span class="variable">$STARTUP</span>"</span> -lib <span class="variable">$LIBPATH</span> <span class="string">"<span class="variable">$&#123;1+$@&#125;</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>修改为<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$OS</span> = <span class="string">"linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ((((<span class="string">"<span class="variable">$_PENTAHO_JAVA</span>"</span> <span class="variable">$OPT</span> -Dorg.eclipse.swt.internal.gtk.cairoGraphics=<span class="literal">false</span> -Dorg.eclipse.swt.browser.DefaultType=mozilla -jar <span class="string">"<span class="variable">$STARTUP</span>"</span> -lib <span class="variable">$LIBPATH</span> <span class="string">"<span class="variable">$&#123;1+$@&#125;</span>"</span>  2&gt;&amp;1; <span class="built_in">echo</span> $? &gt;&amp;3 ) | grep -viE <span class="string">"Gtk-WARNING|GLib-GObject|GLib-CRITICAL|^$"</span> &gt;&amp;4 ) 3&gt;&amp;1)| inputtoexitstatus ) 4&gt;&amp;1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="string">"<span class="variable">$_PENTAHO_JAVA</span>"</span> <span class="variable">$OPT</span> -jar <span class="string">"<span class="variable">$STARTUP</span>"</span> -lib <span class="variable">$LIBPATH</span> <span class="string">"<span class="variable">$&#123;1+$@&#125;</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>再次运行spoon.sh正常启动。</p><h2 id="数据库驱动下载"><a href="#数据库驱动下载" class="headerlink" title="数据库驱动下载"></a>数据库驱动下载</h2><p><a href="2220227672/ojdbc8.jar">oracle驱动下载</a><br><a href="2220227672/mysql-connector-java-5.1.46-bin.jar">mysql驱动下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kettle简单介绍&quot;&gt;&lt;a href=&quot;#kettle简单介绍&quot; class=&quot;headerlink&quot; title=&quot;kettle简单介绍&quot;&gt;&lt;/a&gt;kettle简单介绍&lt;/h2&gt;
&lt;p&gt;Kettle是一种开源的 ETL 解决方案，书中介绍了如何使用PDI来实现
      
    
    </summary>
    
      <category term="数据同步" scheme="https://www.kapyan.top/categories/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
    
      <category term="kettle" scheme="https://www.kapyan.top/tags/kettle/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库常用操作</title>
    <link href="https://www.kapyan.top/posts/1523118387.html"/>
    <id>https://www.kapyan.top/posts/1523118387.html</id>
    <published>2019-03-18T02:35:37.000Z</published>
    <updated>2019-04-19T02:21:14.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库登录"><a href="#数据库登录" class="headerlink" title="数据库登录"></a>数据库登录</h2><h3 id="进入sqlplus命令提示符"><a href="#进入sqlplus命令提示符" class="headerlink" title="进入sqlplus命令提示符"></a>进入sqlplus命令提示符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog<span class="comment">#在cmd直接运行</span></span><br></pre></td></tr></table></figure><h3 id="以DBA身份连接"><a href="#以DBA身份连接" class="headerlink" title="以DBA身份连接"></a>以DBA身份连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus / as sysdba<span class="comment">#在cmd直接运行</span></span><br><span class="line">connect / as sysdba<span class="comment">#在sqlplus命令提示符下运行</span></span><br></pre></td></tr></table></figure><h3 id="普通用户登录"><a href="#普通用户登录" class="headerlink" title="普通用户登录"></a>普通用户登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlplus username/password<span class="comment">#在cmd直接运行</span></span><br><span class="line">connect username/password<span class="comment">#在sqlplus命令提示符下运行</span></span><br><span class="line">connect username/password@servername<span class="comment">#在sqlplus命令提示符下运行</span></span><br></pre></td></tr></table></figure><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user username identified by password;<span class="comment">#Oracle12中username前要加c##</span></span><br></pre></td></tr></table></figure><h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create tablespace tablespacename datafile <span class="string">'D:\app\orcdata\data.dbf'</span> szie 1024M;</span><br></pre></td></tr></table></figure><h2 id="将空间分配给用户"><a href="#将空间分配给用户" class="headerlink" title="将空间分配给用户"></a>将空间分配给用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user username default tablespace tablespacename;</span><br></pre></td></tr></table></figure><h2 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant create session,create table,unlimited tablespace to username;</span><br></pre></td></tr></table></figure><h2 id="Oralce监听状态"><a href="#Oralce监听状态" class="headerlink" title="Oralce监听状态"></a>Oralce监听状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsnrctl status<span class="comment">#监听状态查看</span></span><br><span class="line">lsnrctl start<span class="comment">#监听状态启动</span></span><br><span class="line">lsnrctl stop<span class="comment">#监听状态停止</span></span><br></pre></td></tr></table></figure><h2 id="启动Oracle实例"><a href="#启动Oracle实例" class="headerlink" title="启动Oracle实例"></a>启动Oracle实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br><span class="line">start up</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库登录&quot;&gt;&lt;a href=&quot;#数据库登录&quot; class=&quot;headerlink&quot; title=&quot;数据库登录&quot;&gt;&lt;/a&gt;数据库登录&lt;/h2&gt;
&lt;h3 id=&quot;进入sqlplus命令提示符&quot;&gt;&lt;a href=&quot;#进入sqlplus命令提示符&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Oracle" scheme="https://www.kapyan.top/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="https://www.kapyan.top/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>minio常用操作</title>
    <link href="https://www.kapyan.top/posts/2398942176.html"/>
    <id>https://www.kapyan.top/posts/2398942176.html</id>
    <published>2019-03-01T08:32:20.000Z</published>
    <updated>2019-03-13T05:38:19.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="minio集群搭建"><a href="#minio集群搭建" class="headerlink" title="minio集群搭建"></a>minio集群搭建</h2><h3 id="配置key"><a href="#配置key" class="headerlink" title="配置key"></a>配置key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ACCESS_KEY=&lt;ACCESS_KEY&gt;</span><br><span class="line"><span class="built_in">export</span> MINIO_SECRET_KEY=&lt;SECRET_KEY&gt;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/minio server http://192.168.31.2/data1 http://192.168.31.2/data2 \</span><br><span class="line">               http://192.168.31.2/data3 http://192.168.31.2/data4 \</span><br><span class="line">               http://192.168.31.3/data1 http://192.168.31.3/data2 \</span><br><span class="line">               http://192.168.31.3/data3 http://192.168.31.3/data4 \</span><br><span class="line">               http://192.168.31.4/data1 http://192.168.31.4/data2 \</span><br><span class="line">               http://192.168.31.4/data3 http://192.168.31.4/data4 \</span><br><span class="line">               http://192.168.31.5/data1 http://192.168.31.5/data2 \</span><br><span class="line">               http://192.168.31.5/data3  http://192.168.31.5/data4</span><br></pre></td></tr></table></figure><h3 id="配置nginx支持LB"><a href="#配置nginx支持LB" class="headerlink" title="配置nginx支持LB"></a>配置nginx支持LB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">upstream minio &#123;</span><br><span class="line">   server 192.168.31.2:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.31.3:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.31.4:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    server 192.168.31.5:9000 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line"> &#125;</span><br><span class="line">server &#123;</span><br><span class="line"> listen 9000;</span><br><span class="line">     server_name localhost;</span><br><span class="line">     charset utf-8;</span><br><span class="line">     default_type text/html;</span><br><span class="line">     location /&#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">             proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">         client_body_buffer_size 10M;</span><br><span class="line">             client_max_body_size 10G;</span><br><span class="line">                proxy_buffers 1024 4k;</span><br><span class="line">             proxy_read_timeout 300;</span><br><span class="line">             proxy_next_upstream error timeout http_404;</span><br><span class="line">          proxy_pass http://minio;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="minio启动脚本"><a href="#minio启动脚本" class="headerlink" title="minio启动脚本"></a>minio启动脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Minio</span><br><span class="line">Documentation=https://docs.minio.io</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">AssertFileIsExecutable=/usr/<span class="built_in">local</span>/bin/minio</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">User=minio-user</span><br><span class="line">Group=minio-user</span><br><span class="line"></span><br><span class="line">PermissionsStartOnly=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">EnvironmentFile=-/etc/default/minio</span><br><span class="line">ExecStartPre=/bin/bash -c <span class="string">"[ -n \"<span class="variable">$&#123;MINIO_VOLUMES&#125;</span>\" ] || echo \"Variable MINIO_VOLUMES not set in /etc/defaults/minio\""</span></span><br><span class="line"></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/minio server <span class="variable">$MINIO_OPTS</span> <span class="variable">$MINIO_VOLUMES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Let systemd restart this service only if it has ended with the clean exit code or signal.</span></span><br><span class="line">Restart=on-success</span><br><span class="line"></span><br><span class="line">StandardOutput=journal</span><br><span class="line">StandardError=inherit</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the maximum file descriptor number that can be opened by this process</span></span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable timeout logic and wait until process is stopped</span></span><br><span class="line">TimeoutStopSec=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># SIGTERM signal is used to stop Minio</span></span><br><span class="line">KillSignal=SIGTERM</span><br><span class="line"></span><br><span class="line">SendSIGKILL=no</span><br><span class="line"></span><br><span class="line">SuccessExitStatus=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># Built for $&#123;project.name&#125;-$&#123;project.version&#125; ($&#123;project.name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="minio设置永久下载链接"><a href="#minio设置永久下载链接" class="headerlink" title="minio设置永久下载链接"></a>minio设置永久下载链接</h2><h3 id="添加minio-host"><a href="#添加minio-host" class="headerlink" title="添加minio host"></a>添加minio  host</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc config host add minio http://192.168.1.10:9000 &lt;access Key&gt; &lt;secret Key&gt; S3v4</span><br></pre></td></tr></table></figure><h3 id="配置下载策略"><a href="#配置下载策略" class="headerlink" title="配置下载策略"></a>配置下载策略</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将server端的base文件设置为开放管理，可以直接通url进行下载</span></span><br><span class="line">mc policy public minio/&lt;bucket&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;minio集群搭建&quot;&gt;&lt;a href=&quot;#minio集群搭建&quot; class=&quot;headerlink&quot; title=&quot;minio集群搭建&quot;&gt;&lt;/a&gt;minio集群搭建&lt;/h2&gt;
&lt;h3 id=&quot;配置key&quot;&gt;&lt;a href=&quot;#配置key&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="文件存储" scheme="https://www.kapyan.top/categories/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="minio" scheme="https://www.kapyan.top/tags/minio/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（八）</title>
    <link href="https://www.kapyan.top/posts/812097678.html"/>
    <id>https://www.kapyan.top/posts/812097678.html</id>
    <published>2019-03-01T01:06:25.000Z</published>
    <updated>2019-03-01T02:07:12.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="终端读取"><a href="#终端读取" class="headerlink" title="终端读取"></a>终端读取</h2><h3 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h3><p>Go语言fmt包下有fmt.Scan、fmt.Scanf、fmt.Scanln三个函数，可以在程序运行过程过程中获取用户输入。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scan</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Scan从标准输入扫描文本，将成功读取的空白分隔的值保存进成功传递给本函数的参数。换行视为空白，返回成功扫描的条目个数和遇到的任何错误。如果读取的条目比提供的参数少，会返回一个错误报告原因  。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scanf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Scanf从标准输入扫描文本，根据format参数指定的格式将成功读取的空白分隔的值保存进成功传递给本函数的参数。返回成功扫描的条目个数和遇到的任何错误。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scanln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Scanln类似Scan，但会在换行时才停止扫描。最后一个条目后必须有换行或者到大结束位置。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  firstname, lastname  <span class="keyword">string</span></span><br><span class="line">fmt.Scan(&amp;firstname, &amp;lastname)</span><br><span class="line">fmt.Scanf(<span class="string">"%s , %s"</span>, &amp;firstname, &amp;lastname)</span><br><span class="line">fmt.Scanln(&amp;firstname, &amp;lastname)</span><br></pre></td></tr></table></figure></p><h3 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h3><h4 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h4><p>os包提供一些函数和变量。<br>变量os.Args是一个字符串slice。可以理解它是一个动态容量的顺序数组s,可以通过s[i]来访问单个元素，通过s[m：n]来访问一段连续子区间，数组长度用len(s)表示。<br>在Go语言中，所有的索引使用半开区间，即包含第一个索引，不包含最后一个索引。<br>os.Args的第一个元素是os.Args[0]，它是命令本身的名字；另外的元素是程序开始执行的参数。表达式s[m:n]表示一个从第m个到第n-1个元素的slice。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Println(<span class="string">"参数"</span>+strconv.Itoa(k)+<span class="string">":"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="flag包"><a href="#flag包" class="headerlink" title="flag包"></a>flag包</h4><p>Go提供了一个flag包，支持基本的命令行标志解析。flag包相比单纯的通过os.Args切片分析命令行参数，提供了更强的能力，同时也是复杂的用法。<br>命令行解析常用函数和方法：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>从os.Args[1:]中解析注册的flag。必须在所有flag都注册好而未访问其值时执行。未注册却使用flag -help时，会返回ErrHelp。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Int</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">int</span>, usage <span class="keyword">string</span>)</span> *<span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>Int用指定的名称、默认值、使用信息注册一个int类型flag。返回一个保存了该flag的值的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Bool</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">bool</span>, usage <span class="keyword">string</span>)</span> *<span class="title">bool</span></span></span><br></pre></td></tr></table></figure></p><p>Bool用指定的名称、默认值、使用信息注册一个bool类型flag。返回一个保存了该flag的值的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">String</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">string</span>, usage <span class="keyword">string</span>)</span> *<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>String用指定的名称、默认值、使用信息注册一个string类型flag。返回一个保存了该flag的值的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Args</span><span class="params">()</span> []<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>返回解析之后剩下的非flag参数。（不包括命令名）<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FlagSet)</span> <span class="title">StringVar</span><span class="params">(p *<span class="keyword">string</span>, name <span class="keyword">string</span>, value <span class="keyword">string</span>, usage <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>StringVar用指定的名称、默认值、使用信息注册一个string类型flag，并将flag的值保存到p指向的变量。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = flag.Int(<span class="string">"i"</span>, <span class="number">0</span>, <span class="string">"int类型参数"</span>)</span><br><span class="line"><span class="keyword">var</span> b = flag.Bool(<span class="string">"b"</span>, <span class="literal">false</span>, <span class="string">"bool类型参数"</span>)</span><br><span class="line"><span class="keyword">var</span> s = flag.String(<span class="string">"s"</span>, <span class="string">""</span>, <span class="string">"string类型参数"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Println(<span class="string">"-i:"</span>, *i)</span><br><span class="line">fmt.Println(<span class="string">"-b:"</span>, *b)</span><br><span class="line">fmt.Println(<span class="string">"-s:"</span>, *s)</span><br><span class="line">fmt.Println(<span class="string">"其他参数："</span>, flag.Args())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译并运行，在窗口中输入：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build main.<span class="keyword">go</span> </span><br><span class="line">./main -i <span class="number">100</span> -b -s <span class="keyword">string</span> hi golang</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-i: <span class="number">100</span></span><br><span class="line">-b: <span class="literal">true</span></span><br><span class="line">-s: <span class="keyword">string</span></span><br><span class="line">其他参数： [hi golang]</span><br></pre></td></tr></table></figure></p><blockquote>  <p>上述代码在 flag.Prase() 之前，定义了 i、b、s 三个接受参数的变量， i、b、s 是指针类型的变量。flag.String()    方法返回的是保存日后解析出来的对应参数的值的位置，是一个已经分配好的空间，我们可以用这个指针变量来接受这个位置。<br>待程序重新进入main函数，执行flag.Parse()函数之后，这三个位置上就出现了我们命令行传入的参数（其实在程序初始化期就有默认值）。<br>后续我们可以使用    i、b、*s 来访问具体的内容。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;终端读取&quot;&gt;&lt;a href=&quot;#终端读取&quot; class=&quot;headerlink&quot; title=&quot;终端读取&quot;&gt;&lt;/a&gt;终端读取&lt;/h2&gt;
&lt;h3 id=&quot;标准输入&quot;&gt;&lt;a href=&quot;#标准输入&quot; class=&quot;headerlink&quot; title=&quot;标准输入&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（七）</title>
    <link href="https://www.kapyan.top/posts/3339487437.html"/>
    <id>https://www.kapyan.top/posts/3339487437.html</id>
    <published>2019-02-28T07:33:35.000Z</published>
    <updated>2019-02-28T09:36:38.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言反射"><a href="#Go语言反射" class="headerlink" title="Go语言反射"></a>Go语言反射</h2><h3 id="反射获取"><a href="#反射获取" class="headerlink" title="反射获取"></a>反射获取</h3><h4 id="反射介绍"><a href="#反射介绍" class="headerlink" title="反射介绍"></a>反射介绍</h4><p>反射可以在运行时动态获取变量的相关信息。Go语言中的reflect包实现了运行时反射，允许程序操作任意类型的对象。经典用法是静态类型interface{}保存一个值，通过调用TypeOF获取其动态类型信息，该函数返回一个Type类型值。调用ValueOf函数返回一个Value类型值，该值代表运行时的数据。Zero接受一个Type类型参数并返回一个代表该类型零值的Value类型值。<br>反射获取常用函数和方法：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure></p><p>TypeOf返回接口中保存的值的类型，TypeOf(nil)会返回nil。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValueOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>ValueOf返回一个初始化为i接口保管的具体值Value，ValueOf(nil)返回Value零值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Type)</span> <span class="title">ELem</span><span class="params">()</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure></p><p>返回map类型的键的类型。如非映射类型将panic<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Type)</span> <span class="title">Field</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">StructField</span></span></span><br></pre></td></tr></table></figure></p><p>返回索引序列指定的嵌套字段的类型，等价于用索引中的每个值链式调用本方法，如非结构体将会panic<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tag StructTag)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>Get方法返回标签字符串中键key对应的值。如果标签中没有该键，会返回””。如果标签不符合标准格式。Get的返回值是不确定的。</p><h4 id="反射获取应用"><a href="#反射获取应用" class="headerlink" title="反射获取应用"></a>反射获取应用</h4><ol>  <li>    <p>反射获取基本类型</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> o <span class="keyword">string</span> = <span class="string">"haha"</span></span><br><span class="line"><span class="comment">//返回值的类型</span></span><br><span class="line">t := reflect.TypeOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o type:"</span>, t)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回具体值的Value</span></span><br><span class="line">v := reflect.ValueOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o value:"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>反射获取结构体</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := Person&#123;<span class="string">"haha"</span>, <span class="number">18</span>&#125;</span><br><span class="line">t := reflect.TypeOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o type:"</span>, t)</span><br><span class="line">v := reflect.ValueOf(o)</span><br><span class="line">fmt.Println(<span class="string">"o value:"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>获取结构体 Tag</p>  </li></ol><p>获取结构体元素单一Tag<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:"u_name"`</span></span><br><span class="line">age  <span class="keyword">int</span>    <span class="string">`json:"u_age"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStructTag</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">t := reflect.TypeOf(i)</span><br><span class="line"></span><br><span class="line">tag := t.Elem().Field(<span class="number">0</span>).Tag.Get(<span class="string">"json"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Name Tag:%s\n"</span>, tag)</span><br><span class="line">tag = t.Elem().Field(<span class="number">1</span>).Tag.Get(<span class="string">"json"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Age Tag:%s\n"</span>, tag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := User &#123;<span class="string">"haha"</span>, <span class="number">18</span>&#125;</span><br><span class="line">getStructTag(&amp;a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取结构体元素多个Tag<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="keyword">string</span> <span class="string">`json:"user_name" xml:"UserName"`</span></span><br><span class="line">    &#125;</span><br><span class="line">    u := User&#123;</span><br><span class="line">        Name: <span class="string">"haha"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    f := reflect.TypeOf(u).Field(<span class="number">0</span>)</span><br><span class="line">    fmt.Println(f.Tag.Get(<span class="string">"json"</span>))</span><br><span class="line">    fmt.Println(f.Tag.Get(<span class="string">"xml"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>循环获取 结构体Tag<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span> <span class="string">`user name`</span></span><br><span class="line">Passwd <span class="keyword">string</span> <span class="string">`user password`</span></span><br><span class="line">&#125;</span><br><span class="line">u := &amp;User&#123;<span class="string">"haha"</span>, <span class="string">"haha123"</span>&#125;</span><br><span class="line">s := reflect.TypeOf(u).Elem()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.NumField(); i++ &#123;</span><br><span class="line">fmt.Println(s.Field(i).Tag)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="反射操作"><a href="#反射操作" class="headerlink" title="反射操作"></a>反射操作</h3><h4 id="反射操作常用函数和方法"><a href="#反射操作常用函数和方法" class="headerlink" title="反射操作常用函数和方法"></a>反射操作常用函数和方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Elem</span><span class="params">()</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure><p>Elem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface会Ptr或panic；如果v持有的值为nil，会返回Value零值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">SetInt</span><span class="params">(x <span class="keyword">int64</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>设置v的持有值。如果v的kind不是Int、Int8、Int16、Int32、Int64之一或者v.CanSet()返回假，会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Int</span><span class="params">()</span> <span class="title">int64</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有的有符号整数（表示为int64），如果v的Kind不是Int、Int8、Int16、Int32、Int64会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Kind</span><span class="params">()</span> <span class="title">Kind</span></span></span><br></pre></td></tr></table></figure></p><p>Kind返回v持有的值的分类，如果v是Value零值，返回值为Invalid。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">NumField</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有的结构体类型值的字段数，如果v的Kind不是Struct会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Field</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>返回结构体的第i个字段（的Value封装）。如果v的Kind不是Struct或i出界会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">SetString</span><span class="params">(x <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>设置v的持有值。如果v的Kind不是String或者v.CanSet()返回假，会panic。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">NumMethod</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有值的方法集的方法数目。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">MethodByName</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>返回v的名为name的方法的已绑定（到v的持有值的）状态的函数形式的Value封装。返回值调用Call方法时不应包含接收者；返回值持有的函数总是使用v的持有者作为接收者（即第一个参数）。如果未找到该方法，会返回一个Value零值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Call</span><span class="params">(in []Value)</span> []<span class="title">Value</span></span></span><br></pre></td></tr></table></figure></p><p>Call方法使用输入的参数in调用v持有的函数。例如，如果len(in) == 3，v.Call(in)代表调用v(in[0], in[1],  in[2])（其中Value值表示其持有值）。如果v的Kind不是Func会panic。它返回函数所有输出结果的Value封装的切片。和go代码一样，每一个输入实参的持有值都必须可以直接赋值给函数对应输入参数的类型。如果v持有值是可变参数函数，Call方法会自行创建一个代表可变参数的切片，将对应可变参数的值都拷贝到里面。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Value)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure></p><p>返回v持有的值的类型的Type表示。</p><h4 id="反射操作应用"><a href="#反射操作应用" class="headerlink" title="反射操作应用"></a>反射操作应用</h4><ol>  <li>    <p>通过反射操作基本类型，来改变基本类型的值。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    val := reflect.ValueOf(&amp;a)</span><br><span class="line">    val.Elem().SetInt(<span class="number">200</span>)</span><br><span class="line">    b := val.Elem().Int()</span><br><span class="line">    fmt.Printf(<span class="string">"a =&gt; %d , b =&gt; %d\n"</span>, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>反射操作结构体及调用结构体方法。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Course <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s School)</span> <span class="title">Echo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"name : %s , Course : %s \n"</span>, s.Name, s.Course)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">o := School&#123;</span><br><span class="line">Name:   <span class="string">"haha"</span>,</span><br><span class="line">Course: <span class="string">"Linux"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val := reflect.ValueOf(&amp;o)</span><br><span class="line">kd := val.Kind()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> kd != reflect.Ptr &amp;&amp; val.Elem().Kind() == reflect.Struct &#123;</span><br><span class="line">fmt.Println(<span class="string">"expect struct"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取字段数量</span></span><br><span class="line">fields := val.Elem().NumField()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d field\n"</span>, fields)</span><br><span class="line"><span class="comment">//获取字段的类型</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; fields; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d %v\n"</span>, i, val.Elem().Field(i).Kind())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 操作结构体</span></span><br><span class="line">val.Elem().Field(<span class="number">1</span>).SetString(<span class="string">"Golang"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取方法数量</span></span><br><span class="line">methods := val.NumMethod()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d methods\n"</span>, methods)</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射调用的Echo方法</span></span><br><span class="line"><span class="keyword">var</span> params []reflect.Value</span><br><span class="line">val.Elem().Method(<span class="number">0</span>).Call(params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h4 id="反射综合应用"><a href="#反射综合应用" class="headerlink" title="反射综合应用"></a>反射综合应用</h4><ol>  <li>定义一个结构体</li>  <li>给结构体赋值</li>  <li>用反射获取结构体的下标、结构体名称、类型、值</li>  <li>改变结构体值    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u := Student&#123;<span class="string">"haha"</span>, <span class="number">18</span>&#125;</span><br><span class="line">v := reflect.ValueOf(&amp;u).Elem()</span><br><span class="line">t := v.Type()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v.NumField(); i++ &#123;</span><br><span class="line">f := v.Field(i)</span><br><span class="line">fmt.Printf(<span class="string">"构体的下标: %d: 名称: %s 类型: %s 值: %v\n"</span>, i,</span><br><span class="line">t.Field(i).Name, f.Type(), f.Interface())</span><br><span class="line">&#125;</span><br><span class="line">v.Field(<span class="number">0</span>).SetString(<span class="string">"哈哈"</span>)</span><br><span class="line">v.Field(<span class="number">1</span>).SetInt(<span class="number">100</span>)</span><br><span class="line">fmt.Println(<span class="string">"u is now"</span>, u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h2 id="Go语言数据格式"><a href="#Go语言数据格式" class="headerlink" title="Go语言数据格式"></a>Go语言数据格式</h2><h3 id="json格式"><a href="#json格式" class="headerlink" title="json格式"></a>json格式</h3><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript  (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON  成为理想的数据交换语言。易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<br>Go语言对json的解析函数在encoding/json包里面，主要是编码和解码两个函数。</p><h4 id="Marshal函数"><a href="#Marshal函数" class="headerlink" title="Marshal函数"></a>Marshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>,error)</span></span></span><br></pre></td></tr></table></figure><p>Marshal函数返回v的json编码。<br>Marshal函数会递归的处理值。如果一个值实现了Marshaler接口切非nil指针，会调用其MarshalJSON方法来生成json编码。nil指针异常并不是严格必需的，但会模拟与UnmarshalJSON的行为类似的必需的异常。<br>否则，Marshal函数使用下面的基于类型的默认编码格式：</p><ul>  <li>布尔类型编码为json布尔类型。</li>  <li>浮点数、整数和Number类型的值编码为json数字类型。</li>  <li>字符串编码为json字符串。角括号”&lt;”和”&gt;”会转义为”\u003c”和”\u003e”以避免某些浏览器吧json输出错误理解为HTML。基于同样的原因，”&amp;”转义为”\u0026”。</li>  <li>数组和切片类型的值编码为json数组，但[]byte编码为base64编码字符串，nil切片编码为null。</li>  <li>结构体的值编码为json对象。每一个导出字段变成该对象的一个成员。除非字段的标签是“-” ，或字段是空值而其标签指定了omitempty选项。</li>  <li>空值是false、0、””、nil指针、nil接口、长度为0的数组、切片、映射。</li></ul><p>对象默认键字符串是结构体的字段名，但可以在结构体字段的标签里指定。结构体标签值里的”json”键为键名，后跟可选的逗号和选项。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字段被本包忽略</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:"-"`</span></span><br><span class="line"><span class="comment">// 字段在json里的键为"myName"</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:"myName"`</span></span><br><span class="line"><span class="comment">// 字段在json里的键为"myName"且如果字段为空值将在对象中省略掉</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:"myName,omitempty"`</span></span><br><span class="line"><span class="comment">// 字段在json里的键为"Field"（默认值），但如果字段为空值会跳过；注意前导的逗号</span></span><br><span class="line">Field <span class="keyword">int</span> <span class="string">`json:",omitempty"`</span></span><br></pre></td></tr></table></figure></p><p>“string”选项标记一个字段在编码json时应编码为字符串。它只适用于字符串、浮点数、整数类型的字段。这个额外水平的编码选项有时候会用于和javascript程序交互：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Int64String <span class="keyword">int64</span> <span class="string">`json:",string"`</span></span><br></pre></td></tr></table></figure></p><p>如果键名是只含有unicode字符、数字、美元符号、百分号、连字符、下划线和斜杠的非空字符串，将使用它代替字段名。</p><p>匿名的结构体字段一般序列化为他们内部的导出字段就好像位于外层结构体中一样。如果一个匿名结构体字段的标签给其提供了键名，则会使用键名代替字段名，而不视为匿名。</p><p>Go结构体字段的可视性规则用于供json决定那个字段应该序列化或反序列化时是经过修正了的。如果同一层次有多个（匿名）字段且该层次是最小嵌套的（嵌套层次则使用默认go规则），会应用如下额外规则：</p><ol>  <li>json标签为”-“的匿名字段强行忽略，不作考虑；</li>  <li>json标签提供了键名的匿名字段，视为非匿名字段；</li>  <li>其余字段中如果只有一个匿名字段，则使用该字段；</li>  <li>其余字段中如果有多个匿名字段，但压平后不会出现冲突，所有匿名字段压平；</li>  <li>其余字段中如果有多个匿名字段，但压平后出现冲突，全部忽略，不产生错误。</li></ol><p>对匿名结构体字段的管理是从go1.1开始的，在之前的版本，匿名字段会直接忽略掉。<br>映射类型的值编码为json对象。映射的键必须是字符串，对象的键直接使用映射的键。<br>指针类型的值编码为其指向的值（的json编码）。nil指针编码为null。<br>接口类型的值编码为接口内保持的具体类型的值（的json编码）。nil接口编码为null。<br>通道、复数、函数类型的值不能编码进json。尝试编码它们会导致Marshal函数返回UnsupportedTypeError。</p><p>Json不能表示循环的数据结构，将一个循环的结构提供给Marshal函数会导致无休止的循环。</p><h4 id="Unmarshal函数"><a href="#Unmarshal函数" class="headerlink" title="Unmarshal函数"></a>Unmarshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unamrshal</span><span class="params">(data []<span class="keyword">byte</span>,v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>Unmarshal函数解析json编码的数据并将结果存入v指向的值。<br>Unmarshal和Marshal做相反的操作，必要时申请映射、切片或指针，有如下的附加规则：<br>要将json数据解码写入一个指针，Unmarshal函数首先处理json数据是json字面值null的情况。此时，函数将指针设为nil；否则，函数将json数据解码写入指针指向的值；如果指针本身是nil，函数会先申请一个值并使指针指向它。<br>要将json数据解码写入一个结构体，函数会匹配输入对象的键和Marshal使用的键（结构体字段名或者它的标签指定的键名），优先选择精确的匹配，但也接受大小写不敏感的匹配。<br>要将json数据解码写入一个接口类型值，函数会将数据解码为如下类型写入接口：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Bool                   对应JSON布尔类型</span><br><span class="line"><span class="keyword">float64</span>                对应JSON数字类型</span><br><span class="line"><span class="keyword">string</span>                 对应JSON字符串类型</span><br><span class="line">[]<span class="keyword">interface</span>&#123;&#125;          对应JSON数组</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; 对应JSON对象</span><br><span class="line"><span class="literal">nil</span>                    对应JSON的null</span><br></pre></td></tr></table></figure></p><p>如果一个JSON值不匹配给出的目标类型，或者如果一个json数字写入目标类型时溢出，Unmarshal函数会跳过该字段并尽量完成其余的解码操作。如果没有出现更加严重的错误，本函数会返回一个描述第一个此类错误的详细信息的UnmarshalTypeError。<br>JSON的null值解码为go的接口、指针、切片时会将它们设为nil，因为null在json里一般表示“不存在”。解码json的null值到其他go类型时，不会造成任何改变，也不会产生错误。<br>当解码字符串时，不合法的utf-8或utf-16代理（字符）对不视为错误，而是将非法字符替换为unicode字符U+FFFD。</p><h4 id="值类型json转换"><a href="#值类型json转换" class="headerlink" title="值类型json转换"></a>值类型json转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// int 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonInt</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="number">100</span></span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">int</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"int 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonString</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="string">"haha"</span></span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">string</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"string 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonArray</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Golang"</span>&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply [<span class="number">2</span>]<span class="keyword">string</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"array 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">JsonInt()</span><br><span class="line">JsonString()</span><br><span class="line">JsonArray()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针类型json转换"><a href="#指针类型json转换" class="headerlink" title="指针类型json转换"></a>指针类型json转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = []<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Golang"</span>, <span class="string">"Java"</span>, <span class="string">"DBA"</span>&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply []<span class="keyword">string</span></span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"slice 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonMap</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"haha"</span>, <span class="number">2</span>: <span class="string">"Linux"</span>, <span class="number">3</span>: <span class="string">"Python"</span>, <span class="number">4</span>: <span class="string">"Golang"</span>, <span class="number">5</span>: <span class="string">"Java"</span>, <span class="number">6</span>: <span class="string">"DBA"</span>&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>, <span class="number">6</span>)</span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"map 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">JsonSlice()</span><br><span class="line">JsonMap()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构体json转换"><a href="#结构体json转换" class="headerlink" title="结构体json转换"></a>结构体json转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">Age     <span class="keyword">int</span>    <span class="string">`json:"-"`</span></span><br><span class="line">Courses []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct 类型 json转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = School&#123;</span><br><span class="line">Name:    <span class="string">"haha"</span>,</span><br><span class="line">Age:     <span class="number">100</span>,</span><br><span class="line">Courses: []<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Golang"</span>, <span class="string">"Java"</span>, <span class="string">"DBA"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">data, err := json.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"json.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply School</span><br><span class="line">err = json.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"struct 类型\nJSON序列化 string(data) =&gt; %s\nJSON反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">JsonStruct()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>  <p>School 类型<br>Name字段：JSON序列化、反序列化的时候，使用 name，而不是 Name。<br>Age字段：json:”-“    JSON序列化、反序列化的时候忽略该字段。默认情况下会解析这个字段，因为它是大写字母开头的。<br>Courses字段：因为它是大写字母开头的，JSON序列化、反序列化的时候默认解析这个字段。</p></blockquote><h3 id="xml格式"><a href="#xml格式" class="headerlink" title="xml格式"></a>xml格式</h3><p>XML是可扩展标记语言（标准通用标记语言的子集）是一种简单的数据存储语言。<br>使用一系列简单的标记描述数据，而这些标记可以用方便的方式建立，虽然可扩展标记语言占用的空间比二进制数据要占用更多的空间，但可扩展标记语言极其简单易于掌握和使用。<br>Go语言中提供了处理XML的标准库  encoding/xml 包，该包实现了一个简单的XML 1.0 解析器（支持XML命名空间）。</p><h4 id="Marshal函数-1"><a href="#Marshal函数-1" class="headerlink" title="Marshal函数"></a>Marshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>Marshal函数返回v的XML编码。<br>Marshal处理数组或者切片时会序列化每一个元素。Marshal处理指针时，会序列化其指向的值；如果指针为nil，则啥也不输出。Marshal处理接口时，会序列化其内包含的具体类型值，如果接口值为nil，也是不输出。Marshal处理其余类型数据时，会输出一或多个包含数据的XML元素。<br>XML元素的名字按如下优先顺序获取：</p><ol>  <li>如果数据是结构体，其XMLName字段的标签</li>  <li>类型为xml.Name的XMLName字段的值</li>  <li>数据是某结构体的字段，其标签</li>  <li>数据是某结构体的字段，其字段名</li>  <li>被序列化的类型的名字</li></ol><p>一个结构体的XML元素包含该结构体所有导出字段序列化后的元素，有如下例外：</p><ol>  <li>XMLName字段，如上所述，会省略</li>  <li>具有标签”-“的字段会省略</li>  <li>具有标签”name,attr”的字段会成为该XML元素的名为name的属性</li>  <li>具有标签”,attr”的字段会成为该XML元素的名为字段名的属性</li>  <li>具有标签”,chardata”的字段会作为字符数据写入，而非XML元素</li>  <li>具有标签”,innerxml”的字段会原样写入，而不会经过正常的序列化过程</li>  <li>具有标签”,comment”的字段作为XML注释写入，而不经过正常的序列化过程，该字段内不能有”–”字符串</li>  <li>标签中包含”omitempty”选项的字段如果为空值会省略<br>空值为false、0、nil指针、nil接口、长度为0的数组、切片、映射</li>  <li>匿名字段（其标签无效）会被处理为其字段是外层结构体的字段</li></ol><p>如果一个字段的标签为”a&gt;b&gt;c”，则元素c将会嵌套进其上层元素a和b中。如果该字段相邻的字段标签指定了同样的上层元素，则会放在同一个XML元素里。</p><h4 id="Unmarshal函数-1"><a href="#Unmarshal函数-1" class="headerlink" title="Unmarshal函数"></a>Unmarshal函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="keyword">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>Unmarshal解析XML编码的数据并将结果存入v指向的值。v只能指向结构体、切片或者和字符串。良好格式化的数据如果不能存入v，会被丢弃。<br>因为Unmarshal使用reflect包，它只能填写导出字段。本函数好似用大小写敏感的比较来匹配XML元素名和结构体的字段名/标签键名。<br>Unmarshal函数使用如下规则将XML元素映射到结构体字段上。这些规则中，字段标签指的是结构体字段的标签键’xml’对应的值：</p><ol>  <li>如果结构体字段的类型为字符串或者[]byte，且标签为”,innerxml”，Unmarshal函数直接将对应原始XML文本写入该字段，其余规则仍适用。</li>  <li>如果结构体字段类型为xml.Name且名为XMLName，Unmarshal会将元素名写入该字段</li>  <li>如果字段XMLName的标签的格式为”name”或”namespace-URL    name”，XML元素必须有给定的名字（以及可选的名字空间），否则Unmarshal会返回错误。</li>  <li>如果XML元素的属性的名字匹配某个标签”,attr”为字段的字段名，或者匹配某个标签为”name,attr”的字段的标签名，Unmarshal会将该属性的值写入该字段。</li>  <li>如果XML元素包含字符数据，该数据会存入结构体中第一个具有标签”,chardata”的字段中，该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</li>  <li>如果XML元素包含注释，该数据会存入结构体中第一个具有标签”,comment”的字段中，该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</li>  <li>如果XML元素包含一个子元素，其名称匹配格式为”a”或”a&gt;b&gt;c”的标签的前缀，反序列化会深入XML结构中寻找具有指定名称的元素，并将最后端的元素映射到该标签所在的结构体字段。以”&gt;”开始的标签等价于以字段名开始并紧跟着”&gt;”    的标签。</li>  <li>如果XML元素包含一个子元素，其名称匹配某个结构体类型字段的XMLName字段的标签名，且该结构体字段本身没有显式指定标签名，Unmarshal会将该元素映射到该字段。</li>  <li>如果XML元素的包含一个子元素，其名称匹配够格结构体字段的字段名，且该字段没有任何模式选项（”,attr”、”,chardata”等），Unmarshal会将该元素映射到该字段。</li>  <li>如果XML元素包含的某个子元素不匹配以上任一条，而存在某个字段其标签为”,any”，Unmarshal会将该元素映射到该字段。</li>  <li>匿名字段被处理为其字段好像位于外层结构体中一样。</li>  <li>标签为”-“的结构体字段永不会被反序列化填写。</li></ol><p>Unmarshal函数将XML元素写入string或[]byte时，会将该元素的字符数据串联起来作为值，目标[]byte不能是nil。<br>Unmarshal函数将属性写入string或[]byte时，会将属性的值以字符串/切片形式写入。<br>Unmarshal函数将XML元素写入切片时，会将切片扩展并将XML元素的子元素映射入新建的值里。<br>Unmarshal函数将XML元素/属性写入bool值时，会将对应的字符串转化为布尔值。<br>Unmarshal函数将XML元素/属性写入整数或浮点数类型时，会将对应的字符串解释为十进制数字。不会检查溢出。<br>Unmarshal函数将XML元素写入xml.Name类型时，会记录元素的名称。<br>Unmarshal函数将XML元素写入指针时，会申请一个新值并将XML元素映射入该值。</p><h4 id="xml转换应用"><a href="#xml转换应用" class="headerlink" title="xml转换应用"></a>xml转换应用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/xml"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> School <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`xml:"name"`</span></span><br><span class="line">Age     <span class="keyword">int</span>    <span class="string">`xml:"-"`</span></span><br><span class="line">Courses []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">XmlStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arg = School&#123;</span><br><span class="line">Name:    <span class="string">"haha"</span>,</span><br><span class="line">Age:     <span class="number">100</span>,</span><br><span class="line">Courses: []<span class="keyword">string</span>&#123;<span class="string">"haha"</span>, <span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Golang"</span>, <span class="string">"Java"</span>, <span class="string">"DBA"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">data, err := xml.Marshal(arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"xml.marshal failed, err : %v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply School</span><br><span class="line">err = xml.Unmarshal(data, &amp;reply)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"struct 类型\nXML序列化 string(data) =&gt; %s\nXML反序列化 reply =&gt; %v\n"</span>, <span class="keyword">string</span>(data), reply)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">XmlStruct()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言反射&quot;&gt;&lt;a href=&quot;#Go语言反射&quot; class=&quot;headerlink&quot; title=&quot;Go语言反射&quot;&gt;&lt;/a&gt;Go语言反射&lt;/h2&gt;
&lt;h3 id=&quot;反射获取&quot;&gt;&lt;a href=&quot;#反射获取&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（六）</title>
    <link href="https://www.kapyan.top/posts/353173330.html"/>
    <id>https://www.kapyan.top/posts/353173330.html</id>
    <published>2019-02-27T08:25:34.000Z</published>
    <updated>2019-02-28T06:53:33.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言接口"><a href="#Go语言接口" class="headerlink" title="Go语言接口"></a>Go语言接口</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>Go语言中的接口很特别，而且提供了难以置信的一系列灵活性或抽象性。它们指定一个特定类型的值和指针表现为特定的方式。从语言角度看，接口是一种类型，它指定一个方法集，所有方法为接口类型就被认为是该接口。<br>interface是一种类型，默认是一个指针。interface类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个空接口，空接口interface&#123;&#125;没有任何方法签名，也就意味着任何类型都实现了空接口。</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口，并赋值</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">interface</span>&#123;&#125; = <span class="string">"haha"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用interface定义一组方法，方法签名的集合</span></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">method1()<span class="comment">//无参数、无返回值</span></span><br><span class="line">method2(i <span class="keyword">int</span>)<span class="comment">//单参数、无返回值</span></span><br><span class="line">method3(x,y <span class="keyword">int</span>) <span class="comment">//多参数、无返回值</span></span><br><span class="line">method4() (i <span class="keyword">int</span>)<span class="comment">// 无参数、单返回值</span></span><br><span class="line">method5(x, y <span class="keyword">int</span>) (z <span class="keyword">int</span>, err error) <span class="comment">//多参数、多返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>Go语言类型断言语法为 value,ok := em.(T)如果确保em是同类型的时候可以直接使用value,ok :=  em.(T)，一般用于switch语句中。</p><blockquote>  <p>em：代表要判断的变量<br>T：代表被判断的类型<br>value：代表返回值<br>ok：代表是否为该类型<font color="red" size="2"><br>注意：要判断的变量必须为interface类型才可以进行类型断言。</font>  </p></blockquote><p>用switch做批量类型判断，不支持fallthrough。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d, %s"</span>, self.id, self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = &amp;User&#123;<span class="number">18</span>, <span class="string">"haha"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">        fmt.Println(<span class="string">"nil"</span>)</span><br><span class="line">    <span class="keyword">case</span> fmt.Stringer:</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span>:</span></span><br><span class="line"><span class="function">        <span class="title">fmt</span>.<span class="title">Println</span><span class="params">(v()</span>)</span></span><br><span class="line"><span class="function">    <span class="title">case</span> *<span class="title">User</span>:</span></span><br><span class="line">        fmt.Printf("%d, %s\n", v.id, v.name)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口规则"><a href="#接口规则" class="headerlink" title="接口规则"></a>接口规则</h3><p>接口是一个或多个方法签名的集合。任何类型的方法集中只要拥有该接口对应的全部方法签名。就表示它“实现”了该接口，无须在该类型上显式声明实现了哪个接口。对应方法，是指有相同名称、参数列表（不包括参数名）以及返回值，该类型也可以有其他方法。</p><h4 id="接口赋值"><a href="#接口赋值" class="headerlink" title="接口赋值"></a>接口赋值</h4><p>对象赋值给接口时，会发生拷贝，而接口内部存储的是指向这个复制品的指针，既无法修改复制品的状态，也无法获取指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    u := User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = u</span><br><span class="line"></span><br><span class="line">    u.id =<span class="number">20</span> </span><br><span class="line">    u.name = <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"u : %v\n"</span>,u)</span><br><span class="line">    fmt.Printf(<span class="string">"i.(User) : %v\n"</span>,i.(User))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接口转型返回临时对象，只有使用指针才能修改其状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> vi,pi <span class="keyword">interface</span>&#123;&#125; = u,&amp;u</span><br><span class="line"></span><br><span class="line">    <span class="comment">//vi.(User).name = "Golang"</span></span><br><span class="line">    pi.(*User).name = <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"vi.(User) : %v\n"</span>,vi.(User))</span><br><span class="line">    fmt.Printf(<span class="string">"pi.(*User) : %v\n"</span>,pi.(*User))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><p>只有当接口存储的类型和对象都为nil时，接口才等于nil。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    fmt.Printf(<span class="string">"i =&gt; %v\n"</span>,i)</span><br><span class="line">    fmt.Printf(<span class="string">"(i == nil) =&gt; %v\n"</span>,i == <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p *<span class="keyword">int</span> =<span class="literal">nil</span></span><br><span class="line">    <span class="comment">//i指向p，指向的对象是个nil，但是存在类型不是nil，是个指针</span></span><br><span class="line">    i = p</span><br><span class="line">    fmt.Printf(<span class="string">"i =&gt; %v\n"</span>,i)</span><br><span class="line">    fmt.Printf(<span class="string">"(i == nil =&gt; %v\n)"</span>,i == <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><p>接口只有方法声明，没有数据字段，没有实现，也不要显示的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现了这个接口。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetAge() <span class="keyword">int</span></span><br><span class="line">    GetName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user Info = User&#123;<span class="string">"haha"</span>,<span class="number">18</span>&#125;</span><br><span class="line">    age := user.GetAge()</span><br><span class="line">    name := user.GetName()</span><br><span class="line">    fmt.Println(age,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果一个变量含有了多个interface类型的方法，那么这个变量就实现了多个接口。<br>如果一个变量只含有了一个interface的部分方法，那么这个变量就没有实现这个接口。</p><h3 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h3><h4 id="接口嵌套"><a href="#接口嵌套" class="headerlink" title="接口嵌套"></a>接口嵌套</h4><p>接口可以匿名嵌入其他接口，或嵌入到结构中。如果一个interface1作为interface2的一个嵌入字段，那么interface2隐式的包含了interface1里面的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">interface</span> &#123;</span><br><span class="line">    Age</span><br><span class="line">    Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Age <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetAge() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Name <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">   age <span class="keyword">int</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    user := User&#123;<span class="string">"haha"</span>,<span class="number">18</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> u Info</span><br><span class="line">    u = user</span><br><span class="line">    age := u.GetAge()</span><br><span class="line">    name := u.GetName()</span><br><span class="line">    fmt.Println(age,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名接口可用作变量类型，或结构成员。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">struct</span> &#123;</span><br><span class="line">    u <span class="keyword">interface</span> &#123;</span><br><span class="line">        GetUser() <span class="keyword">string</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span> </span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">GetUser</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"user %d,%ds"</span>,self.id,self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := Info&#123;&amp;User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">    fmt.Println(t.u.GetUser())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="接口检查"><a href="#接口检查" class="headerlink" title="接口检查"></a>接口检查</h4><p>超集接口对象可转换为子集接口，反之出错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">    Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span> </span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d,%v"</span>,self.id, self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *User)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(self.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> o Printer = &amp;User&#123;<span class="number">18</span>,<span class="string">"haha"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s Stringer = o</span><br><span class="line">    fmt.Println(s.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口技巧"><a href="#接口技巧" class="headerlink" title="接口技巧"></a>接口技巧</h4><p>让编译器检查，以确保某个类型实现接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Data)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123; </span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d,%s"</span>,self.id,self.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _ fmt.Stringer = (*Data)(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某些时候，让函数直接“实现”接口能省不少事。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">type</span> Tester <span class="keyword">interface</span> &#123;</span><br><span class="line">    Do()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FuncDo <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(self FuncDo)</span> <span class="title">Do</span><span class="params">()</span></span> &#123;self() &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> t Tester = FuncDo(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="built_in">println</span>(<span class="string">"Hello,world"</span>)&#125;)</span><br><span class="line">    t.Do()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="并发介绍"><a href="#并发介绍" class="headerlink" title="并发介绍"></a>并发介绍</h3><p>Golang从语言层面就对并发提供了支持，而goroutine是Go语言并发设计的核心。<br>Go语言的并发机制运用起来非常舒适，在启动并发的方式上直接添加了语言级的关键字就可以实现，和其他编程语言相比更加轻量。</p><h4 id="进程-amp-线程"><a href="#进程-amp-线程" class="headerlink" title="进程&amp;线程"></a>进程&amp;线程</h4><ol>  <li>进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。</li>  <li>线程是进程的一个执行实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</li>  <li>一个进程可以创建和撤销多个线程，同一个进程中的多个线程之间可以并发执行。</li></ol><h4 id="并发-amp-并行"><a href="#并发-amp-并行" class="headerlink" title="并发&amp;并行"></a>并发&amp;并行</h4><ol>  <li>多线程程序在一个核的cpu上运行，就是并发。</li>  <li>多线程程序在多个核的cpu上运行，就是并行。</li></ol><blockquote>  <p>并发不是并行：<br>并发主要由切换时间片来实现“同时”运行，并行则是直接利用多核实现多线程的运行，Go程序可以设置使用核数，以发挥多核计算机的能力。</p></blockquote><h4 id="协程-amp-线程"><a href="#协程-amp-线程" class="headerlink" title="协程&amp;线程"></a>协程&amp;线程</h4><p>协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。<br>线程：一个线程上可以跑多个协程，协程是轻量级的线程。</p><h4 id="Goroutine介绍"><a href="#Goroutine介绍" class="headerlink" title="Goroutine介绍"></a>Goroutine介绍</h4><p>goroutine只是由官方实现的超级“线程池”。每个实例4~5KB的栈内存占用和由于实现机制而大幅减少的创建和销毁开销是Go语言高并发的根本原因。<br>goroutine奉行通过通信来共享内存，而不是共享内存来通信。只需在函数调用语句前添加go关键字，就可创建并发执行单元。开发人员无需了解任何执行细节，调度器会自动将其安排到合适的系统线程上执行。goroutine是一种非常轻量级的实现，可在单个进程里执行成千上万的并发任务。<br>事实上，入口函数main就以goroutine运行。另有与之配套的channel类型，用以实现“以通讯来共享内存”的CSP模式。</p><h4 id="编写第一个Goroutine"><a href="#编写第一个Goroutine" class="headerlink" title="编写第一个Goroutine"></a>编写第一个Goroutine</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (<span class="string">"fmt"</span></span><br><span class="line">        <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">"hello world"</span>) </span><br><span class="line">    &#125;()</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote>  <p>进入main函数开启一个goroutine运行匿名函数体内容，主线程执行等待1秒。goroutine执行完毕回到主线程，主线程的sleep完成结束程序。（注意：若去掉time.Sleep(1    * time.Second)代码，进入main函数开启一个goroutine，没等goroutine运行匿名函数函数体内容，主线程已经完成结束程序）</p></blockquote><h3 id="Chan应用"><a href="#Chan应用" class="headerlink" title="Chan应用"></a>Chan应用</h3><p>channel是CSP模式的具体实现，用于多个goroutine通讯。其内部实现了同步，确保并发安全。<br>channel是先进先出，线程安全的，多个goroutine同时访问，不需要加锁。</p><h4 id="chan阻塞"><a href="#chan阻塞" class="headerlink" title="chan阻塞"></a>chan阻塞</h4><p>我们定义的管道intChan容量是5，开启goroutine写入10条数据，在写满5条数据时会阻塞，而read()每秒会从intChan中读取一条，然后write()再会写一条数据。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        ch &lt;- i</span><br><span class="line">        fmt.Println(<span class="string">"write data :"</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        i := &lt;-ch</span><br><span class="line">        fmt.Println(<span class="string">"read data:"</span>,i)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">go</span> write(intChan)</span><br><span class="line">    <span class="keyword">go</span> read(intChan)</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h4><p>默认为同步，需要发送和接收配对，否则会被阻塞，直到另一方准备好后被唤醒。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">//数据交换队列</span></span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)     <span class="comment">//退出通知</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> d := <span class="keyword">range</span> data &#123; <span class="comment">//从队列迭代接收数据，直到close</span></span><br><span class="line">            fmt.Println(d)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="string">"received over."</span>)</span><br><span class="line">        exit &lt;- <span class="literal">true</span>    <span class="comment">//发出退出通知</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    data &lt;- <span class="string">"haha"</span></span><br><span class="line">    data &lt;- <span class="string">"linux"</span></span><br><span class="line">    data &lt;- <span class="string">"golang"</span></span><br><span class="line">    data &lt;- <span class="string">"python"</span></span><br><span class="line">    <span class="built_in">close</span>(data) <span class="comment">//关闭队列</span></span><br><span class="line">    fmt.Println(<span class="string">"send over."</span>)</span><br><span class="line">    &lt;-exit <span class="comment">//等待退出通知</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h4><p>异步方式通过判断缓冲区来决定是否阻塞。如果缓冲区已满，发送被阻塞；缓冲区为空，接收被阻塞。<br>通常情况下，异步channel可减少排队阻塞，具备更高的效率。但应该考虑使用指针规避大对象拷贝，将多个元素打包，减少缓冲区大小。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>) <span class="comment">// 缓冲区可以存储 3 个元素</span></span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    data &lt;- <span class="string">"haha"</span> <span class="comment">// 在缓冲区未满前，不会阻塞。</span></span><br><span class="line">    data &lt;- <span class="string">"Linux"</span></span><br><span class="line">    data &lt;- <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> d := <span class="keyword">range</span> data &#123; <span class="comment">// 在缓冲区未空前，不会阻塞。</span></span><br><span class="line">            fmt.Println(d)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        exit &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    data &lt;- <span class="string">"Java"</span> <span class="comment">// 如果缓冲区已满，阻塞。</span></span><br><span class="line">    data &lt;- <span class="string">"DBA"</span></span><br><span class="line">    <span class="built_in">close</span>(data)</span><br><span class="line"></span><br><span class="line">    &lt;-exit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="chan选择"><a href="#chan选择" class="headerlink" title="chan选择"></a>chan选择</h4><p>如果需要同时处理多个channel，可使用select语句。它随机选择一个可用channel做收发操作，或执行default case。<br>用select实现超时控制<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">2</span>)</span><br><span class="line">    strChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> vi := &lt;-intChan:</span><br><span class="line">                fmt.Println(vi)</span><br><span class="line">            <span class="keyword">case</span> vs := &lt;-strChan:</span><br><span class="line">                fmt.Println(vs)</span><br><span class="line">            <span class="keyword">case</span> &lt;- time.After(time.Second * <span class="number">3</span>):</span><br><span class="line">                fmt.Println(<span class="string">"timeout."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        exit &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// intChan &lt;- 100 //注释掉，引发timeout</span></span><br><span class="line">    <span class="comment">// strChan &lt;-  "haha"</span></span><br><span class="line">    &lt;-exit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意：在循环中使用select default case需要小心，避免形成洪水。</font><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>用简单工厂模式打包并发任务和channel<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTest</span><span class="params">()</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        c &lt;- rand.Int()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := NewTest()</span><br><span class="line">    fmt.Println(&lt;-t) <span class="comment">// 等待 goroutine 结束返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><p>WaitGroup能够一直等到所有的goroutine执行完成，并且阻塞主线程的执行，直到所有的goroutine执行完成。<br>WaitGroup总共有三个方法：Add(delta  int),Done(),Wait()。</p><blockquote>  <p>Add：添加或减少等待goroutine的数量；<br>Done：相当于Add(-1);<br>Wait:执行阻塞，直到所有的WaitGroup数量变成0。</p></blockquote><p>WaitGroup用于线程同步，WaitGroup等待一组线程集合完成，才会继续向下执行。主线程（goroutine）调用Add来设置等待的线程（goroutine）数量。然后每个线程（goroutine）运行，并在完成后调用Done。同时，Wait用来阻塞，直到所有线程（goroutine）完成才会向下执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">//defer wg.Done()</span></span><br><span class="line">            <span class="keyword">defer</span> wg.Add(<span class="number">-1</span>)</span><br><span class="line">            EchoNum(n)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EchoNum</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序中将每次循环的数量 sleep 1  秒钟后输出。如果程序不使用WaitGroup，将不会输出结果。因为goroutine还没执行完，主线程已经执行完毕（注掉的 defer wg.Done()  和 defer wg.Add(-1) 作用一样）。</p><h4 id="WaitGroup陷阱"><a href="#WaitGroup陷阱" class="headerlink" title="WaitGroup陷阱"></a>WaitGroup陷阱</h4><ol>  <li>add数量小于done数量导致WaitGroup为负数</li>  <li>add数量大于done数量造成deadlock</li>  <li>跳过add和done操作，直接执行wait</li>  <li>WaitGroup拷贝传值问题</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg sync.WaitGroup, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"i=&gt;%d\n"</span>, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(wg, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行错误：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure></p><p>wg 给拷贝传递到了 goroutine 中，导致只有 Add 操作，其实 Done操作是在 wg 的副本执行的，因此 Wait 就死锁了。<br>正确代码：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    <span class="comment">// wg := &amp;sync.WaitGroup&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg *sync.WaitGroup, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"i=&gt;%d\n"</span>, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(wg, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>runtime包提供Go语言运行时的系统交互操作，例如控制goroutine的功能。<br>调度器不能保证多个goroutine执行次序，且进程退出时不会等待他们结束。<br>默认情况下，进程启动后仅允许一个系统线程服务于goroutine。可使用环境变量或标准库函数runtime.GOMAXPROCS修改，让调度器用于多个线程实现多核并行，而不仅仅是并发。<br>runtime包常用方法<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> GOOS <span class="keyword">string</span> = theGoos</span><br></pre></td></tr></table></figure></p><p>GOOS是可执行程序的目标操作系统（将要在该操作系统的机器上执行）：darwin、freebsd、linux等。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Gosched</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>Gosched使当前goroutine放弃处理器，以让其他goroutine运行。它不会挂起当前go程，因此当前goroutine未来会恢复执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NumCPU</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>NumCPU返回本地机器的逻辑CPU个数<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GOROOT</span><span class="params">()</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>GOROOT返回go的根目录。如果存在GOROOT环境变量，返回该变量的值；否则，返回创建go时的根目录。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GOMAXPROCS</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>GOMAXPROCS设置可同时执行的最大CPU数，并返回先前的设置。 若 n &lt; 1，它就不会更改当前设置。本地机器的逻辑CPU数可通过  NumCPU 查询。本函数在调度程序优化后会去掉。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Goexit</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>Goexit终止调用它的goroutine。其他goroutine不会受影响。Goexit会在终止该goroutine前执行所有defer的函数。<br>在程序的main  goroutine调用本函数，会终结该goroutine，而不会让main返回。因为main函数没有返回，程序会继续执行其它goroutine。如果所有其他goroutine都退出了，程序就会崩溃。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NumGoroutine</span><span class="params">()</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p>NumGoroutine返回当前存在的Goroutine数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言接口&quot;&gt;&lt;a href=&quot;#Go语言接口&quot; class=&quot;headerlink&quot; title=&quot;Go语言接口&quot;&gt;&lt;/a&gt;Go语言接口&lt;/h2&gt;
&lt;h3 id=&quot;接口定义&quot;&gt;&lt;a href=&quot;#接口定义&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（五）</title>
    <link href="https://www.kapyan.top/posts/1879225483.html"/>
    <id>https://www.kapyan.top/posts/1879225483.html</id>
    <published>2019-02-25T02:30:30.000Z</published>
    <updated>2019-02-26T09:29:21.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言流程控制"><a href="#Go语言流程控制" class="headerlink" title="Go语言流程控制"></a>Go语言流程控制</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否为true来决定是否执行指定语句，并在条件为false的情况下执行另外的语句。</p><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>if语句由一个布尔表达式后紧跟一个或多个语句组成。if 在布尔表达式为 true 时，其后紧跟的语句块执行，如果为 false 则不执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接判断bool类型</span></span><br><span class="line">b := <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> b &#123;</span><br><span class="line">fmt.Println(<span class="string">"b := true"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式中判断bool类型</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> str == <span class="string">""</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">`str == ""`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过&amp;&amp;逻辑与、||逻辑或、！逻辑非，判断bool类型</span></span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span> &amp;&amp; a &lt; b &#123;</span><br><span class="line">fmt.Println(<span class="string">"a &gt; 0 &amp;&amp; a &lt; b"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">10</span> || b == <span class="number">20</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"a &lt; 10 || b == 20"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !(a == b) &#123;</span><br><span class="line">    fmt.Println(<span class="string">"!(a == b)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式中先变量后判断bool类型</span></span><br><span class="line"><span class="keyword">if</span> age ：= <span class="number">18</span>;age == <span class="number">18</span> &#123; </span><br><span class="line">fmt.Println(<span class="string">"age == 18"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h4><p>if语句后可以使用可选的else语句，else语句中的表达式在布尔表达式为false时执行。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i&lt;10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i=10"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i&gt;10"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="if嵌套语句"><a href="#if嵌套语句" class="headerlink" title="if嵌套语句"></a>if嵌套语句</h4><p>可以在if或else if语句中嵌入一个或多个if或else if 语句。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">"haha"</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"haha"</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> age == <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"haha"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="switch条件语句"><a href="#switch条件语句" class="headerlink" title="switch条件语句"></a>switch条件语句</h3><p>switch语句用于基于不同条件执行不同动作。每一个case分支都是唯一的，所有case分支的参数必须是相同的类型，语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加上break，默认自动终止。</p><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接判断</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span> </span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带初始化语句</span></span><br><span class="line">names := []<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Golang"</span>, <span class="string">"Jav"</span>Python<span class="string">"&#125;</span></span><br><span class="line"><span class="string">switch name := names[0]; name &#123;</span></span><br><span class="line"><span class="string">case "</span>Golang<span class="string">":</span></span><br><span class="line"><span class="string">    fmt.Println("</span>Golang<span class="string">")</span></span><br><span class="line"><span class="string">case "</span>Java<span class="string">":</span></span><br><span class="line"><span class="string">    fmt.Println("</span>Java<span class="string">")</span></span><br><span class="line"><span class="string">case "</span>Python<span class="string">":</span></span><br><span class="line"><span class="string">    fmt.Println("</span>Python<span class="string">")</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">    fmt.Println("</span>haha<span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//一个case多个可能符合条件的值</span></span><br><span class="line"><span class="string">var i = 1</span></span><br><span class="line"><span class="string">switch i &#123;</span></span><br><span class="line"><span class="string">case 0,1:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="number">0</span> or <span class="number">1</span><span class="string">")</span></span><br><span class="line"><span class="string">case 2:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="number">2</span><span class="string">")</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="keyword">default</span><span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//省略条件表达式应用</span></span><br><span class="line"><span class="string">var i = 10</span></span><br><span class="line"><span class="string">switch &#123;</span></span><br><span class="line"><span class="string">case i &gt;=0 &amp;&amp; i &lt; 10:</span></span><br><span class="line"><span class="string">fmt.Println("</span>i &gt; <span class="number">0</span> and i &lt; <span class="number">10</span><span class="string">")</span></span><br><span class="line"><span class="string">case i &gt;=10 &amp;&amp; i &lt; 20:</span></span><br><span class="line"><span class="string">fmt.Println("</span>i &gt;<span class="number">10</span> and i &lt; <span class="number">20</span><span class="string">")</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="keyword">default</span><span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*fallthrough应用</span></span><br><span class="line"><span class="string">Go语言switch语句的每个case最后默认带有break,成功后不会自动向下执行其他case，而是跳出整个switch。</span></span><br><span class="line"><span class="string">可以使用fallthrough语句强制执行后面的case代码。*/</span></span><br><span class="line"><span class="string">var i = 0</span></span><br><span class="line"><span class="string">switch i &#123;</span></span><br><span class="line"><span class="string">case 0:</span></span><br><span class="line"><span class="string">fmt.Println("</span><span class="keyword">fallthrough</span><span class="string">")</span></span><br><span class="line"><span class="string">fallthrough</span></span><br><span class="line"><span class="string">case 1:</span></span><br><span class="line"><span class="string">fmt.Println(1)//此行代码被强制执行</span></span><br><span class="line"><span class="string">case 2:</span></span><br><span class="line"><span class="string">fmt.Println(2)</span></span><br><span class="line"><span class="string">default:</span></span><br><span class="line"><span class="string">fmt.Println("</span>defalut<span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h3><p>select是Go中的一个控制结构，类似于通信的switch语句。每个case必须是一个通信操作，要么是发送要么是接收。<br>select随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。一个默认的子句应该总是可运行的。<br>语法如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意数量的 case */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <ol>    <li>每个case都必须是一个通信</li>    <li>所有channels表达式都被会求值</li>    <li>所有被发送的表达式都被求值</li>    <li>如果任意某个通信可以进行，他就执行，其它被忽略</li>    <li>如果有多个case都可以运行，select会随机公平地选出一个执行。其它不会被执行。否则：如果有default子句，则执行该语句；如果没有default字句，select将阻塞，直到某个通信可以运行；Go不会重新对channel或值进行求值。</li>  </ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> c1, c2, c3 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">var</span> i1, i2 <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> i1 = &lt;-c1:</span><br><span class="line">         fmt.Printf(<span class="string">"received "</span>, i1, <span class="string">" from c1\n"</span>)</span><br><span class="line">      <span class="keyword">case</span> c2 &lt;- i2:</span><br><span class="line">         fmt.Printf(<span class="string">"sent "</span>, i2, <span class="string">" to c2\n"</span>)</span><br><span class="line">      <span class="keyword">case</span> i3, ok := (&lt;-c3):  <span class="comment">// same as: i3, ok := &lt;-c3</span></span><br><span class="line">         <span class="keyword">if</span> ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"received "</span>, i3, <span class="string">" from c3\n"</span>)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"c3 is closed\n"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">"no communication\n"</span>)</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>for循环是一个循环控制结构，可以执行指定次数的循环。<br>三种循环方式：</p><ol>  <li>常见的for循环，支持初始化语句    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>init:一般为赋值表达式，给控制变量赋初值；<br>condition：关系表达式或逻辑表达式，循环控制条件；<br>post：一般为复制表达式，给控制变量增量或减量。<br>for语句执行过程如下：<br>①    先对表达式init赋初值<br>②    判别赋值表达式init是否满足给定condition条件，若其值为真，满足循环条件则执行循环体内语句，然后执行post，进入第二次循环，再判别condition；否则判断condition值为假，不满足条件就终止for循环，执行循环体外语句。</p></blockquote><ol start="2">  <li>    <p>关系表达式或逻辑表达式控制循环</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> condition &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">5</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i == <span class="number">5</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>无限循环</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h3 id="range循环语句"><a href="#range循环语句" class="headerlink" title="range循环语句"></a>range循环语句</h3><p>Go语言中range关键字用于for循环中迭代数组（array）、切片（slice）、通道（channel）或者集合（map）的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回key-value对应的key值。</p><h4 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"linux系统"</span></span><br><span class="line"><span class="keyword">for</span> k,v := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Println(k,<span class="keyword">string</span>(v))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol>  <li>for range英文字符串，key值按照+1顺序递增</li>  <li>for range包含中文字的字符串，英文字符key值按照+1顺序递增，中文字符key值按照+3顺序递增</li></ol><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><ol>  <li>    <p>for range数组程序会复制对象，key、value都是从复制品中取出</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>], arr[<span class="number">1</span>] = <span class="number">1000</span>, <span class="number">1000</span></span><br><span class="line">        fmt.Println(<span class="string">"修改原数组："</span>, arr)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 使用复制品中取出的 value 修改原数组</span></span><br><span class="line">    arr[k] = v + <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>多维数组遍历</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k1, v1 := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="keyword">for</span> k2, v2 := <span class="keyword">range</span> v1 &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%d*%d=%d "</span>, k1+<span class="number">1</span>, k2+<span class="number">1</span>, v2)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>数组遍历值拷贝行为会造成性能问题，建议数组遍历使用饮用型slice，或数组指针。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">arrP := &amp;arr</span><br><span class="line"><span class="keyword">for</span> k, _ := <span class="keyword">range</span> arrP &#123;</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">        arrP[<span class="number">0</span>], arrP[<span class="number">1</span>] = <span class="number">1000</span>, <span class="number">1000</span></span><br><span class="line">        fmt.Println(<span class="string">"修改原数组："</span>, arr)</span><br><span class="line"> &#125; </span><br><span class="line">    arrP[k] += <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure>  </li></ol><h4 id="slice遍历"><a href="#slice遍历" class="headerlink" title="slice遍历"></a>slice遍历</h4><p>将所需数据copy到较小的slice，以便释放底层数组内存<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">slice := arr[:]</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"key: %v , value : %v\n"</span>, key,value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h4><p>map遍历不能保证迭代返回次序，通常是随机结果，具体和版本实现有关。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">"Linux"</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">"Golang"</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">"Python"</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">"Java"</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">"DBA"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d =&gt; %s \n"</span>, k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="channel遍历"><a href="#channel遍历" class="headerlink" title="channel遍历"></a>channel遍历</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>;i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red" size="2">注意：如果没有close()，因为存入管道10个数字，然后无限取数据，再取出来第10个数据，再次range管道，会dead  lock。</font><br>### 循环控制语句<br>循环控制语句可以控制循环体内语句的执行过程。<br>Go语言支持goto、break、continue三种循环控制语句，三个语句都可以配合标签（label）使用，标签名区分大小写，定义后不使用会造成编译错误。<br>####goto语句<br>Go语言支持在函数内goto跳转，goto语句可以无条件地转移到过程中指定的行，通常与条件语句配合使用。可用来实现条件转移、构成循环、跳出循环体等功能。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义标签后定义goto语句</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">GO:</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">20</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">15</span> &#123;<span class="comment">//跳过迭代</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">goto</span> GO</span><br><span class="line">&#125;</span><br><span class="line">fmt .Printf(<span class="string">"i的值为：%d\n"</span>,i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先定义goto语句后定义标签</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">goto</span> haha</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">haha:</span><br><span class="line">    fmt.Println(<span class="string">"golang"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><font color="red" size="2">注意：goto语句与标签之间不能有变量声明，否则编译错误。</font><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><ol>  <li>break语句中断当前for循环，并开始执行循环之后的语句</li>  <li>break语句中断当前for range循环，并开始执行循环之后的语句</li>  <li>break语句在执行一条case后跳出switch循环</li>  <li>break语句在执行一条case后跳出select循环</li>  <li>break label语句跳出多层嵌套循环，break标签除了可以跳出for循环，还可以跳出select、switch循环<font color="red" size="2">（注意：label要写在循环的开始而不是结束的地方，和goto语句不一样）</font>  </li></ol><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><ol>  <li>continue语句在for循环和for range循环中用于跳过当前循环的剩余语句，然后继续进行下一轮循环。</li>  <li>continue label语句可在多级嵌套循环中跳出。</li></ol><h2 id="Go语言函数"><a href="#Go语言函数" class="headerlink" title="Go语言函数"></a>Go语言函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><h4 id="Go语言函数特点"><a href="#Go语言函数特点" class="headerlink" title="Go语言函数特点"></a>Go语言函数特点</h4><ol>  <li>关键字func用来声明一个函数名；</li>  <li>函数可以有一个或多个参数，每个参数后面带有类型，通过逗号“,”分隔；</li>  <li>函数可以返回多个值；</li>  <li>返回值可以使用声明变量，如果不想声明也可以直接使用返回值的类型；</li>  <li>如果只有一个返回值且不声明返回值变量，那么可以省略包括返回值的括号；</li>  <li>如果没有返回值，可以直接省略最后的返回信息；</li>  <li>如果有返回值，必须在函数的外层添加return语句，否则会引发编译错误；</li>  <li>函数也是一种类型，一个函数可以赋值给变量，可作为参数传递；</li>  <li>函数不支持嵌套，一个包不能有两个名字一样的函数。不支持重载，不支持默认参数    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无参数、无返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个参数、无返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(st <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义多个参数的函数，一个返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">haha</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(ret <span class="keyword">string</span>,err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> str == <span class="string">"go"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>,errors.New(<span class="string">"error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值只有类型，无变量声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">haha</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>,error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> str == <span class="string">"go"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"OK"</span>,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>,errors.New(<span class="string">"error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个五参数、无返回值的函数类型</span></span><br><span class="line"><span class="keyword">type</span> funcType <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义一个参数，无返回值的函数类型</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">funcType</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义多个参数的函数，一个返回值的函数类型</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">funcType</span> <span class="title">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">init</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//定义一个多返回值的函数类型</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">funcType</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>,error)</span></span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>实际参数简称“实参”。在调用有参数时，函数名后面括号中的参数称为“实际参数”，实参可以是常量、变量或表达式。<br>自定义函数中的“形参”全称为“形式参数”，由于它不是实际存在变量，所以又称虚拟变量。实参和形参可以重名。形参的作用域是整个函数体，就像定义在函数体内的局部变量。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><ol>  <li>    <p>值传递：指在调用函数时将实际参数复制一份到传递函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> y <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 值传递</span></span><br><span class="line">    z := sum(x, y)</span><br><span class="line">    fmt.Println(z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>引用传递：是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行修改，将影响到实际参数。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y *<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> temp <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    temp = *x</span><br><span class="line">    *x = *y</span><br><span class="line">    *y = temp</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> course1, course2 <span class="keyword">string</span> = <span class="string">"Python"</span>, <span class="string">"Golang"</span></span><br><span class="line"></span><br><span class="line">    swap(&amp;course1, &amp;course2)</span><br><span class="line"></span><br><span class="line">    fmt.Println(course1, course2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>固定类型可变参数：就是函数的参数不是固定的，后面的类型是固定的。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable</span><span class="params">(name <span class="keyword">string</span>, course ...<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"可变参数的长度:"</span>, <span class="built_in">len</span>(course))</span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> course &#123;</span><br><span class="line">        fmt.Println(name, val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    variable(linux<span class="string">", "</span>golang<span class="string">", "</span>python<span class="string">", "</span>java<span class="string">")</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>  </li>  <li>    <p>任意类型的不定参数：就是函数的参数和每个参数的类型都不是固定的。形参用interface{}传递任意类型数据。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable</span><span class="params">(values ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> values &#123;</span><br><span class="line">        <span class="keyword">switch</span> v := val.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is int "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is float "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is string "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is bool "</span>, v)</span><br><span class="line">        <span class="keyword">case</span> Person:</span><br><span class="line">            fmt.Println(<span class="string">"val type is Person "</span>, v.name)</span><br><span class="line">        <span class="keyword">case</span> *Person:</span><br><span class="line">            fmt.Println(<span class="string">"val type is *Person "</span>, v.name)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"val type is unknow "</span>, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    temp_int := <span class="number">1</span></span><br><span class="line">    temp_float := <span class="number">5.6</span></span><br><span class="line">    temp_string := <span class="string">"hello"</span></span><br><span class="line">    temp_bool := <span class="literal">true</span></span><br><span class="line">    temp_person1 := &amp;Person&#123;name: <span class="string">"jack"</span>&#125;</span><br><span class="line">    temp_person2 := Person&#123;name: <span class="string">"rose"</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> temp_float32 <span class="keyword">float32</span> = <span class="number">6.6</span></span><br><span class="line"></span><br><span class="line">    variable(temp_int, temp_float, temp_string, temp_bool, temp_person1, temp_person2, temp_float32)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>函数类型参数：就是函数类型赋值给变量，作为参数传递应用。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数类型</span></span><br><span class="line"><span class="keyword">type</span> myfunc <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">addperfix</span><span class="params">(perfix, name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(perfix, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数用匿名函数当参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhello</span><span class="params">(name <span class="keyword">string</span>, f myfunc)</span></span> &#123;</span><br><span class="line">    f(<span class="string">"hello"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sayhello(<span class="string">"haha"</span>, addperfix)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>注意：</p>  <ol>    <li>Go语言函数中的参数不支持默认值。</li>    <li>无论是值传递，还是引用传递，传递给函数的都是变量的副本，不过，值传递是值的拷贝。引用传递是地址的拷贝，一般来说，地址拷贝更为高效。而值拷贝取决于拷贝的对象大小，对象越大，则性能越低。</li>    <li>map、slice、chan、指针、interface默认以引用的方式传递。</li>    <li>函数的可变参数只能有一个，且必须是最后一个。</li>    <li>在参数赋值时可以不用一个个赋值，可以直接传递一个数组或者切片，特别注意的在参数后加上“…”即可。</li>  </ol></blockquote><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><h4 id="返回值定义"><a href="#返回值定义" class="headerlink" title="返回值定义"></a>返回值定义</h4><p>返回值通过使用返回语句返回。可以返回任意类型。返回语句会立即中止函数的运行，并且将控制权交回调用该函数的代码行。<br>Go语言函数可以有零个或多个返回值，可以返回多个不同类型的结果。当函数有返回值时return语句必须要写，否则编译器会报错。<br>Go语言在定义函数返回值可以被命名，命名返回值的作用域是整个函数体，就像定义在函数体内的局部变量。在return语句中，无需显示的返回这些值，Go会自动将其返回。</p><h4 id="巧用return"><a href="#巧用return" class="headerlink" title="巧用return"></a>巧用return</h4><ol>  <li>    <p>无返回值函数，在内部任何程序执行片段return，直接会跳出该函数，return下面的程序片段都不会再执行。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">10</span>; i &lt; <span class="number">100</span>;i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,i)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">11</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>有返回值函数，在内部任何程序执行片段使用return，它下面的程序片段都不会再执行，但是程序结尾必须以return结束，否则程序报错。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pacakage main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">10</span> ;i &lt; <span class="number">100</span>; i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,i)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">11</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_ = test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数是指不需要定义函数名的一种函数实现方式。1958年LISP首先采用匿名函数。<br>在Go里面，函数可以像普通变量一样被传递或使用，Go语言支持随时在代码里定义匿名函数。<br>匿名函数由一个不带函数名的函数声明和函数体组成。匿名函数的优越性在于可以直接使用函数内的变量，不必声明。</p><h4 id="匿名函数定义"><a href="#匿名函数定义" class="headerlink" title="匿名函数定义"></a>匿名函数定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先声明一个函数类型的变量，然后定义一个匿名函数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sum <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="title">sum</span> = <span class="title">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用更简略的“:=”方式定义一个匿名函数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">product := <span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(product(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名函数应用"><a href="#匿名函数应用" class="headerlink" title="匿名函数应用"></a>匿名函数应用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数的变量为函数地址</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"sum -&gt; %v sum(1,3) =%v\n"</span>,sum,sum(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接创建匿名函数执行并返回结果</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">product := <span class="function"><span class="keyword">func</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y</span><br><span class="line">&#125;(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"product = % d\n"</span>,product)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>递归，就是在运行的过程中调用自己。一个函数调用自己，就叫做递归函数。<br>构成递归需具备的条件：</p><ol>  <li>子问题须与原始问题为同样的是事，且更为简单。</li>  <li>不能无限制地调用本身，须有个出口，化简为非递归状况处理。</li></ol><p>Go编程语言支持递归，即函数调用函数本身。在使用递归时，需要谨慎确定函数的退出条件，否则会造成无限循环。<br>递归函数可以解决许多数学问题如计算给定数字阶乘、产生斐波那契数列等。</p><h3 id="延迟调用"><a href="#延迟调用" class="headerlink" title="延迟调用"></a>延迟调用</h3><p>defer是Go语言提供的关键字，用来调度一个函数（被延期的函数），使其在执行defer的函数即将返回之前才运行被延期执行的函数，它的参数（包括接受者）在defer执行的时候被求值，而不是在调用执行的时候  。也就是说被延期执行的函数的参数是按照正常顺序被求值的。<br>defer常用来释放资源，如果有多个defer表达式，调用顺序类似于栈，越后面的defer表达式越先被调用。defer函数调用的执行时机是外层函数设置返回值后，并在即将返回之前。</p><h4 id="defer应用"><a href="#defer应用" class="headerlink" title="defer应用"></a>defer应用</h4><ol>  <li>    <p>当defer被声明时，参数被实时解析</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="params">(str <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">str = <span class="string">"haha"</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">"defer : %s\n"</span>,str)</span><br><span class="line">str = <span class="string">"哈哈"</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>deferz执行顺序为先进后出</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i&lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">"defer%d\n"</span>,i)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>defer可以读取有名返回值</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; i += <span class="number">100</span>&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := test()</span><br><span class="line">fmt.Println(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>需要明确的是defer代码块的作用域仍然在函数之内。defer的作用域仍然在test()函数之内，因此可以读取test()函数内的变量。</p></blockquote><h2 id="Go语言方法"><a href="#Go语言方法" class="headerlink" title="Go语言方法"></a>Go语言方法</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p>在Go语言中有一个概念和函数极其相似叫做方法。Go语言的方法其实是作用在接收者（receiver）上的一个函数，接收者是某种非内置类型的变量。因此，方法是一种特殊类型的函数。<br>接收者类型可以是（几乎）任何类型，不仅仅是结构体类型，任何类型都可以有方法，甚至可以是函数类型，可以是int、bool、string或数组的别名类型。但是接收者不能是接口类型。<br>方法的声明和普通函数的声明类似，只是在函数名称前面多了一个参数，这个参数把这个方法绑定到这个参数对应的类型上。<br><strong>方法定义</strong><br>首先声明一个自定义类型Test<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>方法参数receiver类型可以是Test或*Test。类型Test不能是接口或指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个无参数、无返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个单参数、无返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多参数、无返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个无参数、单返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个多参数、多返回值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Test)</span> <span class="title">method</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="params">(z <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="方法和函数的关系"><a href="#方法和函数的关系" class="headerlink" title="方法和函数的关系"></a>方法和函数的关系</h4><p>方法是特殊的函数，定义在某一特定的类型上，通过类型的实例来进行调用，这个实例被叫接收者。<br>接受者必须有一个显式的名字，这个名字必须在方法中被使用。接受者类型必须在和方法同样的包中被声明。</p><p>  <font color="red" size="2">注意：Go语言不允许为简单的内置类型添加方法</font></p><h4 id="方法与函数的区别"><a href="#方法与函数的区别" class="headerlink" title="方法与函数的区别"></a>方法与函数的区别</h4><ol>  <li>对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然。</li>  <li>对于方法（如struct的方法），接收者为值类型时，可以直接用指针类型的变量调用方法，反之亦然。</li></ol><h3 id="方法规则"><a href="#方法规则" class="headerlink" title="方法规则"></a>方法规则</h3><p>根据调用者不同，方法分为两种表现形式：方法（method value）、方法表达式（method expression）。<br>两者都可像普通函数那样赋值和传参，区别在于方法（method  value）绑定了实例，而方法表达式（method expression）必须显式传参。</p><h4 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h4><p>直接调用，类型T和*T上的方法集是互相继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为*T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1 := T&#123;<span class="number">1</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"t1 is :%v\n"</span>,t1)</span><br><span class="line">t1.testT()</span><br><span class="line">t1.testP()</span><br><span class="line"></span><br><span class="line">t2 := &amp;t1</span><br><span class="line">fmt.Printf(<span class="string">"t2 is : %v\n"</span>, t2)</span><br><span class="line">t2.testT()</span><br><span class="line">t2.testP()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接调用，类型S包含匿名字段*T或T,则S和*S方法包含T和*T上的方法集是互相继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ST <span class="keyword">struct</span> &#123;</span><br><span class="line">    T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SP <span class="keyword">struct</span> &#123;</span><br><span class="line">    *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 *T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    st1 := ST&#123;T&#123;<span class="number">1</span>&#125;&#125;</span><br><span class="line">    st2 := &amp;st1</span><br><span class="line">    fmt.Printf(<span class="string">"st1 is : %v\n"</span>, st1)</span><br><span class="line">    st1.testT()</span><br><span class="line">    st1.testP()</span><br><span class="line">    fmt.Printf(<span class="string">"st2 is : %v\n"</span>, st2)</span><br><span class="line">    st2.testT()</span><br><span class="line">    st2.testP()</span><br><span class="line"></span><br><span class="line">    sp1 := SP&#123;&amp;T&#123;<span class="number">1</span>&#125;&#125;</span><br><span class="line">    sp2 := &amp;sp1</span><br><span class="line">    fmt.Printf(<span class="string">"sp1 is : %v\n"</span>, sp1)</span><br><span class="line">    sp1.testT()</span><br><span class="line">    sp1.testP()</span><br><span class="line">    fmt.Printf(<span class="string">"sp2 is : %v\n"</span>, sp2)</span><br><span class="line">    sp2.testT()</span><br><span class="line">    sp2.testP()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="隐式传递调用"><a href="#隐式传递调用" class="headerlink" title="隐式传递调用"></a>隐式传递调用</h4><p>接收者隐式传递，类型T和*上的方法是相互继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"接收者为*T"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := T&#123;<span class="string">"haha"</span>&#125;</span><br><span class="line">methodValue1 := t.testT</span><br><span class="line">methodValue1()</span><br><span class="line">methodValue2 := (&amp;t).testT</span><br><span class="line">methodValue2()</span><br><span class="line">methodValue3 := t.testP</span><br><span class="line">methodValue3()</span><br><span class="line">methodValue4 := (&amp;t).testP</span><br><span class="line">methodValue4()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接收者隐式传递，类型S包含匿名字段*T或T,则S和*S方法集包含T和*T上的方法集是互相继承的。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ST <span class="keyword">struct</span> &#123;</span><br><span class="line">    T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SP <span class="keyword">struct</span> &#123;</span><br><span class="line">    *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 *T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    st1 := ST&#123;T&#123;<span class="string">"hahha"</span>&#125;&#125;</span><br><span class="line">    methodValue1 := st1.testT</span><br><span class="line">    methodValue1()</span><br><span class="line">    methodValue2 := (&amp;st1).testT</span><br><span class="line">    methodValue2()</span><br><span class="line">    methodValue3 := st1.testP</span><br><span class="line">    methodValue3()</span><br><span class="line">    methodValue4 := (&amp;st1).testP</span><br><span class="line">    methodValue4()</span><br><span class="line"></span><br><span class="line">    sp1 := SP&#123;&amp;T&#123;<span class="string">"oldboy"</span>&#125;&#125;</span><br><span class="line">    methodValue5 := sp1.testT</span><br><span class="line">    methodValue5()</span><br><span class="line">    methodValue6 := (&amp;sp1).testT</span><br><span class="line">    methodValue6()</span><br><span class="line">    methodValue7 := sp1.testP</span><br><span class="line">    methodValue7()</span><br><span class="line">    methodValue8 := (&amp;sp1).testP</span><br><span class="line">    methodValue8()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="显示传递调用"><a href="#显示传递调用" class="headerlink" title="显示传递调用"></a>显示传递调用</h4><p>接收者显示传值，类型T的可调用方法集包含接收者为T所有方法，不包含接收者为*T的方法。类型*T的可调用方法集包含接收者为*T或者T的所有方法集。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"接受者为 T "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"接受者为 *T "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;<span class="string">"haha"</span>&#125;</span><br><span class="line">    expression1 := T.testT</span><br><span class="line">    expression1(t)</span><br><span class="line">    expression2 := (*T).testT</span><br><span class="line">    expression2(&amp;t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expression3 := T.testP</span></span><br><span class="line">    <span class="comment">// expression3(t)</span></span><br><span class="line">    expression4 := (*T).testP</span><br><span class="line">    expression4(&amp;t)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接收者显示传值，类型S包含匿名字段*T,则S和*S方法集包含T和*T上的方法集是互相继承的。<br>类型 S 包含匿名字段 T ，类型 S  的可调用方法集包含接受者为 T 的所有方法，不包含接受者为 *T 的方法。类型 *S 的可调用方法集包含接受者为 *T 或 T 的所有方法集。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ST <span class="keyword">struct</span> &#123;</span><br><span class="line">    T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SP <span class="keyword">struct</span> &#123;</span><br><span class="line">    *T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">testT</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">testP</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"类型 S 包含匿名字段 *T 或 T ，则 S 和 *S 方法集包含 *T 方法"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    st1 := ST&#123;T&#123;<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">    expression1 := ST.testT</span><br><span class="line">    expression1(st1)</span><br><span class="line">    expression2 := (*ST).testT</span><br><span class="line">    expression2(&amp;st1)</span><br><span class="line">    <span class="comment">// expression3 := ST.testP</span></span><br><span class="line">    <span class="comment">// expression3(st1)</span></span><br><span class="line">    expression4 := (*ST).testP</span><br><span class="line">    expression4(&amp;st1)</span><br><span class="line"></span><br><span class="line">    sp1 := SP&#123;&amp;T&#123;<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">    expression5 := SP.testT</span><br><span class="line">    expression5(sp1)</span><br><span class="line">    expression6 := (*SP).testT</span><br><span class="line">    expression6(&amp;sp1)</span><br><span class="line">    expression7 := SP.testP</span><br><span class="line">    expression7(sp1)</span><br><span class="line">    expression8 := (*SP).testP</span><br><span class="line">    expression8(&amp;sp1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法应用"><a href="#方法应用" class="headerlink" title="方法应用"></a>方法应用</h3><h4 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h4><p>Go语言支持只提供类型，而不写字段名的方式，也就是匿名字段，也称为嵌入字段。<br>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。<br>Go语言匿名字段可以像字段成员那样访问匿名字段方法，编译器负责查找。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Course <span class="keyword">struct</span> &#123;</span><br><span class="line">Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Student)</span> <span class="title">ToString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"Student: %p, %v"</span>, self, self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Course&#123;Student&#123;<span class="number">1</span>,<span class="string">"haha"</span>&#125;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Course: %p\n"</span>,&amp;c)</span><br><span class="line">fmt.Println(c.ToString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Go语言不像其它面向对象语言一样可以写个类，然后在类里面写一堆方法，但其实Go语言的方法很巧妙的实现了这种效果：我们只需要在普通函数前面加个接收者（receiver，写在函数名前面的括号里面），这样编译器就知道这个函数（方法）属于哪个struct了。</p><h4 id="继承复用"><a href="#继承复用" class="headerlink" title="继承复用"></a>继承复用</h4><p>Go语言中没有继承，但是可以依靠组合来模拟继承和多态。<br>通过匿名字段，可获得和继承类似的复用能力。依据编译器查找次序，只需在外层定义同名方法，就可以实现。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Course <span class="keyword">struct</span> &#123;</span><br><span class="line">Student</span><br><span class="line">title <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Student)</span> <span class="title">ToString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"Student:%p,%v"</span>,self,self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Course)</span> <span class="title">ToString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"Course: %p, %v"</span>, self, self)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := Course&#123;Student&#123;<span class="number">1</span>, <span class="string">"haha"</span>&#125;, <span class="string">"Golang"</span>&#125;</span><br><span class="line">    fmt.Println(c.ToString())</span><br><span class="line">    fmt.Println(c.Student.ToString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义EEROR"><a href="#自定义EEROR" class="headerlink" title="自定义EEROR"></a>自定义EEROR</h4><p>错误是可以用字符串描述自己的任何东西。可以由预定义的内建接口类型error，和其返回字符串的方法Error构成。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当用fmt包的多种不同的打印函数输出一个error时，会自动调用该方法。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;</span><br><span class="line">path       <span class="keyword">string</span></span><br><span class="line">op         <span class="keyword">string</span></span><br><span class="line">createTime <span class="keyword">string</span></span><br><span class="line">message    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PathError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"path=%s \nop=%s \ncreateTime=%s \nmessage=%s"</span>, p.path, p.op, p.createTime, p.message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;PathError&#123;</span><br><span class="line">path:       filename,</span><br><span class="line">op:         <span class="string">"read"</span>,</span><br><span class="line">message:    err.Error(),</span><br><span class="line">createTime: fmt.Sprintf(<span class="string">"%v"</span>, time.Now()),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := Open(<span class="string">"/test/test.go"</span>)</span><br><span class="line"><span class="keyword">switch</span> v := err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *PathError:</span><br><span class="line">fmt.Println(<span class="string">"get path error,"</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言流程控制&quot;&gt;&lt;a href=&quot;#Go语言流程控制&quot; class=&quot;headerlink&quot; title=&quot;Go语言流程控制&quot;&gt;&lt;/a&gt;Go语言流程控制&lt;/h2&gt;
&lt;h3 id=&quot;if条件语句&quot;&gt;&lt;a href=&quot;#if条件语句&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（四）</title>
    <link href="https://www.kapyan.top/posts/530346444.html"/>
    <id>https://www.kapyan.top/posts/530346444.html</id>
    <published>2019-02-21T06:45:24.000Z</published>
    <updated>2019-02-25T02:28:21.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言切片"><a href="#Go语言切片" class="headerlink" title="Go语言切片"></a>Go语言切片</h2><p>Go语言切片是对数组的抽象。数组的长度不可改变，在特定场景中不太使用，Go提供了一种灵活，功能强悍的内置类型切片（“动态数组”），与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片容量增大。（slice并不是数组或数组指针，它通过内部指针和相关属性引用数组片段，以实现变长方案）</p><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个切片</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//切片定义并初始化</span></span><br><span class="line"><span class="keyword">var</span> slice0 []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice1 = []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过make来创建切片</span></span><br><span class="line"><span class="keyword">var</span> slice0 []<span class="keyword">int</span> = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> slice1 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> slice2 = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过:=语法来定义切片</span></span><br><span class="line">slice0 := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过操作数组来创建切片</span></span><br><span class="line"><span class="keyword">var</span> array = [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice0 []<span class="keyword">int</span> = array[<span class="number">2</span>:<span class="number">8</span>]</span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">int</span> = array[<span class="number">0</span>:<span class="number">6</span>]<span class="comment">//可以简写为 var slice []int = array[:end]</span></span><br><span class="line"><span class="keyword">var</span> slice2 []<span class="keyword">int</span> = array[<span class="number">5</span>:<span class="number">10</span>]<span class="comment">//可以简写为 var slice[]int = array[start:]</span></span><br><span class="line"><span class="keyword">var</span> slice3 []<span class="keyword">int</span> = array[<span class="number">0</span>:<span class="built_in">len</span>(array)]<span class="comment">//可以简写为var slice []int = array[:]</span></span><br><span class="line"><span class="keyword">var</span> slice4 = array[:<span class="built_in">len</span>(array)<span class="number">-1</span>]  <span class="comment">//去掉切片的最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过两个冒号创建切片，slice[x:y:z]切片实体[x:y],切片长度len=y-x,切片容量cap=z-x</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">    slice1 := slice[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">    fmt.Printf(<span class="string">"slice1 : %v , len : %d , cap : %d\n"</span>, slice1, <span class="built_in">len</span>(slice1), <span class="built_in">cap</span>(slice1))</span><br><span class="line">    slice2 := slice[<span class="number">2</span>:<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">    fmt.Printf(<span class="string">"slice2 : %v , len : %d , cap : %d\n"</span>, slice2, <span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h3><p>切片长度，可以由len()函数获取切片长度。<br>切片容量，可以由cap()函数获取切片最长可以达到多少。<br>如果slice ==  nil，那么len、cap结果都等于0。<br>切片追加，使用append()函数向slice尾部添加数据，返回新的slice<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次 append 一个值</span></span><br><span class="line">    b := <span class="built_in">append</span>(a, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次 append 多个值</span></span><br><span class="line">    c := <span class="built_in">append</span>(b, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次 append 一个切片</span></span><br><span class="line">    <span class="keyword">var</span> d = []<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">    e := <span class="built_in">append</span>(c, d...)</span><br><span class="line"></span><br><span class="line">    fmt.Println(a, b, c, d, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切片拷贝，使用copy()函数copy在两个slice间复制数据，复制长度以len小的为准。两个slice可指向同一底层数组，允许元素区间重叠。</p><p>slice中cap重新分配规律<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">c := <span class="built_in">cap</span>(s)</span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>;i &lt; <span class="number">50</span>;i++ &#123;</span><br><span class="line">s = <span class="built_in">append</span>(s,i)</span><br><span class="line"><span class="keyword">if</span> n := <span class="built_in">cap</span>(s); n &gt; c&#123;</span><br><span class="line">Printf(<span class="string">"cap:%d -&gt; %d\n"</span>,c,n )</span><br><span class="line">c = n</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cap</span>:<span class="number">1</span> -&gt; <span class="number">2</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">2</span> -&gt; <span class="number">4</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">4</span> -&gt; <span class="number">8</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">8</span> -&gt; <span class="number">16</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">16</span> -&gt; <span class="number">32</span></span><br><span class="line"><span class="built_in">cap</span>:<span class="number">32</span> -&gt; <span class="number">64</span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言容器"><a href="#Go语言容器" class="headerlink" title="Go语言容器"></a>Go语言容器</h2><p>Map是一种无序的键值对的集合。Map最重要的一点是通过key来快速检索数据，key类似于索引，指向数据的值。<br>Map是一种集合，所以可以像迭代数组和切片那样迭代它。不过，Map是无序的，我们无法决定它的返回顺序，这是因为Map是使用hash表来实现的。<br>键必须是支持相等运算符（“==”、“！=”）类型，如number、string、pointer、array、struct和对应的interface，值可以是任意类型，没有限制。</p><h3 id="定义Map"><a href="#定义Map" class="headerlink" title="定义Map"></a>定义Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个Map</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Map定义并初始化</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">"Linux"</span>,<span class="number">1</span>:<span class="string">"Golang"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">"Linux"</span>,<span class="number">1</span>:<span class="string">"Golang"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过make来创建Map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过:=语法来定义Map</span></span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Map操作"><a href="#Map操作" class="headerlink" title="Map操作"></a>Map操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"key0"</span>: <span class="string">"Linux"</span>, <span class="string">"key1"</span>: <span class="string">"Python"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line">m[<span class="string">"key2"</span>] = <span class="string">"golang"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新操作</span></span><br><span class="line">m[<span class="string">"key1"</span>] = <span class="string">"php"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找操作</span></span><br><span class="line">val,ok := m[<span class="string">"key0"</span>]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"查找操作：key0 =&gt; %v\n"</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">"key1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//求长度</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(m)</span><br></pre></td></tr></table></figure><font color="red" size="2">注意：不可以在map上使用cap()方法</font><h2 id="Go语言管道"><a href="#Go语言管道" class="headerlink" title="Go语言管道"></a>Go语言管道</h2><h3 id="Channel概念"><a href="#Channel概念" class="headerlink" title="Channel概念"></a>Channel概念</h3><p>Channel是Go中的一个核心类型，可以把它看成一个管道。Channel是引用类型，操作符是箭头 &lt;-。<br>Channel是CSP模式的具体实现，用于多个goroutine通讯。其内部实现了同步，确保并发安全。<br>Channel是线程安全的，先进先出，多个goroutine同时访问，不需要加锁，channel是有类型的，一个整数的channel只能存放整数。</p><h3 id="Channel定义"><a href="#Channel定义" class="headerlink" title="Channel定义"></a>Channel定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//channel声明</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span>  <span class="comment">//声明int类型的chan</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">string</span> <span class="comment">//声明string类型的chan</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> <span class="comment">//声明map类型的chan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用make定义，无缓冲channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">chan</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用make定义，有缓冲channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ch2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ch2 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> = <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ch3 = <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">ch4 := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//只写channel</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ch3 = <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,<span class="number">10</span>)</span><br><span class="line">ch4 := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Channel特点"><a href="#Channel特点" class="headerlink" title="Channel特点"></a>Channel特点</h3><p>无缓冲的与有缓冲channel有着重大差别，那就是一个是同步的，一个是非同步的。</p><blockquote>  <p>无缓冲chan：ch1:=make(chan int)<br>有缓冲chan：ch2:=make(chan int,1)<br>无缓冲：    ch1&lt;-1不仅仅是向c1通道放1，而是一直要等到有别的协程&lt;-ch1接收了这个参数，ch1&lt;-1才会继续下去，要不然就一直阻塞着。<br>有缓冲：ch2&lt;-1则不会阻塞，因为缓大小是1（其实是缓冲大小为0,），只有当放第二个值的时候，第一个还没被接收，才会阻塞。</p></blockquote><p>缓冲区是内部属性，并非类型构成要素。<br>普通channel可以隐式转为只读channel或只写channel。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> send <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> = ch</span><br><span class="line"><span class="keyword">var</span> recv &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> = ch</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意：只读channel或只写channel不能转为普通channel</font><h3 id="Channel操作"><a href="#Channel操作" class="headerlink" title="Channel操作"></a>Channel操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用内置函数len()返回未被读取的缓冲元素数量，使用内置函数cap()返回缓冲区大小</span></span><br><span class="line"></span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">len</span>(ch1), <span class="built_in">cap</span>(ch1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//channel写入、读取操作：</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//写入chan</span></span><br><span class="line">ch &lt;- <span class="number">99</span></span><br><span class="line"><span class="comment">//读取chan</span></span><br><span class="line">value,ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"读取chan:%v\n"</span>,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//channel关闭操作</span></span><br><span class="line">使用内置函数<span class="built_in">close</span>()进行关闭<span class="keyword">chan</span></span><br><span class="line"><span class="comment">/*chan关闭之后，for range遍历chan中已经存在的元素后结束</span></span><br><span class="line"><span class="comment">没有使用for range的写法需要使用，val,ok := &lt;-ch进行判断chan是否关闭,注意:*/</span></span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">val,ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> ok == <span class="literal">false</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"chan is closed"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go语言指针"><a href="#Go语言指针" class="headerlink" title="Go语言指针"></a>Go语言指针</h2><p>指针（Pointer）是编程语言中的一个对象，利用地址，它的值直接指向（points  to）存在的电脑存储器中另一个地方的值。由于通过地址能找到所需的变量单元，可以说，地址指向该变量单元。因此，将地址形象化的称为“指针”。意思是通过它能找到以它为地址的内存单元。一个指针变量指向了一个值的内存地址。<br>Go语言支持指针类型*T，指针的指针**T，以及包含包名前缀的*package.T。</p><h3 id="指针声明"><a href="#指针声明" class="headerlink" title="指针声明"></a>指针声明</h3><p>在指针类型变量前面加上*（取值符）来获取指针所指向的内容。<br>在值类型变量前面加上&amp;（取地址符）来获取该变量的指针。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span> <span class="comment">//声明一个int值的指针变量</span></span><br><span class="line"><span class="keyword">var</span> sp *<span class="keyword">string</span><span class="comment">//声明一个string值的指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过:=语法来定义指针</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">sp := &amp;str</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p **<span class="keyword">int</span> <span class="comment">//声明一个int值的指针的指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t *time.Time <span class="comment">//声明一个time.Time值的指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印变量在内存中的地址：</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">fmt.Printf(<span class="string">"变量的地址:%x\n"</span>,&amp;str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>当一个指针被定义后没有分配到任何变量时，它的值为nil。nil指针也被称为空指针。<br>nil在概念上和其他语言的null、None、nil、NULL一样，都代替零值或空值。<br>定义的不同类型的零值不能用于比较运算。</p><h3 id="指针类型转换"><a href="#指针类型转换" class="headerlink" title="指针类型转换"></a>指针类型转换</h3><p>Go语言是不允许两个指针类型进行转换的。<br>unsafe.Pointer类型用于表示任意类型的指针。有4个特殊的只能用于Pointer类型的操作。</p><ol>  <li>在任意类型的指针可以转换为一个Pointer类型值。</li>  <li>一个Pointer类型值可以转换为任意类型的指针。</li>  <li>一个uintptr类型值可以转换为一个Pointer类型值。</li>  <li>一个Pointer类型值可以转换为一个uintptr类型值。</li></ol><p>因此，Pointer类型允许程序绕过类型系统读写任意内存。使用它时必须谨慎。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">uint</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> p2 *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">p1 := &amp;i</span><br><span class="line">p2 = (*<span class="keyword">int</span>)(unsafe.Pointer(p1))</span><br><span class="line">fmt.Println(*p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Go语言结构体"><a href="#Go语言结构体" class="headerlink" title="Go语言结构体"></a>Go语言结构体</h2><p>Go语言中数组可以存储同一类型的数据，但在结构体中为不同项定义不同的数据类型。<br>结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。</p><h3 id="struct特点"><a href="#struct特点" class="headerlink" title="struct特点"></a>struct特点</h3><ol>  <li>用来定义复杂数据结构</li>  <li>struct里面可以包含一个或多个字段（属性）</li>  <li>struct类型可以定义方法，注意和函数的区分</li>  <li>struct类型是值类型</li>  <li>struct类型可以嵌套</li>  <li>结构体是用户单独定义的类型，不能和其他类型进行强制转换</li>  <li>Go中的struct没有构造函数，一般可以使用工厂模式来解决这个问题</li>  <li>可以为struct中的每个字段，写上一个tag。这个tag可以通过反射的机制获取到，最常用的场景就是json序列化和反序列化</li>  <li>访问结构体成员，用“.”来连接，格式为：“结构体.成员名”</li></ol><h3 id="struct定义"><a href="#struct定义" class="headerlink" title="struct定义"></a>struct定义</h3><p>可以用tpye在全局或函数内定义新类型<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个新的数据类型，结构体中只有一个成员</span></span><br><span class="line"><span class="keyword">type</span> bigint <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">type</span> smallint <span class="keyword">int8</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">新类型不是原类型的别名，除拥有相同数据存储结构外，它们之间没有任何关系，不会持有原类型任何信息。除非目标类型是未命名类型，否则必须显式转换。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个新的数据类型，结构体中有多个成员</span></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">linux <span class="keyword">string</span></span><br><span class="line">python <span class="keyword">string</span></span><br><span class="line">golang <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个新的数据类型，指向结构体的指针</span></span><br><span class="line"><span class="keyword">type</span> linux <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">*linux</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不能同时嵌入某一类型和其指针类型，因为它们名字相同。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> linux <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">*linux</span><br><span class="line">linux</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译错误：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\test.<span class="keyword">go</span>:<span class="number">6</span>:<span class="number">2</span>: duplicate field linux</span><br></pre></td></tr></table></figure></p><h3 id="struct初始化"><a href="#struct初始化" class="headerlink" title="struct初始化"></a>struct初始化</h3><p>有序初始化：结构体中的多个成员的值，必须一一对应。<br>无序初始化：结构体中的多个成员的值，无须一一对应，可初始化部分值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line">    Linux  <span class="keyword">string</span></span><br><span class="line">    Python <span class="keyword">string</span></span><br><span class="line">    Golang <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有序初始化</span></span><br><span class="line"><span class="keyword">var</span> ordered = study&#123;<span class="string">"linux"</span>, <span class="string">"python"</span>, <span class="string">"golang"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无序初始化</span></span><br><span class="line"><span class="keyword">var</span> disordered = study&#123;Golang: <span class="string">"golang"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>结构体初始化方法有以下几种：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> study <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">int</span> </span><br><span class="line"><span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> one study</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mian</span><span class="params">()</span></span>&#123;</span><br><span class="line">two ：= <span class="built_in">new</span>(study)<span class="comment">//同var two *study = new(study)</span></span><br><span class="line">three := study&#123;<span class="number">1</span>,<span class="string">"three"</span>&#125;</span><br><span class="line">four ：= study&#123;&#125;</span><br><span class="line">five := &amp;study&#123;&#125;</span><br><span class="line">six := &amp;study&#123;<span class="number">2</span>,<span class="string">"six"</span>&#125;<span class="comment">//同var six *study = &amp;study&#123;2,"six"&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(one,two,three,four,five,six)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <p>one three four返回study类型变量；two five six返回“*study”类型变量；若无初始化值，则默认为零值。</p></blockquote><h3 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h3><p>定义一个struct，定义的时候字段名与其类型一一对应，实际上Go语言支持只提供类型，而不写字段名的方式，也就是匿名字段，或称为嵌入字段。<br>当匿名字段是一个struct的时候，这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">//匿名字段</span></span><br><span class="line">salary <span class="keyword">int</span></span><br><span class="line"><span class="keyword">int</span>           <span class="comment">//用内置类型作为匿名字段</span></span><br><span class="line">addr   <span class="keyword">string</span> <span class="comment">//类似于重载</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">em1 := Employee&#123;</span><br><span class="line">Person&#123;<span class="string">"haha"</span>, <span class="number">18</span>, <span class="string">"北京"</span>&#125;,</span><br><span class="line"><span class="number">10</span>,</span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="string">"首都"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(em1)</span><br><span class="line"><span class="keyword">var</span> em2 Person = em1.Person</span><br><span class="line">fmt.Println(em2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="struct与tag应用"><a href="#struct与tag应用" class="headerlink" title="struct与tag应用"></a>struct与tag应用</h3><p>声明struct结构的时候，在属性的右侧用小米点`括起来的内容叫标签（Tag），在转换成其其它数据格式的时候，会使用其中特定的字段作为键值。如转成json格式：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId <span class="keyword">int</span></span><br><span class="line">UserName <span class="keyword">string</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserTag <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId <span class="keyword">int</span> <span class="string">`json:"user_id" bson:"user_id"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`json:"user_name" bson:"user_name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">user := &amp;User&#123;UserId:<span class="number">1</span>,UserName:<span class="string">"haha"</span>&#125;</span><br><span class="line">json_user, _:= json.Marshal(user)</span><br><span class="line">fmt.Printf(<span class="string">"struct User echo : %v\n"</span>,<span class="keyword">string</span>(json_user))</span><br><span class="line"></span><br><span class="line">user_tag := &amp;UserTag&#123;UserId:<span class="number">1</span>,UserName:<span class="string">"haha"</span>&#125;</span><br><span class="line">json_user_tag, _:= json.Marshal(user_tag)</span><br><span class="line">fmt.Printf(<span class="string">"struct UserTag echo : %v\n"</span>,<span class="keyword">string</span>(json_user_tag))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> User echo : &#123;<span class="string">"UserId"</span>:<span class="number">1</span>,<span class="string">"UserName"</span>:<span class="string">"haha"</span>&#125;</span><br><span class="line"><span class="keyword">struct</span> UserTag echo : &#123;<span class="string">"user_id"</span>:<span class="number">1</span>,<span class="string">"user_name"</span>:<span class="string">"haha"</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <p>标签是struct类型的组成部分</p></blockquote><h2 id="Go语言常见语法错误"><a href="#Go语言常见语法错误" class="headerlink" title="Go语言常见语法错误"></a>Go语言常见语法错误</h2><ol>  <li>    <p>开大括号不能放在单独一行。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>存在未使用的变量。如果有未使用的局部变量，代码将编译失败。如果给未使用的变量分配了一个新的值，代码还是会编译失败。需要在某个地方使用这个变量，才能让编译器愉快的编译。</p>  </li>  <li>未使用的Imports。如果引入了一个包，而没有使用其中的任何函数、接口、结构体或者变量的话，代码将会编译失败。如果真的需要引入的包，可以添加一个“_”下划线标记符，来作为这个包的名字，从而避免编译失败。下划线标记符用于引入，但不使用。</li>  <li>“:=”简式声明仅可以在函数内部使用。</li>  <li>    <p>使用简式声明重复声明变量。不能在一个单独的声明中重复声明一个变量，但在多变量中这是允许的，其中至少要有一个新的声明变量。重复变量需要在相同的代码块内，否则将得到一个隐藏变量。</p>    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">one := <span class="number">0</span></span><br><span class="line">one := <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">one :=<span class="number">0</span></span><br><span class="line">one,two := <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">one,two = two,one</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li>  <li>    <p>Go语言命名区分大小写</p>  </li>  <li>Go语言中分号分行。如果想将多行代码写在同一行，使用”;”分隔</li>  <li>Go语言中无效的分号。不可以写两个及两个以上连续的分号。</li>  <li>偶然的变量隐藏。短式变量声明的语法如此的方便，容易让人把它当成一个正常的分配操作。如果在一个新的代码块中犯了这个错误，将不会出现编译错误，但应用将不会做期望的事情。    <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">x := <span class="number">1</span></span><br><span class="line">fmt.Println(x) <span class="comment">//1</span></span><br><span class="line">&#123;</span><br><span class="line">fmt.Println(x)<span class="comment">//1</span></span><br><span class="line">x :=<span class="number">2</span> </span><br><span class="line">fmt.Println(x)<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(x) <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </li></ol><blockquote>  <p>这是一个非常常见的陷阱，但又很难发现。<br>可以使用vet命令来发现一些这样的问题。默认情况下，vet不会执行这样的检查，需要设置-shadow参数：<br>命令：<code>go      tool vet -shadow your_file.go</code></p></blockquote><ol start="10">  <li>不使用显式类型，无法使用“nil”来初始化变量。nil标志符用于表示interface、函数、maps、slices和channels的“零值”。如果不指定变量的类型，编译器将无法编译代码，因为它猜不出具体的类型。</li>  <li>使用“nil” Slices and    Maps。在一个nil的slice中添加元素是没有问题的，但对一个map做同样的事将会生成一个运行时的panic。</li>  <li>Map的容量。map只有len操作，没有cap操作。</li>  <li>字符串不会为nil。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言切片&quot;&gt;&lt;a href=&quot;#Go语言切片&quot; class=&quot;headerlink&quot; title=&quot;Go语言切片&quot;&gt;&lt;/a&gt;Go语言切片&lt;/h2&gt;
&lt;p&gt;Go语言切片是对数组的抽象。数组的长度不可改变，在特定场景中不太使用，Go提供了一种灵活，功能强悍的内置类
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（三）</title>
    <link href="https://www.kapyan.top/posts/2830198955.html"/>
    <id>https://www.kapyan.top/posts/2830198955.html</id>
    <published>2019-02-21T00:44:12.000Z</published>
    <updated>2019-02-21T06:38:10.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言fmt包"><a href="#Go语言fmt包" class="headerlink" title="Go语言fmt包"></a>Go语言fmt包</h2><h3 id="格式化输出函数"><a href="#格式化输出函数" class="headerlink" title="格式化输出函数"></a>格式化输出函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure><p>Print采用默认格式将其参数格式化并写入标准输出。如果两个相邻的参数都不是字符串，会在它们的输出之间添加空格，返回写入的字节数和遇到的任何错误。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>,a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>,err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Printf根据format参数生成格式化的字符串并写入标准输出，返回写入的字节数和遇到的任何错误。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>,err error)</span></span></span><br></pre></td></tr></table></figure></p><p>Println采用默认格式将其参数格式化并写入标准输出。总是会在相邻参数的输出之间添加空格并在输出结束后添加换行符，返回写入的字节数和遇到的任何错误。</p><h3 id="常用的格式化"><a href="#常用的格式化" class="headerlink" title="常用的格式化"></a>常用的格式化</h3><p>Go语言的标准输出流在打印到屏幕时有些参数跟别的语言（比如C#和Java）不同。</p><h4 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%v</td>      <td>以默认的方式打印变量的值</td>      <td>fmt.Printf(“%v”,site)</td>    </tr>    <tr>      <td>%+v</td>      <td>在打印结构体时，会添加字段名</td>      <td>fmt.Printf(“%+v”, site)</td>    </tr>    <tr>      <td>%#v</td>      <td>在打印结构体时，会添加字段名和包名</td>      <td>fmt.Printf(“%#v”, site)</td>    </tr>    <tr>      <td>%T</td>      <td>打印变量的类型</td>      <td>fmt.Printf(“%T”, site)</td>    </tr>    <tr>      <td>%%</td>      <td>字面上的百分号，并非值的占位符</td>      <td>fmt.Printf(“%%”)</td>    </tr>  </tbody></table><h4 id="布尔占位符"><a href="#布尔占位符" class="headerlink" title="布尔占位符"></a>布尔占位符</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%t</td>      <td>打印true或fasle</td>      <td>fmt.Printf(“%t”,true)</td>    </tr>  </tbody></table><h4 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%b</td>      <td>表示为二进制</td>      <td>fmt.Printf(“%b”,100)</td>    </tr>    <tr>      <td>%c</td>      <td>该值对应的Unicode码值</td>      <td>fmt.Printf(“%c”,0x4E2D)</td>    </tr>    <tr>      <td>%d</td>      <td>表示为十进制</td>      <td>fmt.Printf(“%d”,0x12)</td>    </tr>    <tr>      <td>%o</td>      <td>表示为八进制</td>      <td>fmt.Printf(“%d”, 10)</td>    </tr>    <tr>      <td>%q</td>      <td>该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示</td>      <td>fmt.Printf(“%q”, 0x4E2D)</td>    </tr>    <tr>      <td>%x</td>      <td>十六进制表示，字母形式为小写 a-f</td>      <td>fmt.Printf(“%x”, 13)</td>    </tr>    <tr>      <td>%X</td>      <td>十六进制表示，字母形式为大写 A-F</td>      <td>fmt.Printf(“%x”, 13)</td>    </tr>    <tr>      <td>%U</td>      <td>表示为Unicode格式：U+1234，等价于”U+%04X”</td>      <td>fmt.Printf(“%U”, 0x4E2D)</td>    </tr>  </tbody></table><h4 id="浮点数和复数的组成部分（实部和虚部）"><a href="#浮点数和复数的组成部分（实部和虚部）" class="headerlink" title="浮点数和复数的组成部分（实部和虚部）"></a>浮点数和复数的组成部分（实部和虚部）</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%e</td>      <td>(=%.6e) 6位小数点科学计数法，例如 -1234.456e+78</td>      <td>fmt.Printf(“%e”, 10.2)</td>    </tr>    <tr>      <td>%E</td>      <td>科学计数法，如-1234.456E+78</td>      <td>fmt.Printf(“%e”, 10.2)</td>    </tr>    <tr>      <td>%f</td>      <td>(=%.6f) 6位小数点有小数点而无指数，例如 123.456</td>      <td>fmt.Printf(“%f”, 10.2)</td>    </tr>    <tr>      <td>%g</td>      <td>根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td>      <td>fmt.Printf(“%g”, 10.20)</td>    </tr>    <tr>      <td>%G</td>      <td>根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td>      <td>fmt.Printf(“%G”, 10.20+2i)</td>    </tr>  </tbody></table><h4 id="字符串与字节切片"><a href="#字符串与字节切片" class="headerlink" title="字符串与字节切片"></a>字符串与字节切片</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%s</td>      <td>输出字符串表示（string类型或[]byte）</td>      <td>fmt.Printf(“%s”, []byte(“haha”))</td>    </tr>    <tr>      <td>%10s</td>      <td>输出字符串最小宽度为10(右对齐)</td>      <td>fmt.Printf(“%10s”, “haha”)</td>    </tr>    <tr>      <td>%-10s</td>      <td>输出字符串最小宽度为10(左对齐)</td>      <td>fmt.Printf(“%-10s”, “haha”)</td>    </tr>    <tr>      <td>%.5s</td>      <td>输出字符串最大宽度为5</td>      <td>fmt.Printf(“%.5s”, “haha”)</td>    </tr>    <tr>      <td>%5.10s</td>      <td>输出字符串最小宽度为5，最大宽度为10</td>      <td>fmt.Printf(“%5.10s”, “haha”)</td>    </tr>    <tr>      <td>%-5.10s</td>      <td>输出字符串最小宽度为5，最大宽度为10(左对齐)</td>      <td>fmt.Printf(“%-5.10s”, “haha”)</td>    </tr>    <tr>      <td>%5.3s</td>      <td>输出字符串宽度为5,如果原字符串宽度大于3,则截断</td>      <td>fmt.Printf(“%5.3s”, “haha”)</td>    </tr>    <tr>      <td>%010s</td>      <td>如果宽度小于10，就会在字符串前面补零</td>      <td>fmt.Printf(“%010s”, “haha”)</td>    </tr>    <tr>      <td>%q</td>      <td>双引号围绕的字符串，由Go语法安全地转义</td>      <td>fmt.Printf(“%q”, “haha”)</td>    </tr>    <tr>      <td>%x</td>      <td>十六进制，小写字母，每字节两个字符</td>      <td>fmt.Printf(“%x”, “haha”)</td>    </tr>    <tr>      <td>%X</td>      <td>十六进制，大写字母，每字节两个字符</td>      <td>fmt.Printf(“%X”, “haha”)</td>    </tr>  </tbody></table><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><table>  <thead>    <tr>      <th>占位符</th>      <th>说明</th>      <th>举例</th>    </tr>  </thead>  <tbody>    <tr>      <td>%p</td>      <td>十六进制表示，前缀0x</td>      <td>fmt.Printf(“%p”,&amp;site)</td>    </tr>    <tr>      <td>%#p</td>      <td>不带前缀0x</td>      <td>fmt.Printf(“%#p”,&amp;site)</td>    </tr>  </tbody></table><h2 id="Go语言字符串"><a href="#Go语言字符串" class="headerlink" title="Go语言字符串"></a>Go语言字符串</h2><p>Go语言的字符串是一个用UTF-8编码的变宽字符序列，它的每一个字符都用一个或多个字节表示。<br>在Go语言中，没有字符类型，字符类型是rune类型，rune是int32的别称。可用[]byte()获取字节，使用[]rune()获取字符，可对中文进行转换。</p><h3 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"Go语言字符串\n不能跨行赋值"</span><span class="comment">//双引号，用来创建可解析的字符串字面量（支持转义，但不能用来引用多行）</span></span><br><span class="line">str := <span class="string">`Go原生原格式字符串</span></span><br><span class="line"><span class="string">可以跨行`</span><span class="comment">//反引号，用来创建原生的字符串字面量，这些字符串可能由多行组成（不支持任何转义序列），原生的字符串字面量多用于书写多行消息、HTML以及正则表达式</span></span><br></pre></td></tr></table></figure><font color="red">注意:单引号不能用于定义字符串，单引号用于定义Go语言的一个特殊类型rune，类似其他语言的byte但又不完全一样，是指码点字面量（Unicode  code point），不做任何转义的原始内容。</font><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"hello"</span> + <span class="string">"world"</span></span><br></pre></td></tr></table></figure><p>golang里字符串都是不可变的，每次运算都会产生一个新的字符串，所以会产生很多临时无用的字符串，不仅没有用，还会给gc带来额外的负担，所以性能比较差。<font color="red" size="2">(注意：连接跨行字符串时，”+”必须在上一行末尾，否则导致编译错误)</font><br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str := fmt.Sprintf(<span class="string">"%s,%s"</span>,<span class="string">"hello"</span>,<span class="string">"world"</span>)</span><br></pre></td></tr></table></figure></p><p>内部使用[]byte实现，不像直接运算符这种会产生很多临时的字符串，但是内部逻辑比较复杂，有很多额外的判断，还用到了interface，所以性能也不是很好。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str := strings.Join([]<span class="keyword">string</span>&#123;<span class="string">"hello"</span>,<span class="string">"world"</span>&#125;,<span class="string">","</span>)</span><br></pre></td></tr></table></figure></p><p>join会先根据字符串数组的内容，计算出一个拼接之后的长度，然后申请对应大小的内存，一个一个字符串填入，在已有一个数组的情况下，这种效率会很高，但是本来没有，去构造这个数据的代价也不小。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bytes"</span></span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">buffer.WriteString(<span class="string">"hello"</span>)</span><br><span class="line">buffer.WriteString(<span class="string">","</span>)</span><br><span class="line">buffer.WriteString(<span class="string">"world"</span>)</span><br><span class="line">str := buffer.String()</span><br></pre></td></tr></table></figure></p><p>这个比较理想,可以当成可变字符使用，对内存的增长也有优化。</p><blockquote>  <p>总结：</p>  <ol>    <li>在已有字符串数组的场合，使用strings.Join()能有比较好的性能；</li>    <li>在一些性能要求比较高的场合，尽量使用buffer.WriteString() 以获得更好的性能；</li>    <li>“+” 运算符在较少字符串连接的场景下性能最好，而且代码更简短清晰，可读性更好；</li>    <li>如果需要拼接的不仅仅是字符串，还有数字之类的其他需求的话，可以考虑 fmt.Sprintf()。</li>  </ol></blockquote><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>1.将字符串转换为[]rune后调用len函数进行统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := <span class="built_in">len</span>([]<span class="keyword">rune</span>(str))</span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote>  <p>在golang中，如果字符串出现中文字符不能直接调用len函数来统计字符串字符长度，这是因为在Go中，字符串是以UTF-8为格式进行存储的，在字符串上调用len函数，取得的是字符串包含的byte的个数。</p></blockquote><p>2.使用bytes.Count()统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := bytes.Count([]<span class="keyword">byte</span>(str), <span class="literal">nil</span>) - <span class="number">1</span></span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算字节切片sep在字节切片s中非重叠显示的个数，如果 sep 为 nil，则返回 s 中的字符个数 + 1。</p><p>3.使用strings.Count()统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := strings.Count(str, <span class="string">""</span>) - <span class="number">1</span></span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>判断字符sep在字符串s中出现的次数，没有找到则返回-1，如果为空字符串(“”)则返回字符串的长度+1。</p><p>4.使用 utf8.RuneCountInString() 统计<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello world"</span></span><br><span class="line">    length := utf8.RuneCountInString(str)</span><br><span class="line">    fmt.Println(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回 s 字符串长度，可以正常解析中文，一个中文被当做一个字符。</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>使用索引号“[]”返回子串。返回的字符串依然指向原字节数组，仅修改了指针和长度属性。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"hello, world"</span></span><br><span class="line">    s1 := str[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">    s2 := str[<span class="number">7</span>:<span class="number">13</span>]</span><br><span class="line">    fmt.Println(s1, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>修改字符串，可先将其转换成 []rune 或 []byte，完成后再转换为string。无论哪种转换，都会重新分配内存，并复制字节数组。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">"hello world"</span></span><br><span class="line">    s1 := []<span class="keyword">byte</span>(str1)</span><br><span class="line">    s1[<span class="number">0</span>] = <span class="string">'H'</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(s1))</span><br><span class="line"></span><br><span class="line">    str2 := <span class="string">"鸟宿池边树，僧推月下门。"</span></span><br><span class="line">    s2 := []<span class="keyword">rune</span>(str2)</span><br><span class="line">    s2[<span class="number">7</span>] = <span class="string">'敲'</span></span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(s2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello world</span><br><span class="line">鸟宿池边树，僧敲月下门。</span><br></pre></td></tr></table></figure></p><h2 id="Go语言string包"><a href="#Go语言string包" class="headerlink" title="Go语言string包"></a>Go语言string包</h2><p>strings包实现了用于操作字符的简单函数。</p><h3 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h3><p>判断给定字符串s中是否包含子串substr,找到返回true, 找不到返回false。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"包含子串返回："</span>, strings.Contains(<span class="string">"hello world"</span>, <span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在字符串s中查找sep所在的位置,返回位置值,找不到返回-1<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"存在返回第一个匹配字符的位置："</span>, strings.Index(<span class="string">"hello"</span>, <span class="string">"o"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"不存在返回："</span>, strings.Index(<span class="string">"hello"</span>, <span class="string">"world"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"中文字符串存在返回："</span>, strings.Index(<span class="string">"呜呼哈哈"</span>, <span class="string">"哈哈"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">存在返回第一个匹配字符的位置： <span class="number">4</span></span><br><span class="line">不存在返回： <span class="number">-1</span></span><br><span class="line">中文字符串存在返回： <span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>统计给定子串sep的出现次数, sep为空时, 返回字符串的长度 + 1<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"子字符串出现次数："</span>, strings.Count(<span class="string">"hello ooo"</span>, <span class="string">"o"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"子字符串为空时, 返回："</span>, strings.Count(<span class="string">"hello"</span>, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子字符串出现次数： <span class="number">4</span></span><br><span class="line">子字符串为空时, 返回： <span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="重复操作"><a href="#重复操作" class="headerlink" title="重复操作"></a>重复操作</h3><p>重复s字符串count次，最后返回新生成的重复的字符串<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(strings.Repeat(<span class="string">"嘀嗒"</span>,<span class="number">4</span>),<span class="string">"时针它不停在转动"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">嘀嗒嘀嗒嘀嗒嘀嗒 时针它不停在转动</span><br></pre></td></tr></table></figure></p><h3 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h3><p>在s字符串中，把old字符串替换为new字符串，n表示替换的次数，如果n&lt;0会替换所有old子串。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Replace(<span class="string">"luck luck luck"</span>, <span class="string">"k"</span>, <span class="string">"ky"</span>, <span class="number">2</span>))</span><br><span class="line">    fmt.Println(strings.Replace(<span class="string">"luck luck luck"</span>, <span class="string">"k"</span>, <span class="string">"ky"</span>, <span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lucky lucky luck</span><br><span class="line">lucky lucky lucky</span><br></pre></td></tr></table></figure></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除在s字符串的头部和尾部中由cutset指定的字符，并返回删除后的字符串<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Trim(<span class="string">"   hello   "</span>, <span class="string">" "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure></p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定字符串转换为英文标题的首字母大写的格式（不能正确处理unicode标点）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Title</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//返回将所有字母都转为对应的小写版本的拷贝</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">ToLower</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//返回将所有字母都转为对应的大写版本的拷贝</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">ToUpper</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure><h3 id="字符串前后缀"><a href="#字符串前后缀" class="headerlink" title="字符串前后缀"></a>字符串前后缀</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断字符串是否包含前缀prefix，大小写敏感</span></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">HasPrefix</span><span class="params">(s,prefix <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//判断<span class="title">s</span>是否有后缀字符串<span class="title">suffix</span>，大小写敏感</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">HasSuffix</span><span class="params">(s,suffix <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br></pre></td></tr></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>用去掉s中出现的sep的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s,sep <span class="keyword">string</span>)</span> []<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>返回将字符串按照空白（Unicode.IsSpace确定，可以是一个到多个连续的空白字符）分割的多个字符串。如果字符串全部是空白或者空字符串的话，会返回空切片。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="keyword">string</span>)</span> []<span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言数组"><a href="#Go语言数组" class="headerlink" title="Go语言数组"></a>Go语言数组</h2><p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型，如：整形、字符串或自定义类型。<br>在go中数组是固定长度的数据类型，它包含相同类型的连续的元素，这些元素可以是内建类型，像数字和字符串，也可以是结构类型，元素可以通过唯一的索引值访问，从0开始。<br>数组是很有价值的数据结构，因为它的内存分配是连续的，内存连续意味着可以让它在CPU缓存中待更久，所以迭代数组和移动元素都会非常迅速。</p><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><p>1.通过指定数据类型和元素个数（数组长度）来声明数组。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">//声明一个长度为5的整数数组</span></span><br><span class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">//声明一个长度为5的整数数组并初始化</span></span><br></pre></td></tr></table></figure></p><p>2.一种快速创建和初始化数组的方法是使用数组字面值。数组字面值允许我们声明我们需要的元素个数并指定数据类型。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array := [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Java"</span>, <span class="string">"Golang"</span>, <span class="string">"DBA"</span>&#125;<span class="comment">//声明一个长度为5的字符串数组并初始化每个元素</span></span><br></pre></td></tr></table></figure></p><p>3.如果把长度写成…，go编译器将会根据元素来推导出长度<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment">//通过初始化值的个数来推导出数组容量</span></span><br></pre></td></tr></table></figure></p><p>4.如果知道想要数组的长度，但是希望对指定位置元素初始化。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arry := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">3</span>:<span class="number">3</span>&#125;<span class="comment">//声明一个长度为5的整数数组，为索引为1和3的位置指定元素初始化，剩余元素为该元素类型的默认值</span></span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意:当一个数组被声明时，它里面包含的每个元素都会被初始化为该元素类型的默认值。一旦数组被声明了，那么它的数据类型和长度都不能再被改变。如果需要更多的元素，那么只能创建一个想要长度的新的数组，然后把原有数组的元素拷贝过去。</font><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><p>使用内置函数len()和cap()返回数组长度和数组容量。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">array := [<span class="number">2</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"数组长度：%d，数组容量：%d\n"</span>, <span class="built_in">len</span>(array), <span class="built_in">cap</span>(array))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果:<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组长度：<span class="number">2</span>，数组容量：<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>使用[]操作符来访问数组元素：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变索引为2的元素的值：</span></span><br><span class="line">array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">array[<span class="number">2</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意：数组可以通过下标进行访问，数组下标是从0开始，最后一个元素下标是：len(array)-1。如果下标在数组合法范围之外，则触发访问越界。</font><br>数组赋值操作，一个数组可以被赋值给任意相同类型的数组：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">string</span></span><br><span class="line">arr2 := [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="string">"Linux"</span>, <span class="string">"Python"</span>, <span class="string">"Java"</span>, <span class="string">"Golang"</span>, <span class="string">"DBA"</span>&#125;</span><br><span class="line">arr1 = arr2</span><br></pre></td></tr></table></figure><br><br><font color="red" size="2">注意：数组的类型同时包括数组的长度和可以被存储的元素类型，数组类型完全相同才可以互相赋值。</font><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>数组总是一维的，但是可以组合成多维的。多维数组通常用于有父子关系的数据或者是坐标系数据：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array [<span class="number">3</span>][<span class="number">6</span>]<span class="keyword">int</span>  <span class="comment">//声明一个二维数组</span></span><br><span class="line">array := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">10</span>, <span class="number">11</span>&#125;, &#123;<span class="number">20</span>, <span class="number">21</span>&#125;, &#123;<span class="number">30</span>, <span class="number">31</span>&#125;, &#123;<span class="number">40</span>, <span class="number">41</span>&#125;&#125;<span class="comment">//使用数组字面值声明并初始化</span></span><br><span class="line">array := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: &#123;<span class="number">20</span>, <span class="number">21</span>&#125;, <span class="number">3</span>: &#123;<span class="number">40</span>, <span class="number">41</span>&#125;&#125;<span class="comment">//指定外部数组索引位置初始化</span></span><br><span class="line">array := [<span class="number">4</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="number">3</span>: &#123;<span class="number">1</span>: <span class="number">41</span>&#125;&#125; <span class="comment">//同时指定内外部数组索引位置初始化</span></span><br></pre></td></tr></table></figure></p><p>使用内置函数len()和cap返回多维数组长度和多维数组容量。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    array := [<span class="number">3</span>][<span class="number">6</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    fmt.Printf(<span class="string">"数组长度：%d，数组容量：%d\n"</span>, <span class="built_in">len</span>(array), <span class="built_in">cap</span>(array))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组长度：<span class="number">3</span>，数组容量：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言类型转换"><a href="#Go语言类型转换" class="headerlink" title="Go语言类型转换"></a>Go语言类型转换</h2><p>类型转换用于将一种数据类型的变量转换为另一种类型的变量。<br>Go语言类型转换基本格式如下：<br>表达式T(v)将值v转换为类型T。</p><p>Go语言各种类型转换及函数的高级用法：<br>strconv包实现了基本数据类型和其字符串表示的相互转换。</p><h3 id="字符串转字节"><a href="#字符串转字节" class="headerlink" title="字符串转字节"></a>字符串转字节</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line">    result := []<span class="keyword">byte</span>(str)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32位整型转字节"><a href="#32位整型转字节" class="headerlink" title="32位整型转字节"></a>32位整型转字节</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int32</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    bytesBuffer := bytes.NewBuffer([]<span class="keyword">byte</span>&#123;&#125;)</span><br><span class="line">    binary.Write(bytesBuffer, binary.BigEndian, x)</span><br><span class="line">    result := bytesBuffer.Bytes()</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节转字符串<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b []<span class="keyword">byte</span> = []<span class="keyword">byte</span>&#123;<span class="number">111</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">111</span>, <span class="number">121</span>&#125;</span><br><span class="line">    result := <span class="keyword">string</span>(b)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="整型转字符串"><a href="#整型转字符串" class="headerlink" title="整型转字符串"></a>整型转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    result := strconv.Itoa(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FormatInt 将 int 型整数 i 转换为字符串形式<br>base：进位制（2 进制到 36 进制） 大于 10 进制的数，返回值使用小写字母  ‘a’ 到 ‘z’<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatInt</span><span class="params">(i <span class="keyword">int64</span>, base <span class="keyword">int</span>)</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure></p><p>Itoa 相当于 FormatInt(i, 10)</p><h3 id="64位整形转字符串"><a href="#64位整形转字符串" class="headerlink" title="64位整形转字符串"></a>64位整形转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int64</span></span><br><span class="line">    i = <span class="number">0x100</span></span><br><span class="line">    result := strconv.FormatInt(i, <span class="number">10</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="布尔值转字符串"><a href="#布尔值转字符串" class="headerlink" title="布尔值转字符串"></a>布尔值转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := strconv.FormatBool(<span class="literal">true</span>)</span><br><span class="line">    f := strconv.FormatBool(<span class="literal">false</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"t is %v , t type is %v\n"</span>, t, reflect.TypeOf(t))</span><br><span class="line">    fmt.Printf(<span class="string">"f is %v , f type is %v\n"</span>, f, reflect.TypeOf(f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数转字符串"><a href="#浮点数转字符串" class="headerlink" title="浮点数转字符串"></a>浮点数转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">strconv.FormatFloat(f,fmt,prec,bitSize)</span><br><span class="line">f：要转换的浮点数 </span><br><span class="line">fmt：格式标记（b、e、E、,f、g、G） </span><br><span class="line">prec：精度（数字部分的长度，不包括指数部分） </span><br><span class="line">bitSize：指定浮点类型（<span class="number">32</span>:<span class="keyword">float32</span>、<span class="number">64</span>:<span class="keyword">float64</span>）</span><br><span class="line"></span><br><span class="line">格式标记： </span><br><span class="line">‘b’ (-ddddp±ddd，二进制指数) </span><br><span class="line">‘e’ (-d.dddde±dd，十进制指数) </span><br><span class="line">‘E’ (-d.ddddE±dd，十进制指数) </span><br><span class="line">‘f’ (-ddd.dddd，没有指数) </span><br><span class="line">‘g’ (‘e’:大指数，’f’:其它情况) </span><br><span class="line">‘G’ (‘E’:大指数，’f’:其它情况)</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := <span class="number">100.12345678901234567890123456789</span></span><br><span class="line">    result := strconv.FormatFloat(f, <span class="string">'e'</span>, <span class="number">30</span>, <span class="number">32</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="int转int64"><a href="#int转int64" class="headerlink" title="int转int64"></a>int转int64</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    result := <span class="keyword">int64</span>(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转整形"><a href="#字符串转整形" class="headerlink" title="字符串转整形"></a>字符串转整形</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line">    str = <span class="string">"100"</span></span><br><span class="line">    result, _ := strconv.Atoi(str)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节转32位整形"><a href="#字节转32位整形" class="headerlink" title="字节转32位整形"></a>字节转32位整形</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := []<span class="keyword">byte</span>&#123;<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0xe8</span>&#125;</span><br><span class="line">    bytesBuffer := bytes.NewBuffer(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int32</span></span><br><span class="line">    binary.Read(bytesBuffer, binary.BigEndian, &amp;result)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br></pre></td></tr></table></figure><h3 id="float32转float64"><a href="#float32转float64" class="headerlink" title="float32转float64"></a>float32转float64</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">float32</span> = <span class="number">100</span></span><br><span class="line">    result := <span class="keyword">float64</span>(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整型转浮点型"><a href="#整型转浮点型" class="headerlink" title="整型转浮点型"></a>整型转浮点型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line">    result := <span class="keyword">float32</span>(x)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转浮点数"><a href="#字符串转浮点数" class="headerlink" title="字符串转浮点数"></a>字符串转浮点数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">strconv.ParseFloat(str,bitSize)</span><br><span class="line">str：要转换的字符串</span><br><span class="line">bitSize：指定浮点类型（<span class="number">32</span>:<span class="keyword">float32</span>、<span class="number">64</span>:<span class="keyword">float64</span>）</span><br><span class="line">如果 str 是合法的格式，而且接近一个浮点值，</span><br><span class="line">则返回浮点数的四舍五入值（依据 IEEE754 的四舍五入标准）</span><br><span class="line">如果 str 不是合法的格式，则返回“语法错误”</span><br><span class="line">如果转换结果超出 bitSize 范围，则返回“超出范围”</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"0.12345678901234567890"</span></span><br><span class="line">    result, _ := strconv.ParseFloat(str, <span class="number">32</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转布尔值"><a href="#字符串转布尔值" class="headerlink" title="字符串转布尔值"></a>字符串转布尔值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ParseBool 将字符串转换为布尔值 </span><br><span class="line">它接受真值：<span class="number">1</span>, t, T, TRUE, <span class="literal">true</span>, True </span><br><span class="line">它接受假值：<span class="number">0</span>, f, F, FALSE, <span class="literal">false</span>, False. </span><br><span class="line">其它任何值都返回一个错误</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result, _ := strconv.ParseBool(<span class="string">"1"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"result is %v , result type is %v\n"</span>, result, reflect.TypeOf(result))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Go语言不能将其他类型当bool值使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言fmt包&quot;&gt;&lt;a href=&quot;#Go语言fmt包&quot; class=&quot;headerlink&quot; title=&quot;Go语言fmt包&quot;&gt;&lt;/a&gt;Go语言fmt包&lt;/h2&gt;
&lt;h3 id=&quot;格式化输出函数&quot;&gt;&lt;a href=&quot;#格式化输出函数&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习笔记（二）</title>
    <link href="https://www.kapyan.top/posts/3853503483.html"/>
    <id>https://www.kapyan.top/posts/3853503483.html</id>
    <published>2019-02-20T06:36:42.000Z</published>
    <updated>2019-02-20T09:29:36.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言变量"><a href="#Go语言变量" class="headerlink" title="Go语言变量"></a>Go语言变量</h2><p>变量来源于数学，是计算机语言中能储存计算结果或能标识值抽象概念。变量可以通过变量名访问。<br>Go语言是静态类型语言，不能在运行期间改变变量类型。使用关键字var定义变量，自动初始化为零值。如果提供初始化值，可省略变量类型，由编译器自动推断。<br>Go语言中变量可以在三个地方声明：</p><ol>  <li>函数外定义的变量称为全局变量：在函数体外声明，可以在整个包甚至外部包（被导出后）使用</li>  <li>函数内定义的变量称为局部变量：在函数体内部声明，作用域只在函数体内，参数和返回值变量也是局部变量</li>  <li>函数定义中的变量称为形式参数：会作为函数的局部变量来使用</li></ol><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span><span class="comment">//指定变量类型，声明后若不赋值，使用默认值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span><span class="comment">//根据值自行判定变量类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> class <span class="keyword">string</span> = <span class="string">"linux"</span>  <span class="comment">//变量声明并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一次声明多个变量</span></span><br><span class="line"><span class="keyword">var</span>  Mon,Tues,Wed,Thur,Fri,Sat,Sun, <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    Monday    <span class="keyword">int</span></span><br><span class="line">    Tuesday   <span class="keyword">int</span></span><br><span class="line">    Wednesday <span class="keyword">int</span></span><br><span class="line">    Thursday  <span class="keyword">int</span></span><br><span class="line">    Friday    <span class="keyword">int</span></span><br><span class="line">    Saturday  <span class="keyword">int</span></span><br><span class="line">    Sunday    <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//短变量声明，在函数内部，可以使用更简略的":="方式定义变量。":="简洁赋值语句在明确类型的地方可以用于替代var定义,":="结构不能在函数外使用</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">name := <span class="string">"haha"</span></span><br><span class="line">age,class :=<span class="number">18</span>,<span class="string">"linux"</span></span><br><span class="line">_, _, _ = name,age,class</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//形式参数</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="params">(c init)</span></span>&#123;</span><br><span class="line">c = a + b</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级"></a>变量优先级</h3><p>Go语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先使用。<br>多变量赋值时，先计算所有相关值，然后再从左到右依次赋值。<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">data, i := [<span class="number">4</span>]<span class="keyword">string</span>&#123;<span class="string">"course"</span>, <span class="string">"Python"</span>, <span class="string">"Linux"</span>, <span class="string">"Golang"</span>&#125;, <span class="number">0</span></span><br><span class="line">i, data[i] = <span class="number">2</span>,<span class="string">"haha"</span></span><br><span class="line">fmt.Printf(<span class="string">"i：%v，data：%v\n"</span>, i, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果:<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i:<span class="number">2</span>,data:[haha Python Linux Golang]</span><br></pre></td></tr></table></figure></p><h2 id="Go语言常量"><a href="#Go语言常量" class="headerlink" title="Go语言常量"></a>Go语言常量</h2><p>常量是一个简单值的标识符，在程序运行时，永远是只读，不能修改。<br>使用const关键字定义常量。常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">"haha"</span> <span class="comment">//显式类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span> <span class="comment">//隐式类型定义，一个未指定类型的常量由上下文来决定其类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一次性定义多个常量</span></span><br><span class="line"><span class="keyword">const</span> Mon, Tues, Wed, Thur, Fri, Sat, Sun = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    name = <span class="string">"haha"</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//常量可以用len(),cap()，unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不通过</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="string">"abc"</span></span><br><span class="line">b = <span class="built_in">len</span>(a)</span><br><span class="line">c = unsafe.Sizeof(b)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="常量技巧"><a href="#常量技巧" class="headerlink" title="常量技巧"></a>常量技巧</h3><p>未使用的局部常量不会引发编译错误。<br>在常量组中，如不提供类型和初始化值，那么视作与上一个常量相同。</p><h3 id="特殊常量"><a href="#特殊常量" class="headerlink" title="特殊常量"></a>特殊常量</h3><p>特殊常量，iota,可以认为是一个可以被编译器修改的常量。<br>在每一个const关键字出现时，被重置为0，然后在下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1。</p><p>关键字iota定义常量组中从0开始按行计数的自增枚举值。实例如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>在同一常量组中，可以提供多个iota，他们各自增长。实例如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">A1,B1 = <span class="literal">iota</span>,<span class="literal">iota</span> &lt;&lt;<span class="number">10</span></span><br><span class="line">A2,B2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(A1,B1,A2,B2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1024</span></span><br></pre></td></tr></table></figure></p><p>如果iota自增被打断，须显式恢复。实例如下：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sun = <span class="literal">iota</span></span><br><span class="line">    Mon</span><br><span class="line">    Tues</span><br><span class="line">    Wed = <span class="string">"Wednesday"</span></span><br><span class="line">    Thur</span><br><span class="line">    Fri = <span class="literal">iota</span></span><br><span class="line">    Sat</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Sun, Mon, Tues, Wed, Thur, Fri, Sat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> Wednesday Wednesday <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></p><h2 id="Go语言包和文件"><a href="#Go语言包和文件" class="headerlink" title="Go语言包和文件"></a>Go语言包和文件</h2><h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><p>Go语言工作空间：编译工具对源码目录有严格要求，每个工作空间（workspace）必须由bin、pkg、src三个目录组成。</p><blockquote>  <p>src:项目源码目录，里面每一个子目录，就是一个包，包内是Go语言的源码文件。<br>pkg：Go语言编译的.a中间文件存放目录，可自动生成。<br>bin：Go语言编译可执行文件存放目录，可自动生成。</p></blockquote><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>包是结构化代码的一种方式：每个程序都由包的概念组成，可以使用自身的包或者从其他包中导入内容。<br>如同其他一些编程语言中的类库或命名空间的概念，每个Go文件都属于且仅属于一个包。一个包可以由许多以.go为扩展名的源文件组成，因此文件名和包名一般来说都不是相同的。<br>包声明“package  + 包名”，必须在源文件中非注释的第一行指明这个文件属于哪个包。如：package main。package  main表示一个可独立执行的程序，每个Go应用程序都包含一个名为main的包。<br>同一个包（package）下面，可以有非常多的不同文件，只要每个文件的头部都有相同name就可以。文件夹名称和可以和这个package名称不一致。</p><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>在Go的安装文件里包含了一些可以直接使用的包，即标准库。<br>Go语言标准库包，覆盖了几乎所有的基础库，提供了丰富广泛的功能特性。<br>标准库的内容还可能继续增加，可以通过在线查阅库API或使用godoc（包含在Go发布包中）来获取最新信息及全面了解每个包所具备的功能。</p><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><p>通过“go get + 完整包名”保存下载第三方库。<br>在执行go get命令之前，确保配置了环境变量GOPATH，并且安装了git。</p><h3 id="导出包"><a href="#导出包" class="headerlink" title="导出包"></a>导出包</h3><p>在Go语言中根据首字母的大小写来确定可以访问的权限。如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用。该规则适用于全局变量、全局常量、类型、结构字段、函数、方法等。<br>可以简单的理解成，首字母大写是公有的，首字母小写是私有的。<br>在导入包之后，只能访问包所导出的名字，任何未导出的名字是不能被包外的代码访问的。</p><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>使用包成员前，必须先用import关键字导入，但不能形成导入循环。<br>import用法：<br>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span><span class="comment">//导入系统包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./test"</span><span class="comment">//相对路径导入包，导入同一目录下test包中的内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"test/app"</span><span class="comment">//绝对路径导入包，导入gopath/sr/tset/app包中的内容</span></span><br><span class="line"><span class="keyword">import</span> f <span class="string">"fmt"</span><span class="comment">//导入包并启用别名为f</span></span><br><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span><span class="comment">//将fmt启用别名"."，这样就可以直接使用其内容，而不用在添加fmt，如fmt.Println可以直接写成Println</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"fmt"</span><span class="comment">//表示不使用该包，而是只是使用该包的init函数，并不显示的使用该包的其他内容。这种形式的import，当import时就执行了fmt包中的init函数，而不能够使用该包的其他函数</span></span><br></pre></td></tr></table></figure></p><font color="red" size="2">注意:未使用的导入包，会被编译器视为错误（不包括”import _“）。</font><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><p>Go语言源码文件编码格式必须是UTF-8格式，否则会导致编译器出错。</p><h2 id="结束语句"><a href="#结束语句" class="headerlink" title="结束语句"></a>结束语句</h2><p>在Go程序中，一行代表一个语句结束。每个语句不需要像其他语言一样以分号“;”结尾，因为这些工作都将由Go编译器自动完成。<br>如果打算将多个语句写在同一行，他们则必须使用“;”人为区分。</p><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><p>注释不会被编译，每一个包应该有相关注释。<br>Go语言代码注释支持 “//“、”/**/“ 两种注释方式，不能嵌套。<br>单行注释是最常见的注释形式，你可以在任何地方使用以  // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。</p><h2 id="Go程序启动执行顺序"><a href="#Go程序启动执行顺序" class="headerlink" title="Go程序启动执行顺序"></a>Go程序启动执行顺序</h2><p>按顺序导入所有被main包引用的其他包，然后在每个包中执行如下流程：<br>如果该包又导入了其他的包，则从第一步开始递归执行，但是每个包只会被导入一次。<br>然后以相反的顺序在每个包中初始化常量和变量，如果该包含后init函数的话，则调用该函数。<br>在完成这一切之后，main也执行同样的过程，最后调用main函数开始执行程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go语言变量&quot;&gt;&lt;a href=&quot;#Go语言变量&quot; class=&quot;headerlink&quot; title=&quot;Go语言变量&quot;&gt;&lt;/a&gt;Go语言变量&lt;/h2&gt;
&lt;p&gt;变量来源于数学，是计算机语言中能储存计算结果或能标识值抽象概念。变量可以通过变量名访问。&lt;br&gt;Go语言是
      
    
    </summary>
    
      <category term="Go语言" scheme="https://www.kapyan.top/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="go" scheme="https://www.kapyan.top/tags/go/"/>
    
  </entry>
  
</feed>
